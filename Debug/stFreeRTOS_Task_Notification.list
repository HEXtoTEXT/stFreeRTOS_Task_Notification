
stFreeRTOS_Task_Notification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c24  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004d34  08004d34  00005d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e5c  08004e5c  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  08004e5c  08004e5c  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e5c  08004e5c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e5c  08004e5c  00005e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e60  08004e60  00005e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e64  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000373c  20000010  08004e74  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000374c  08004e74  0000674c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001002f  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002635  00000000  00000000  00016068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  000186a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc6  00000000  00000000  000195d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bc9  00000000  00000000  0001a19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001241b  00000000  00000000  00032d67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8dd  00000000  00000000  00045182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d4a5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed4  00000000  00000000  000d4aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d8978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004d1c 	.word	0x08004d1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004d1c 	.word	0x08004d1c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	f003 0307 	and.w	r3, r3, #7
 800018e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000190:	4b0c      	ldr	r3, [pc, #48]	@ (80001c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000192:	68db      	ldr	r3, [r3, #12]
 8000194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000196:	68ba      	ldr	r2, [r7, #8]
 8000198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800019c:	4013      	ands	r3, r2
 800019e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80001ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001b2:	4a04      	ldr	r2, [pc, #16]	@ (80001c4 <__NVIC_SetPriorityGrouping+0x44>)
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	60d3      	str	r3, [r2, #12]
}
 80001b8:	bf00      	nop
 80001ba:	3714      	adds	r7, #20
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	e000ed00 	.word	0xe000ed00

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  DWT->CTRL |= (1 << DWT_CTRL_CYCCNTENA_Pos); //TODO : It is for SEGGER Sysview.
 80001ce:	4b18      	ldr	r3, [pc, #96]	@ (8000230 <main+0x68>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a17      	ldr	r2, [pc, #92]	@ (8000230 <main+0x68>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fb1d 	bl	8000818 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f835 	bl	800024c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 80001e2:	f000 f879 	bl	80002d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001e6:	f000 f93d 	bl	8000464 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80001ea:	f000 f9a5 	bl	8000538 <MX_SPI1_Init>
  MX_SPI2_Init();
 80001ee:	f000 fa0b 	bl	8000608 <MX_SPI2_Init>
//  huart1.Instance->DR = 'A';

  NVIC_SetPriorityGrouping( 0 );
 80001f2:	2000      	movs	r0, #0
 80001f4:	f7ff ffc4 	bl	8000180 <__NVIC_SetPriorityGrouping>

  SEGGER_SYSVIEW_Conf();
 80001f8:	f002 fffe 	bl	80031f8 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80001fc:	f003 ff6e 	bl	80040dc <SEGGER_SYSVIEW_Start>

  xTaskCreate(taskUsart1, "USART1", configMINIMAL_STACK_SIZE, NULL, 2, &taskUsartHandle1);
 8000200:	4b0c      	ldr	r3, [pc, #48]	@ (8000234 <main+0x6c>)
 8000202:	9301      	str	r3, [sp, #4]
 8000204:	2302      	movs	r3, #2
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2300      	movs	r3, #0
 800020a:	2280      	movs	r2, #128	@ 0x80
 800020c:	490a      	ldr	r1, [pc, #40]	@ (8000238 <main+0x70>)
 800020e:	480b      	ldr	r0, [pc, #44]	@ (800023c <main+0x74>)
 8000210:	f001 fdfa 	bl	8001e08 <xTaskCreate>
  xTaskCreate(taskFunc2, "TASK2", configMINIMAL_STACK_SIZE, NULL, 2, &taskHandle2);
 8000214:	4b0a      	ldr	r3, [pc, #40]	@ (8000240 <main+0x78>)
 8000216:	9301      	str	r3, [sp, #4]
 8000218:	2302      	movs	r3, #2
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2300      	movs	r3, #0
 800021e:	2280      	movs	r2, #128	@ 0x80
 8000220:	4908      	ldr	r1, [pc, #32]	@ (8000244 <main+0x7c>)
 8000222:	4809      	ldr	r0, [pc, #36]	@ (8000248 <main+0x80>)
 8000224:	f001 fdf0 	bl	8001e08 <xTaskCreate>

  vTaskStartScheduler();
 8000228:	f001 ff3c 	bl	80020a4 <vTaskStartScheduler>
  /* USER CODE END 2 */

  while (1)
 800022c:	bf00      	nop
 800022e:	e7fd      	b.n	800022c <main+0x64>
 8000230:	e0001000 	.word	0xe0001000
 8000234:	20000280 	.word	0x20000280
 8000238:	08004d34 	.word	0x08004d34
 800023c:	080003f9 	.word	0x080003f9
 8000240:	20000284 	.word	0x20000284
 8000244:	08004d3c 	.word	0x08004d3c
 8000248:	08000431 	.word	0x08000431

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	@ 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	@ 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f004 fd24 	bl	8004ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026e:	2301      	movs	r3, #1
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000272:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	2302      	movs	r3, #2
 8000282:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000284:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000288:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800028e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fda1 	bl	8000ddc <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a0:	f000 fa28 	bl	80006f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 f80e 	bl	80012e0 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ca:	f000 fa13 	bl	80006f4 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3740      	adds	r7, #64	@ 0x40
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ec:	4b3e      	ldr	r3, [pc, #248]	@ (80003e8 <MX_GPIO_Init+0x110>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a3d      	ldr	r2, [pc, #244]	@ (80003e8 <MX_GPIO_Init+0x110>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b3b      	ldr	r3, [pc, #236]	@ (80003e8 <MX_GPIO_Init+0x110>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0310 	and.w	r3, r3, #16
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000304:	4b38      	ldr	r3, [pc, #224]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a37      	ldr	r2, [pc, #220]	@ (80003e8 <MX_GPIO_Init+0x110>)
 800030a:	f043 0320 	orr.w	r3, r3, #32
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b35      	ldr	r3, [pc, #212]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0320 	and.w	r3, r3, #32
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b32      	ldr	r3, [pc, #200]	@ (80003e8 <MX_GPIO_Init+0x110>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a31      	ldr	r2, [pc, #196]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b2f      	ldr	r3, [pc, #188]	@ (80003e8 <MX_GPIO_Init+0x110>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000334:	4b2c      	ldr	r3, [pc, #176]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a2b      	ldr	r2, [pc, #172]	@ (80003e8 <MX_GPIO_Init+0x110>)
 800033a:	f043 0308 	orr.w	r3, r3, #8
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b29      	ldr	r3, [pc, #164]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0308 	and.w	r3, r3, #8
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000352:	4826      	ldr	r0, [pc, #152]	@ (80003ec <MX_GPIO_Init+0x114>)
 8000354:	f000 fd2a 	bl	8000dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_DC_Pin|LCD_SSEL_Pin|LED_D0_Pin
 8000358:	2200      	movs	r2, #0
 800035a:	f649 0158 	movw	r1, #39000	@ 0x9858
 800035e:	4824      	ldr	r0, [pc, #144]	@ (80003f0 <MX_GPIO_Init+0x118>)
 8000360:	f000 fd24 	bl	8000dac <HAL_GPIO_WritePin>
	                          |LED_D1_Pin|LED_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2108      	movs	r1, #8
 8000368:	4822      	ldr	r0, [pc, #136]	@ (80003f4 <MX_GPIO_Init+0x11c>)
 800036a:	f000 fd1f 	bl	8000dac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 800036e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037c:	2302      	movs	r3, #2
 800037e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	4819      	ldr	r0, [pc, #100]	@ (80003ec <MX_GPIO_Init+0x114>)
 8000388:	f000 fb8c 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin LCD_SSEL_Pin LED_D0_Pin
	                           LED_D1_Pin LED_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_SSEL_Pin|LED_D0_Pin
 800038c:	f649 0358 	movw	r3, #39000	@ 0x9858
 8000390:	613b      	str	r3, [r7, #16]
	                          |LED_D1_Pin|LED_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039a:	2302      	movs	r3, #2
 800039c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	4812      	ldr	r0, [pc, #72]	@ (80003f0 <MX_GPIO_Init+0x118>)
 80003a6:	f000 fb7d 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_TOUCH_Pin */
  GPIO_InitStruct.Pin = KEY_TOUCH_Pin;
 80003aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_TOUCH_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	480c      	ldr	r0, [pc, #48]	@ (80003f0 <MX_GPIO_Init+0x118>)
 80003c0:	f000 fb70 	bl	8000aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin;
 80003c4:	2308      	movs	r3, #8
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2302      	movs	r3, #2
 80003d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_D3_GPIO_Port, &GPIO_InitStruct);
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	4619      	mov	r1, r3
 80003da:	4806      	ldr	r0, [pc, #24]	@ (80003f4 <MX_GPIO_Init+0x11c>)
 80003dc:	f000 fb62 	bl	8000aa4 <HAL_GPIO_Init>
}
 80003e0:	bf00      	nop
 80003e2:	3720      	adds	r7, #32
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40011000 	.word	0x40011000
 80003f0:	40010800 	.word	0x40010800
 80003f4:	40010c00 	.word	0x40010c00

080003f8 <taskUsart1>:

/* USER CODE BEGIN 4 */
void taskUsart1(void *param)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(HAL_UART_Receive(&huart1, &serialChar, 1, 10) == HAL_OK)
 8000400:	230a      	movs	r3, #10
 8000402:	2201      	movs	r2, #1
 8000404:	4907      	ldr	r1, [pc, #28]	@ (8000424 <taskUsart1+0x2c>)
 8000406:	4808      	ldr	r0, [pc, #32]	@ (8000428 <taskUsart1+0x30>)
 8000408:	f001 fa61 	bl	80018ce <HAL_UART_Receive>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d1f6      	bne.n	8000400 <taskUsart1+0x8>
		{
			xTaskNotifyGive(taskHandle2);
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <taskUsart1+0x34>)
 8000414:	6818      	ldr	r0, [r3, #0]
 8000416:	2300      	movs	r3, #0
 8000418:	2202      	movs	r2, #2
 800041a:	2100      	movs	r1, #0
 800041c:	f002 f9d8 	bl	80027d0 <xTaskGenericNotify>
		if(HAL_UART_Receive(&huart1, &serialChar, 1, 10) == HAL_OK)
 8000420:	e7ee      	b.n	8000400 <taskUsart1+0x8>
 8000422:	bf00      	nop
 8000424:	20000380 	.word	0x20000380
 8000428:	20000288 	.word	0x20000288
 800042c:	20000284 	.word	0x20000284

08000430 <taskFunc2>:

	taskYIELD();
}

void taskFunc2(void *param)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b084      	sub	sp, #16
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	uint32_t taskNotificationFlag = 0;
 8000438:	2300      	movs	r3, #0
 800043a:	60fb      	str	r3, [r7, #12]

	while(1)
	{
		taskNotificationFlag = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800043c:	f04f 31ff 	mov.w	r1, #4294967295
 8000440:	2001      	movs	r0, #1
 8000442:	f002 f977 	bl	8002734 <ulTaskNotifyTake>
 8000446:	60f8      	str	r0, [r7, #12]

		if(taskNotificationFlag != 0)
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d0f6      	beq.n	800043c <taskFunc2+0xc>
		{
			HAL_UART_Transmit(&huart1, &serialChar, 1, 10);
 800044e:	230a      	movs	r3, #10
 8000450:	2201      	movs	r2, #1
 8000452:	4902      	ldr	r1, [pc, #8]	@ (800045c <taskFunc2+0x2c>)
 8000454:	4802      	ldr	r0, [pc, #8]	@ (8000460 <taskFunc2+0x30>)
 8000456:	f001 f9b7 	bl	80017c8 <HAL_UART_Transmit>
		taskNotificationFlag = ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800045a:	e7ef      	b.n	800043c <taskFunc2+0xc>
 800045c:	20000380 	.word	0x20000380
 8000460:	20000288 	.word	0x20000288

08000464 <MX_USART1_UART_Init>:
}

//////////////////////////////////////////////////////////////////////////////////////

static void MX_USART1_UART_Init(void)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b086      	sub	sp, #24
 8000468:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046a:	f107 0308 	add.w	r3, r7, #8
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
 8000472:	605a      	str	r2, [r3, #4]
 8000474:	609a      	str	r2, [r3, #8]
 8000476:	60da      	str	r2, [r3, #12]
  /* Peripheral clock enable */
  __HAL_RCC_USART1_CLK_ENABLE();
 8000478:	4b2b      	ldr	r3, [pc, #172]	@ (8000528 <MX_USART1_UART_Init+0xc4>)
 800047a:	699b      	ldr	r3, [r3, #24]
 800047c:	4a2a      	ldr	r2, [pc, #168]	@ (8000528 <MX_USART1_UART_Init+0xc4>)
 800047e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000482:	6193      	str	r3, [r2, #24]
 8000484:	4b28      	ldr	r3, [pc, #160]	@ (8000528 <MX_USART1_UART_Init+0xc4>)
 8000486:	699b      	ldr	r3, [r3, #24]
 8000488:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800048c:	607b      	str	r3, [r7, #4]
 800048e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000490:	4b25      	ldr	r3, [pc, #148]	@ (8000528 <MX_USART1_UART_Init+0xc4>)
 8000492:	699b      	ldr	r3, [r3, #24]
 8000494:	4a24      	ldr	r2, [pc, #144]	@ (8000528 <MX_USART1_UART_Init+0xc4>)
 8000496:	f043 0304 	orr.w	r3, r3, #4
 800049a:	6193      	str	r3, [r2, #24]
 800049c:	4b22      	ldr	r3, [pc, #136]	@ (8000528 <MX_USART1_UART_Init+0xc4>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	f003 0304 	and.w	r3, r3, #4
 80004a4:	603b      	str	r3, [r7, #0]
 80004a6:	683b      	ldr	r3, [r7, #0]
  /**USART1 GPIO Configuration
  PA9     ------> USART1_TX
  PA10     ------> USART1_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80004ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004ae:	2302      	movs	r3, #2
 80004b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004b2:	2303      	movs	r3, #3
 80004b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004b6:	f107 0308 	add.w	r3, r7, #8
 80004ba:	4619      	mov	r1, r3
 80004bc:	481b      	ldr	r0, [pc, #108]	@ (800052c <MX_USART1_UART_Init+0xc8>)
 80004be:	f000 faf1 	bl	8000aa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004cc:	2300      	movs	r3, #0
 80004ce:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d0:	f107 0308 	add.w	r3, r7, #8
 80004d4:	4619      	mov	r1, r3
 80004d6:	4815      	ldr	r0, [pc, #84]	@ (800052c <MX_USART1_UART_Init+0xc8>)
 80004d8:	f000 fae4 	bl	8000aa4 <HAL_GPIO_Init>


  huart1.Instance = USART1;
 80004dc:	4b14      	ldr	r3, [pc, #80]	@ (8000530 <MX_USART1_UART_Init+0xcc>)
 80004de:	4a15      	ldr	r2, [pc, #84]	@ (8000534 <MX_USART1_UART_Init+0xd0>)
 80004e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004e2:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <MX_USART1_UART_Init+0xcc>)
 80004e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004ea:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <MX_USART1_UART_Init+0xcc>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000530 <MX_USART1_UART_Init+0xcc>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004f6:	4b0e      	ldr	r3, [pc, #56]	@ (8000530 <MX_USART1_UART_Init+0xcc>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <MX_USART1_UART_Init+0xcc>)
 80004fe:	220c      	movs	r2, #12
 8000500:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000502:	4b0b      	ldr	r3, [pc, #44]	@ (8000530 <MX_USART1_UART_Init+0xcc>)
 8000504:	2200      	movs	r2, #0
 8000506:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000508:	4b09      	ldr	r3, [pc, #36]	@ (8000530 <MX_USART1_UART_Init+0xcc>)
 800050a:	2200      	movs	r2, #0
 800050c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800050e:	4808      	ldr	r0, [pc, #32]	@ (8000530 <MX_USART1_UART_Init+0xcc>)
 8000510:	f001 f901 	bl	8001716 <HAL_UART_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_USART1_UART_Init+0xba>
  {
    Error_Handler();
 800051a:	f000 f8eb 	bl	80006f4 <Error_Handler>
  }
}
 800051e:	bf00      	nop
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000
 800052c:	40010800 	.word	0x40010800
 8000530:	20000288 	.word	0x20000288
 8000534:	40013800 	.word	0x40013800

08000538 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	b086      	sub	sp, #24
 800053c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800053e:	f107 0308 	add.w	r3, r7, #8
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
 8000546:	605a      	str	r2, [r3, #4]
 8000548:	609a      	str	r2, [r3, #8]
 800054a:	60da      	str	r2, [r3, #12]
  /* Peripheral clock enable */
  __HAL_RCC_SPI1_CLK_ENABLE();
 800054c:	4b2a      	ldr	r3, [pc, #168]	@ (80005f8 <MX_SPI1_Init+0xc0>)
 800054e:	699b      	ldr	r3, [r3, #24]
 8000550:	4a29      	ldr	r2, [pc, #164]	@ (80005f8 <MX_SPI1_Init+0xc0>)
 8000552:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000556:	6193      	str	r3, [r2, #24]
 8000558:	4b27      	ldr	r3, [pc, #156]	@ (80005f8 <MX_SPI1_Init+0xc0>)
 800055a:	699b      	ldr	r3, [r3, #24]
 800055c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000564:	4b24      	ldr	r3, [pc, #144]	@ (80005f8 <MX_SPI1_Init+0xc0>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	4a23      	ldr	r2, [pc, #140]	@ (80005f8 <MX_SPI1_Init+0xc0>)
 800056a:	f043 0304 	orr.w	r3, r3, #4
 800056e:	6193      	str	r3, [r2, #24]
 8000570:	4b21      	ldr	r3, [pc, #132]	@ (80005f8 <MX_SPI1_Init+0xc0>)
 8000572:	699b      	ldr	r3, [r3, #24]
 8000574:	f003 0304 	and.w	r3, r3, #4
 8000578:	603b      	str	r3, [r7, #0]
 800057a:	683b      	ldr	r3, [r7, #0]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA7     ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 800057c:	23a0      	movs	r3, #160	@ 0xa0
 800057e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000580:	2302      	movs	r3, #2
 8000582:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000584:	2303      	movs	r3, #3
 8000586:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	4619      	mov	r1, r3
 800058e:	481b      	ldr	r0, [pc, #108]	@ (80005fc <MX_SPI1_Init+0xc4>)
 8000590:	f000 fa88 	bl	8000aa4 <HAL_GPIO_Init>

  hspi1.Instance = SPI1;
 8000594:	4b1a      	ldr	r3, [pc, #104]	@ (8000600 <MX_SPI1_Init+0xc8>)
 8000596:	4a1b      	ldr	r2, [pc, #108]	@ (8000604 <MX_SPI1_Init+0xcc>)
 8000598:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800059a:	4b19      	ldr	r3, [pc, #100]	@ (8000600 <MX_SPI1_Init+0xc8>)
 800059c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80005a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005a2:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_SPI1_Init+0xc8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005a8:	4b15      	ldr	r3, [pc, #84]	@ (8000600 <MX_SPI1_Init+0xc8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_SPI1_Init+0xc8>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005b4:	4b12      	ldr	r3, [pc, #72]	@ (8000600 <MX_SPI1_Init+0xc8>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_SPI1_Init+0xc8>)
 80005bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80005c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_SPI1_Init+0xc8>)
 80005c4:	2220      	movs	r2, #32
 80005c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <MX_SPI1_Init+0xc8>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_SPI1_Init+0xc8>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <MX_SPI1_Init+0xc8>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_SPI1_Init+0xc8>)
 80005dc:	220a      	movs	r2, #10
 80005de:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005e0:	4807      	ldr	r0, [pc, #28]	@ (8000600 <MX_SPI1_Init+0xc8>)
 80005e2:	f001 f80b 	bl	80015fc <HAL_SPI_Init>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d001      	beq.n	80005f0 <MX_SPI1_Init+0xb8>
  {
    Error_Handler();
 80005ec:	f000 f882 	bl	80006f4 <Error_Handler>
  }
}
 80005f0:	bf00      	nop
 80005f2:	3718      	adds	r7, #24
 80005f4:	46bd      	mov	sp, r7
 80005f6:	bd80      	pop	{r7, pc}
 80005f8:	40021000 	.word	0x40021000
 80005fc:	40010800 	.word	0x40010800
 8000600:	200002d0 	.word	0x200002d0
 8000604:	40013000 	.word	0x40013000

08000608 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b086      	sub	sp, #24
 800060c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0308 	add.w	r3, r7, #8
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
  /* Peripheral clock enable */
  __HAL_RCC_SPI2_CLK_ENABLE();
 800061c:	4b31      	ldr	r3, [pc, #196]	@ (80006e4 <MX_SPI2_Init+0xdc>)
 800061e:	69db      	ldr	r3, [r3, #28]
 8000620:	4a30      	ldr	r2, [pc, #192]	@ (80006e4 <MX_SPI2_Init+0xdc>)
 8000622:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000626:	61d3      	str	r3, [r2, #28]
 8000628:	4b2e      	ldr	r3, [pc, #184]	@ (80006e4 <MX_SPI2_Init+0xdc>)
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000634:	4b2b      	ldr	r3, [pc, #172]	@ (80006e4 <MX_SPI2_Init+0xdc>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	4a2a      	ldr	r2, [pc, #168]	@ (80006e4 <MX_SPI2_Init+0xdc>)
 800063a:	f043 0308 	orr.w	r3, r3, #8
 800063e:	6193      	str	r3, [r2, #24]
 8000640:	4b28      	ldr	r3, [pc, #160]	@ (80006e4 <MX_SPI2_Init+0xdc>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	f003 0308 	and.w	r3, r3, #8
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	683b      	ldr	r3, [r7, #0]
  /**SPI2 GPIO Configuration
  PB13     ------> SPI2_SCK
  PB14     ------> SPI2_MISO
  PB15     ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800064c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000650:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000652:	2302      	movs	r3, #2
 8000654:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000656:	2303      	movs	r3, #3
 8000658:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	4619      	mov	r1, r3
 8000660:	4821      	ldr	r0, [pc, #132]	@ (80006e8 <MX_SPI2_Init+0xe0>)
 8000662:	f000 fa1f 	bl	8000aa4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000666:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800066a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800066c:	2300      	movs	r3, #0
 800066e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000674:	f107 0308 	add.w	r3, r7, #8
 8000678:	4619      	mov	r1, r3
 800067a:	481b      	ldr	r0, [pc, #108]	@ (80006e8 <MX_SPI2_Init+0xe0>)
 800067c:	f000 fa12 	bl	8000aa4 <HAL_GPIO_Init>

  hspi2.Instance = SPI2;
 8000680:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <MX_SPI2_Init+0xe4>)
 8000682:	4a1b      	ldr	r2, [pc, #108]	@ (80006f0 <MX_SPI2_Init+0xe8>)
 8000684:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000686:	4b19      	ldr	r3, [pc, #100]	@ (80006ec <MX_SPI2_Init+0xe4>)
 8000688:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800068c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <MX_SPI2_Init+0xe4>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000694:	4b15      	ldr	r3, [pc, #84]	@ (80006ec <MX_SPI2_Init+0xe4>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <MX_SPI2_Init+0xe4>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a0:	4b12      	ldr	r3, [pc, #72]	@ (80006ec <MX_SPI2_Init+0xe4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <MX_SPI2_Init+0xe4>)
 80006a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80006ae:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <MX_SPI2_Init+0xe4>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006b4:	4b0d      	ldr	r3, [pc, #52]	@ (80006ec <MX_SPI2_Init+0xe4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <MX_SPI2_Init+0xe4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c0:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <MX_SPI2_Init+0xe4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006c6:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <MX_SPI2_Init+0xe4>)
 80006c8:	220a      	movs	r2, #10
 80006ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006cc:	4807      	ldr	r0, [pc, #28]	@ (80006ec <MX_SPI2_Init+0xe4>)
 80006ce:	f000 ff95 	bl	80015fc <HAL_SPI_Init>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <MX_SPI2_Init+0xd4>
  {
    Error_Handler();
 80006d8:	f000 f80c 	bl	80006f4 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3718      	adds	r7, #24
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40021000 	.word	0x40021000
 80006e8:	40010c00 	.word	0x40010c00
 80006ec:	20000328 	.word	0x20000328
 80006f0:	40003800 	.word	0x40003800

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <Error_Handler+0x8>

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000706:	4b18      	ldr	r3, [pc, #96]	@ (8000768 <HAL_MspInit+0x68>)
 8000708:	699b      	ldr	r3, [r3, #24]
 800070a:	4a17      	ldr	r2, [pc, #92]	@ (8000768 <HAL_MspInit+0x68>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6193      	str	r3, [r2, #24]
 8000712:	4b15      	ldr	r3, [pc, #84]	@ (8000768 <HAL_MspInit+0x68>)
 8000714:	699b      	ldr	r3, [r3, #24]
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b12      	ldr	r3, [pc, #72]	@ (8000768 <HAL_MspInit+0x68>)
 8000720:	69db      	ldr	r3, [r3, #28]
 8000722:	4a11      	ldr	r2, [pc, #68]	@ (8000768 <HAL_MspInit+0x68>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000728:	61d3      	str	r3, [r2, #28]
 800072a:	4b0f      	ldr	r3, [pc, #60]	@ (8000768 <HAL_MspInit+0x68>)
 800072c:	69db      	ldr	r3, [r3, #28]
 800072e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	210f      	movs	r1, #15
 800073a:	f06f 0001 	mvn.w	r0, #1
 800073e:	f000 f988 	bl	8000a52 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000742:	4b0a      	ldr	r3, [pc, #40]	@ (800076c <HAL_MspInit+0x6c>)
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	60fb      	str	r3, [r7, #12]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800074e:	60fb      	str	r3, [r7, #12]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	4a04      	ldr	r2, [pc, #16]	@ (800076c <HAL_MspInit+0x6c>)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000
 800076c:	40010000 	.word	0x40010000

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000774:	bf00      	nop
 8000776:	e7fd      	b.n	8000774 <NMI_Handler+0x4>

08000778 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <HardFault_Handler+0x4>

08000780 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000784:	bf00      	nop
 8000786:	e7fd      	b.n	8000784 <MemManage_Handler+0x4>

08000788 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078c:	bf00      	nop
 800078e:	e7fd      	b.n	800078c <BusFault_Handler+0x4>

08000790 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000794:	bf00      	nop
 8000796:	e7fd      	b.n	8000794 <UsageFault_Handler+0x4>

08000798 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800079c:	bf00      	nop
 800079e:	46bd      	mov	sp, r7
 80007a0:	bc80      	pop	{r7}
 80007a2:	4770      	bx	lr

080007a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007a8:	f000 f87c 	bl	80008a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007ac:	f001 ffa4 	bl	80026f8 <xTaskGetSchedulerState>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d001      	beq.n	80007ba <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007b6:	f002 faa7 	bl	8002d08 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}

080007be <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bc80      	pop	{r7}
 80007c8:	4770      	bx	lr
	...

080007cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007cc:	f7ff fff7 	bl	80007be <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d0:	480b      	ldr	r0, [pc, #44]	@ (8000800 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80007d2:	490c      	ldr	r1, [pc, #48]	@ (8000804 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80007d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000808 <LoopFillZerobss+0x16>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007d8:	e002      	b.n	80007e0 <LoopCopyDataInit>

080007da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007de:	3304      	adds	r3, #4

080007e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e4:	d3f9      	bcc.n	80007da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007e6:	4a09      	ldr	r2, [pc, #36]	@ (800080c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007e8:	4c09      	ldr	r4, [pc, #36]	@ (8000810 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ec:	e001      	b.n	80007f2 <LoopFillZerobss>

080007ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f0:	3204      	adds	r2, #4

080007f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f4:	d3fb      	bcc.n	80007ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007f6:	f004 fa5f 	bl	8004cb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007fa:	f7ff fce5 	bl	80001c8 <main>
  bx lr
 80007fe:	4770      	bx	lr
  ldr r0, =_sdata
 8000800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000804:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000808:	08004e64 	.word	0x08004e64
  ldr r2, =_sbss
 800080c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000810:	2000374c 	.word	0x2000374c

08000814 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000814:	e7fe      	b.n	8000814 <ADC1_2_IRQHandler>
	...

08000818 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800081c:	4b08      	ldr	r3, [pc, #32]	@ (8000840 <HAL_Init+0x28>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4a07      	ldr	r2, [pc, #28]	@ (8000840 <HAL_Init+0x28>)
 8000822:	f043 0310 	orr.w	r3, r3, #16
 8000826:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000828:	2003      	movs	r0, #3
 800082a:	f000 f907 	bl	8000a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800082e:	200f      	movs	r0, #15
 8000830:	f000 f808 	bl	8000844 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000834:	f7ff ff64 	bl	8000700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000838:	2300      	movs	r3, #0
}
 800083a:	4618      	mov	r0, r3
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40022000 	.word	0x40022000

08000844 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800084c:	4b12      	ldr	r3, [pc, #72]	@ (8000898 <HAL_InitTick+0x54>)
 800084e:	681a      	ldr	r2, [r3, #0]
 8000850:	4b12      	ldr	r3, [pc, #72]	@ (800089c <HAL_InitTick+0x58>)
 8000852:	781b      	ldrb	r3, [r3, #0]
 8000854:	4619      	mov	r1, r3
 8000856:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800085a:	fbb3 f3f1 	udiv	r3, r3, r1
 800085e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000862:	4618      	mov	r0, r3
 8000864:	f000 f911 	bl	8000a8a <HAL_SYSTICK_Config>
 8000868:	4603      	mov	r3, r0
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800086e:	2301      	movs	r3, #1
 8000870:	e00e      	b.n	8000890 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2b0f      	cmp	r3, #15
 8000876:	d80a      	bhi.n	800088e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000878:	2200      	movs	r2, #0
 800087a:	6879      	ldr	r1, [r7, #4]
 800087c:	f04f 30ff 	mov.w	r0, #4294967295
 8000880:	f000 f8e7 	bl	8000a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000884:	4a06      	ldr	r2, [pc, #24]	@ (80008a0 <HAL_InitTick+0x5c>)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800088a:	2300      	movs	r3, #0
 800088c:	e000      	b.n	8000890 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800088e:	2301      	movs	r3, #1
}
 8000890:	4618      	mov	r0, r3
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000000 	.word	0x20000000
 800089c:	20000008 	.word	0x20000008
 80008a0:	20000004 	.word	0x20000004

080008a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008a8:	4b05      	ldr	r3, [pc, #20]	@ (80008c0 <HAL_IncTick+0x1c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b05      	ldr	r3, [pc, #20]	@ (80008c4 <HAL_IncTick+0x20>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4413      	add	r3, r2
 80008b4:	4a03      	ldr	r2, [pc, #12]	@ (80008c4 <HAL_IncTick+0x20>)
 80008b6:	6013      	str	r3, [r2, #0]
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	20000008 	.word	0x20000008
 80008c4:	20000384 	.word	0x20000384

080008c8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  return uwTick;
 80008cc:	4b02      	ldr	r3, [pc, #8]	@ (80008d8 <HAL_GetTick+0x10>)
 80008ce:	681b      	ldr	r3, [r3, #0]
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bc80      	pop	{r7}
 80008d6:	4770      	bx	lr
 80008d8:	20000384 	.word	0x20000384

080008dc <__NVIC_SetPriorityGrouping>:
{
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f003 0307 	and.w	r3, r3, #7
 80008ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008f2:	68ba      	ldr	r2, [r7, #8]
 80008f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008f8:	4013      	ands	r3, r2
 80008fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000904:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000908:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800090e:	4a04      	ldr	r2, [pc, #16]	@ (8000920 <__NVIC_SetPriorityGrouping+0x44>)
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	60d3      	str	r3, [r2, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000928:	4b04      	ldr	r3, [pc, #16]	@ (800093c <__NVIC_GetPriorityGrouping+0x18>)
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	f003 0307 	and.w	r3, r3, #7
}
 8000932:	4618      	mov	r0, r3
 8000934:	46bd      	mov	sp, r7
 8000936:	bc80      	pop	{r7}
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop
 800093c:	e000ed00 	.word	0xe000ed00

08000940 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	4603      	mov	r3, r0
 8000948:	6039      	str	r1, [r7, #0]
 800094a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800094c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000950:	2b00      	cmp	r3, #0
 8000952:	db0a      	blt.n	800096a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	b2da      	uxtb	r2, r3
 8000958:	490c      	ldr	r1, [pc, #48]	@ (800098c <__NVIC_SetPriority+0x4c>)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	0112      	lsls	r2, r2, #4
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	440b      	add	r3, r1
 8000964:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000968:	e00a      	b.n	8000980 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800096a:	683b      	ldr	r3, [r7, #0]
 800096c:	b2da      	uxtb	r2, r3
 800096e:	4908      	ldr	r1, [pc, #32]	@ (8000990 <__NVIC_SetPriority+0x50>)
 8000970:	79fb      	ldrb	r3, [r7, #7]
 8000972:	f003 030f 	and.w	r3, r3, #15
 8000976:	3b04      	subs	r3, #4
 8000978:	0112      	lsls	r2, r2, #4
 800097a:	b2d2      	uxtb	r2, r2
 800097c:	440b      	add	r3, r1
 800097e:	761a      	strb	r2, [r3, #24]
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	e000e100 	.word	0xe000e100
 8000990:	e000ed00 	.word	0xe000ed00

08000994 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000994:	b480      	push	{r7}
 8000996:	b089      	sub	sp, #36	@ 0x24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009a8:	69fb      	ldr	r3, [r7, #28]
 80009aa:	f1c3 0307 	rsb	r3, r3, #7
 80009ae:	2b04      	cmp	r3, #4
 80009b0:	bf28      	it	cs
 80009b2:	2304      	movcs	r3, #4
 80009b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	3304      	adds	r3, #4
 80009ba:	2b06      	cmp	r3, #6
 80009bc:	d902      	bls.n	80009c4 <NVIC_EncodePriority+0x30>
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3b03      	subs	r3, #3
 80009c2:	e000      	b.n	80009c6 <NVIC_EncodePriority+0x32>
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c8:	f04f 32ff 	mov.w	r2, #4294967295
 80009cc:	69bb      	ldr	r3, [r7, #24]
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43da      	mvns	r2, r3
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	401a      	ands	r2, r3
 80009d8:	697b      	ldr	r3, [r7, #20]
 80009da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009dc:	f04f 31ff 	mov.w	r1, #4294967295
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	fa01 f303 	lsl.w	r3, r1, r3
 80009e6:	43d9      	mvns	r1, r3
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ec:	4313      	orrs	r3, r2
         );
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3724      	adds	r7, #36	@ 0x24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bc80      	pop	{r7}
 80009f6:	4770      	bx	lr

080009f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a08:	d301      	bcc.n	8000a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	e00f      	b.n	8000a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a38 <SysTick_Config+0x40>)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a16:	210f      	movs	r1, #15
 8000a18:	f04f 30ff 	mov.w	r0, #4294967295
 8000a1c:	f7ff ff90 	bl	8000940 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <SysTick_Config+0x40>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a26:	4b04      	ldr	r3, [pc, #16]	@ (8000a38 <SysTick_Config+0x40>)
 8000a28:	2207      	movs	r2, #7
 8000a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3708      	adds	r7, #8
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	e000e010 	.word	0xe000e010

08000a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	f7ff ff49 	bl	80008dc <__NVIC_SetPriorityGrouping>
}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}

08000a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a52:	b580      	push	{r7, lr}
 8000a54:	b086      	sub	sp, #24
 8000a56:	af00      	add	r7, sp, #0
 8000a58:	4603      	mov	r3, r0
 8000a5a:	60b9      	str	r1, [r7, #8]
 8000a5c:	607a      	str	r2, [r7, #4]
 8000a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a64:	f7ff ff5e 	bl	8000924 <__NVIC_GetPriorityGrouping>
 8000a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	68b9      	ldr	r1, [r7, #8]
 8000a6e:	6978      	ldr	r0, [r7, #20]
 8000a70:	f7ff ff90 	bl	8000994 <NVIC_EncodePriority>
 8000a74:	4602      	mov	r2, r0
 8000a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a7a:	4611      	mov	r1, r2
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff ff5f 	bl	8000940 <__NVIC_SetPriority>
}
 8000a82:	bf00      	nop
 8000a84:	3718      	adds	r7, #24
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}

08000a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a8a:	b580      	push	{r7, lr}
 8000a8c:	b082      	sub	sp, #8
 8000a8e:	af00      	add	r7, sp, #0
 8000a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f7ff ffb0 	bl	80009f8 <SysTick_Config>
 8000a98:	4603      	mov	r3, r0
}
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b08b      	sub	sp, #44	@ 0x2c
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ab6:	e169      	b.n	8000d8c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	69fa      	ldr	r2, [r7, #28]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	429a      	cmp	r2, r3
 8000ad2:	f040 8158 	bne.w	8000d86 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685b      	ldr	r3, [r3, #4]
 8000ada:	4a9a      	ldr	r2, [pc, #616]	@ (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d05e      	beq.n	8000b9e <HAL_GPIO_Init+0xfa>
 8000ae0:	4a98      	ldr	r2, [pc, #608]	@ (8000d44 <HAL_GPIO_Init+0x2a0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d875      	bhi.n	8000bd2 <HAL_GPIO_Init+0x12e>
 8000ae6:	4a98      	ldr	r2, [pc, #608]	@ (8000d48 <HAL_GPIO_Init+0x2a4>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d058      	beq.n	8000b9e <HAL_GPIO_Init+0xfa>
 8000aec:	4a96      	ldr	r2, [pc, #600]	@ (8000d48 <HAL_GPIO_Init+0x2a4>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d86f      	bhi.n	8000bd2 <HAL_GPIO_Init+0x12e>
 8000af2:	4a96      	ldr	r2, [pc, #600]	@ (8000d4c <HAL_GPIO_Init+0x2a8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d052      	beq.n	8000b9e <HAL_GPIO_Init+0xfa>
 8000af8:	4a94      	ldr	r2, [pc, #592]	@ (8000d4c <HAL_GPIO_Init+0x2a8>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d869      	bhi.n	8000bd2 <HAL_GPIO_Init+0x12e>
 8000afe:	4a94      	ldr	r2, [pc, #592]	@ (8000d50 <HAL_GPIO_Init+0x2ac>)
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d04c      	beq.n	8000b9e <HAL_GPIO_Init+0xfa>
 8000b04:	4a92      	ldr	r2, [pc, #584]	@ (8000d50 <HAL_GPIO_Init+0x2ac>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d863      	bhi.n	8000bd2 <HAL_GPIO_Init+0x12e>
 8000b0a:	4a92      	ldr	r2, [pc, #584]	@ (8000d54 <HAL_GPIO_Init+0x2b0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d046      	beq.n	8000b9e <HAL_GPIO_Init+0xfa>
 8000b10:	4a90      	ldr	r2, [pc, #576]	@ (8000d54 <HAL_GPIO_Init+0x2b0>)
 8000b12:	4293      	cmp	r3, r2
 8000b14:	d85d      	bhi.n	8000bd2 <HAL_GPIO_Init+0x12e>
 8000b16:	2b12      	cmp	r3, #18
 8000b18:	d82a      	bhi.n	8000b70 <HAL_GPIO_Init+0xcc>
 8000b1a:	2b12      	cmp	r3, #18
 8000b1c:	d859      	bhi.n	8000bd2 <HAL_GPIO_Init+0x12e>
 8000b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b24 <HAL_GPIO_Init+0x80>)
 8000b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b24:	08000b9f 	.word	0x08000b9f
 8000b28:	08000b79 	.word	0x08000b79
 8000b2c:	08000b8b 	.word	0x08000b8b
 8000b30:	08000bcd 	.word	0x08000bcd
 8000b34:	08000bd3 	.word	0x08000bd3
 8000b38:	08000bd3 	.word	0x08000bd3
 8000b3c:	08000bd3 	.word	0x08000bd3
 8000b40:	08000bd3 	.word	0x08000bd3
 8000b44:	08000bd3 	.word	0x08000bd3
 8000b48:	08000bd3 	.word	0x08000bd3
 8000b4c:	08000bd3 	.word	0x08000bd3
 8000b50:	08000bd3 	.word	0x08000bd3
 8000b54:	08000bd3 	.word	0x08000bd3
 8000b58:	08000bd3 	.word	0x08000bd3
 8000b5c:	08000bd3 	.word	0x08000bd3
 8000b60:	08000bd3 	.word	0x08000bd3
 8000b64:	08000bd3 	.word	0x08000bd3
 8000b68:	08000b81 	.word	0x08000b81
 8000b6c:	08000b95 	.word	0x08000b95
 8000b70:	4a79      	ldr	r2, [pc, #484]	@ (8000d58 <HAL_GPIO_Init+0x2b4>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d013      	beq.n	8000b9e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b76:	e02c      	b.n	8000bd2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	623b      	str	r3, [r7, #32]
          break;
 8000b7e:	e029      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	3304      	adds	r3, #4
 8000b86:	623b      	str	r3, [r7, #32]
          break;
 8000b88:	e024      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	68db      	ldr	r3, [r3, #12]
 8000b8e:	3308      	adds	r3, #8
 8000b90:	623b      	str	r3, [r7, #32]
          break;
 8000b92:	e01f      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	330c      	adds	r3, #12
 8000b9a:	623b      	str	r3, [r7, #32]
          break;
 8000b9c:	e01a      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d102      	bne.n	8000bac <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	623b      	str	r3, [r7, #32]
          break;
 8000baa:	e013      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d105      	bne.n	8000bc0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bb4:	2308      	movs	r3, #8
 8000bb6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	69fa      	ldr	r2, [r7, #28]
 8000bbc:	611a      	str	r2, [r3, #16]
          break;
 8000bbe:	e009      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc0:	2308      	movs	r3, #8
 8000bc2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	69fa      	ldr	r2, [r7, #28]
 8000bc8:	615a      	str	r2, [r3, #20]
          break;
 8000bca:	e003      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	623b      	str	r3, [r7, #32]
          break;
 8000bd0:	e000      	b.n	8000bd4 <HAL_GPIO_Init+0x130>
          break;
 8000bd2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	2bff      	cmp	r3, #255	@ 0xff
 8000bd8:	d801      	bhi.n	8000bde <HAL_GPIO_Init+0x13a>
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	e001      	b.n	8000be2 <HAL_GPIO_Init+0x13e>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3304      	adds	r3, #4
 8000be2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000be4:	69bb      	ldr	r3, [r7, #24]
 8000be6:	2bff      	cmp	r3, #255	@ 0xff
 8000be8:	d802      	bhi.n	8000bf0 <HAL_GPIO_Init+0x14c>
 8000bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	e002      	b.n	8000bf6 <HAL_GPIO_Init+0x152>
 8000bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bf2:	3b08      	subs	r3, #8
 8000bf4:	009b      	lsls	r3, r3, #2
 8000bf6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bf8:	697b      	ldr	r3, [r7, #20]
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	210f      	movs	r1, #15
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	fa01 f303 	lsl.w	r3, r1, r3
 8000c04:	43db      	mvns	r3, r3
 8000c06:	401a      	ands	r2, r3
 8000c08:	6a39      	ldr	r1, [r7, #32]
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	431a      	orrs	r2, r3
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	f000 80b1 	beq.w	8000d86 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c24:	4b4d      	ldr	r3, [pc, #308]	@ (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000c26:	699b      	ldr	r3, [r3, #24]
 8000c28:	4a4c      	ldr	r2, [pc, #304]	@ (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000c2a:	f043 0301 	orr.w	r3, r3, #1
 8000c2e:	6193      	str	r3, [r2, #24]
 8000c30:	4b4a      	ldr	r3, [pc, #296]	@ (8000d5c <HAL_GPIO_Init+0x2b8>)
 8000c32:	699b      	ldr	r3, [r3, #24]
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c3c:	4a48      	ldr	r2, [pc, #288]	@ (8000d60 <HAL_GPIO_Init+0x2bc>)
 8000c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c40:	089b      	lsrs	r3, r3, #2
 8000c42:	3302      	adds	r3, #2
 8000c44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c48:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	f003 0303 	and.w	r3, r3, #3
 8000c50:	009b      	lsls	r3, r3, #2
 8000c52:	220f      	movs	r2, #15
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	43db      	mvns	r3, r3
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a40      	ldr	r2, [pc, #256]	@ (8000d64 <HAL_GPIO_Init+0x2c0>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d013      	beq.n	8000c90 <HAL_GPIO_Init+0x1ec>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d68 <HAL_GPIO_Init+0x2c4>)
 8000c6c:	4293      	cmp	r3, r2
 8000c6e:	d00d      	beq.n	8000c8c <HAL_GPIO_Init+0x1e8>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	4a3e      	ldr	r2, [pc, #248]	@ (8000d6c <HAL_GPIO_Init+0x2c8>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d007      	beq.n	8000c88 <HAL_GPIO_Init+0x1e4>
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d70 <HAL_GPIO_Init+0x2cc>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d101      	bne.n	8000c84 <HAL_GPIO_Init+0x1e0>
 8000c80:	2303      	movs	r3, #3
 8000c82:	e006      	b.n	8000c92 <HAL_GPIO_Init+0x1ee>
 8000c84:	2304      	movs	r3, #4
 8000c86:	e004      	b.n	8000c92 <HAL_GPIO_Init+0x1ee>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e002      	b.n	8000c92 <HAL_GPIO_Init+0x1ee>
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	e000      	b.n	8000c92 <HAL_GPIO_Init+0x1ee>
 8000c90:	2300      	movs	r3, #0
 8000c92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c94:	f002 0203 	and.w	r2, r2, #3
 8000c98:	0092      	lsls	r2, r2, #2
 8000c9a:	4093      	lsls	r3, r2
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ca2:	492f      	ldr	r1, [pc, #188]	@ (8000d60 <HAL_GPIO_Init+0x2bc>)
 8000ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca6:	089b      	lsrs	r3, r3, #2
 8000ca8:	3302      	adds	r3, #2
 8000caa:	68fa      	ldr	r2, [r7, #12]
 8000cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d006      	beq.n	8000cca <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000cbe:	689a      	ldr	r2, [r3, #8]
 8000cc0:	492c      	ldr	r1, [pc, #176]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000cc2:	69bb      	ldr	r3, [r7, #24]
 8000cc4:	4313      	orrs	r3, r2
 8000cc6:	608b      	str	r3, [r1, #8]
 8000cc8:	e006      	b.n	8000cd8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cca:	4b2a      	ldr	r3, [pc, #168]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	69bb      	ldr	r3, [r7, #24]
 8000cd0:	43db      	mvns	r3, r3
 8000cd2:	4928      	ldr	r1, [pc, #160]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	685b      	ldr	r3, [r3, #4]
 8000cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d006      	beq.n	8000cf2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ce4:	4b23      	ldr	r3, [pc, #140]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000ce6:	68da      	ldr	r2, [r3, #12]
 8000ce8:	4922      	ldr	r1, [pc, #136]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000cea:	69bb      	ldr	r3, [r7, #24]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	60cb      	str	r3, [r1, #12]
 8000cf0:	e006      	b.n	8000d00 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cf2:	4b20      	ldr	r3, [pc, #128]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000cf4:	68da      	ldr	r2, [r3, #12]
 8000cf6:	69bb      	ldr	r3, [r7, #24]
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	491e      	ldr	r1, [pc, #120]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d006      	beq.n	8000d1a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d0c:	4b19      	ldr	r3, [pc, #100]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	4918      	ldr	r1, [pc, #96]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	604b      	str	r3, [r1, #4]
 8000d18:	e006      	b.n	8000d28 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d1a:	4b16      	ldr	r3, [pc, #88]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000d1c:	685a      	ldr	r2, [r3, #4]
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	43db      	mvns	r3, r3
 8000d22:	4914      	ldr	r1, [pc, #80]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000d24:	4013      	ands	r3, r2
 8000d26:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d021      	beq.n	8000d78 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d34:	4b0f      	ldr	r3, [pc, #60]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	490e      	ldr	r1, [pc, #56]	@ (8000d74 <HAL_GPIO_Init+0x2d0>)
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	600b      	str	r3, [r1, #0]
 8000d40:	e021      	b.n	8000d86 <HAL_GPIO_Init+0x2e2>
 8000d42:	bf00      	nop
 8000d44:	10320000 	.word	0x10320000
 8000d48:	10310000 	.word	0x10310000
 8000d4c:	10220000 	.word	0x10220000
 8000d50:	10210000 	.word	0x10210000
 8000d54:	10120000 	.word	0x10120000
 8000d58:	10110000 	.word	0x10110000
 8000d5c:	40021000 	.word	0x40021000
 8000d60:	40010000 	.word	0x40010000
 8000d64:	40010800 	.word	0x40010800
 8000d68:	40010c00 	.word	0x40010c00
 8000d6c:	40011000 	.word	0x40011000
 8000d70:	40011400 	.word	0x40011400
 8000d74:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d78:	4b0b      	ldr	r3, [pc, #44]	@ (8000da8 <HAL_GPIO_Init+0x304>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	4909      	ldr	r1, [pc, #36]	@ (8000da8 <HAL_GPIO_Init+0x304>)
 8000d82:	4013      	ands	r3, r2
 8000d84:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d88:	3301      	adds	r3, #1
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d92:	fa22 f303 	lsr.w	r3, r2, r3
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f47f ae8e 	bne.w	8000ab8 <HAL_GPIO_Init+0x14>
  }
}
 8000d9c:	bf00      	nop
 8000d9e:	bf00      	nop
 8000da0:	372c      	adds	r7, #44	@ 0x2c
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bc80      	pop	{r7}
 8000da6:	4770      	bx	lr
 8000da8:	40010400 	.word	0x40010400

08000dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	807b      	strh	r3, [r7, #2]
 8000db8:	4613      	mov	r3, r2
 8000dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000dbc:	787b      	ldrb	r3, [r7, #1]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d003      	beq.n	8000dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000dc2:	887a      	ldrh	r2, [r7, #2]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000dc8:	e003      	b.n	8000dd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000dca:	887b      	ldrh	r3, [r7, #2]
 8000dcc:	041a      	lsls	r2, r3, #16
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	611a      	str	r2, [r3, #16]
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bc80      	pop	{r7}
 8000dda:	4770      	bx	lr

08000ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b086      	sub	sp, #24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d101      	bne.n	8000dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e272      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f003 0301 	and.w	r3, r3, #1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f000 8087 	beq.w	8000f0a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dfc:	4b92      	ldr	r3, [pc, #584]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 030c 	and.w	r3, r3, #12
 8000e04:	2b04      	cmp	r3, #4
 8000e06:	d00c      	beq.n	8000e22 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e08:	4b8f      	ldr	r3, [pc, #572]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f003 030c 	and.w	r3, r3, #12
 8000e10:	2b08      	cmp	r3, #8
 8000e12:	d112      	bne.n	8000e3a <HAL_RCC_OscConfig+0x5e>
 8000e14:	4b8c      	ldr	r3, [pc, #560]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e20:	d10b      	bne.n	8000e3a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e22:	4b89      	ldr	r3, [pc, #548]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d06c      	beq.n	8000f08 <HAL_RCC_OscConfig+0x12c>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d168      	bne.n	8000f08 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	e24c      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e42:	d106      	bne.n	8000e52 <HAL_RCC_OscConfig+0x76>
 8000e44:	4b80      	ldr	r3, [pc, #512]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a7f      	ldr	r2, [pc, #508]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e4e:	6013      	str	r3, [r2, #0]
 8000e50:	e02e      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d10c      	bne.n	8000e74 <HAL_RCC_OscConfig+0x98>
 8000e5a:	4b7b      	ldr	r3, [pc, #492]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a7a      	ldr	r2, [pc, #488]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	4b78      	ldr	r3, [pc, #480]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a77      	ldr	r2, [pc, #476]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e70:	6013      	str	r3, [r2, #0]
 8000e72:	e01d      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e7c:	d10c      	bne.n	8000e98 <HAL_RCC_OscConfig+0xbc>
 8000e7e:	4b72      	ldr	r3, [pc, #456]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a71      	ldr	r2, [pc, #452]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e88:	6013      	str	r3, [r2, #0]
 8000e8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a6e      	ldr	r2, [pc, #440]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e94:	6013      	str	r3, [r2, #0]
 8000e96:	e00b      	b.n	8000eb0 <HAL_RCC_OscConfig+0xd4>
 8000e98:	4b6b      	ldr	r3, [pc, #428]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a6a      	ldr	r2, [pc, #424]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000e9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ea2:	6013      	str	r3, [r2, #0]
 8000ea4:	4b68      	ldr	r3, [pc, #416]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a67      	ldr	r2, [pc, #412]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000eae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d013      	beq.n	8000ee0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb8:	f7ff fd06 	bl	80008c8 <HAL_GetTick>
 8000ebc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebe:	e008      	b.n	8000ed2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ec0:	f7ff fd02 	bl	80008c8 <HAL_GetTick>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	1ad3      	subs	r3, r2, r3
 8000eca:	2b64      	cmp	r3, #100	@ 0x64
 8000ecc:	d901      	bls.n	8000ed2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	e200      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ed2:	4b5d      	ldr	r3, [pc, #372]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d0f0      	beq.n	8000ec0 <HAL_RCC_OscConfig+0xe4>
 8000ede:	e014      	b.n	8000f0a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ee0:	f7ff fcf2 	bl	80008c8 <HAL_GetTick>
 8000ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee6:	e008      	b.n	8000efa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ee8:	f7ff fcee 	bl	80008c8 <HAL_GetTick>
 8000eec:	4602      	mov	r2, r0
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	2b64      	cmp	r3, #100	@ 0x64
 8000ef4:	d901      	bls.n	8000efa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	e1ec      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000efa:	4b53      	ldr	r3, [pc, #332]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d1f0      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x10c>
 8000f06:	e000      	b.n	8000f0a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d063      	beq.n	8000fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f16:	4b4c      	ldr	r3, [pc, #304]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d00b      	beq.n	8000f3a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f22:	4b49      	ldr	r3, [pc, #292]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 030c 	and.w	r3, r3, #12
 8000f2a:	2b08      	cmp	r3, #8
 8000f2c:	d11c      	bne.n	8000f68 <HAL_RCC_OscConfig+0x18c>
 8000f2e:	4b46      	ldr	r3, [pc, #280]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d116      	bne.n	8000f68 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f3a:	4b43      	ldr	r3, [pc, #268]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d005      	beq.n	8000f52 <HAL_RCC_OscConfig+0x176>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	691b      	ldr	r3, [r3, #16]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d001      	beq.n	8000f52 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e1c0      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f52:	4b3d      	ldr	r3, [pc, #244]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	00db      	lsls	r3, r3, #3
 8000f60:	4939      	ldr	r1, [pc, #228]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f62:	4313      	orrs	r3, r2
 8000f64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f66:	e03a      	b.n	8000fde <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d020      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f70:	4b36      	ldr	r3, [pc, #216]	@ (800104c <HAL_RCC_OscConfig+0x270>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f76:	f7ff fca7 	bl	80008c8 <HAL_GetTick>
 8000f7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7c:	e008      	b.n	8000f90 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f7e:	f7ff fca3 	bl	80008c8 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d901      	bls.n	8000f90 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	e1a1      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f90:	4b2d      	ldr	r3, [pc, #180]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0f0      	beq.n	8000f7e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9c:	4b2a      	ldr	r3, [pc, #168]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
 8000fa8:	00db      	lsls	r3, r3, #3
 8000faa:	4927      	ldr	r1, [pc, #156]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
 8000fb0:	e015      	b.n	8000fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fb2:	4b26      	ldr	r3, [pc, #152]	@ (800104c <HAL_RCC_OscConfig+0x270>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb8:	f7ff fc86 	bl	80008c8 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fc82 	bl	80008c8 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e180      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d1f0      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f003 0308 	and.w	r3, r3, #8
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d03a      	beq.n	8001060 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d019      	beq.n	8001026 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ff2:	4b17      	ldr	r3, [pc, #92]	@ (8001050 <HAL_RCC_OscConfig+0x274>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff8:	f7ff fc66 	bl	80008c8 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001000:	f7ff fc62 	bl	80008c8 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e160      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001012:	4b0d      	ldr	r3, [pc, #52]	@ (8001048 <HAL_RCC_OscConfig+0x26c>)
 8001014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800101e:	2001      	movs	r0, #1
 8001020:	f000 face 	bl	80015c0 <RCC_Delay>
 8001024:	e01c      	b.n	8001060 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_RCC_OscConfig+0x274>)
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800102c:	f7ff fc4c 	bl	80008c8 <HAL_GetTick>
 8001030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001032:	e00f      	b.n	8001054 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001034:	f7ff fc48 	bl	80008c8 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d908      	bls.n	8001054 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e146      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000
 800104c:	42420000 	.word	0x42420000
 8001050:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001054:	4b92      	ldr	r3, [pc, #584]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1e9      	bne.n	8001034 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80a6 	beq.w	80011ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800106e:	2300      	movs	r3, #0
 8001070:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001072:	4b8b      	ldr	r3, [pc, #556]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001074:	69db      	ldr	r3, [r3, #28]
 8001076:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d10d      	bne.n	800109a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	4b88      	ldr	r3, [pc, #544]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a87      	ldr	r2, [pc, #540]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]
 800108a:	4b85      	ldr	r3, [pc, #532]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001092:	60bb      	str	r3, [r7, #8]
 8001094:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001096:	2301      	movs	r3, #1
 8001098:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109a:	4b82      	ldr	r3, [pc, #520]	@ (80012a4 <HAL_RCC_OscConfig+0x4c8>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d118      	bne.n	80010d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010a6:	4b7f      	ldr	r3, [pc, #508]	@ (80012a4 <HAL_RCC_OscConfig+0x4c8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	4a7e      	ldr	r2, [pc, #504]	@ (80012a4 <HAL_RCC_OscConfig+0x4c8>)
 80010ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010b2:	f7ff fc09 	bl	80008c8 <HAL_GetTick>
 80010b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b8:	e008      	b.n	80010cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010ba:	f7ff fc05 	bl	80008c8 <HAL_GetTick>
 80010be:	4602      	mov	r2, r0
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	2b64      	cmp	r3, #100	@ 0x64
 80010c6:	d901      	bls.n	80010cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80010c8:	2303      	movs	r3, #3
 80010ca:	e103      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010cc:	4b75      	ldr	r3, [pc, #468]	@ (80012a4 <HAL_RCC_OscConfig+0x4c8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d0f0      	beq.n	80010ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d106      	bne.n	80010ee <HAL_RCC_OscConfig+0x312>
 80010e0:	4b6f      	ldr	r3, [pc, #444]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	6a1b      	ldr	r3, [r3, #32]
 80010e4:	4a6e      	ldr	r2, [pc, #440]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	f043 0301 	orr.w	r3, r3, #1
 80010ea:	6213      	str	r3, [r2, #32]
 80010ec:	e02d      	b.n	800114a <HAL_RCC_OscConfig+0x36e>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10c      	bne.n	8001110 <HAL_RCC_OscConfig+0x334>
 80010f6:	4b6a      	ldr	r3, [pc, #424]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	6a1b      	ldr	r3, [r3, #32]
 80010fa:	4a69      	ldr	r2, [pc, #420]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80010fc:	f023 0301 	bic.w	r3, r3, #1
 8001100:	6213      	str	r3, [r2, #32]
 8001102:	4b67      	ldr	r3, [pc, #412]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	6a1b      	ldr	r3, [r3, #32]
 8001106:	4a66      	ldr	r2, [pc, #408]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001108:	f023 0304 	bic.w	r3, r3, #4
 800110c:	6213      	str	r3, [r2, #32]
 800110e:	e01c      	b.n	800114a <HAL_RCC_OscConfig+0x36e>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	2b05      	cmp	r3, #5
 8001116:	d10c      	bne.n	8001132 <HAL_RCC_OscConfig+0x356>
 8001118:	4b61      	ldr	r3, [pc, #388]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800111a:	6a1b      	ldr	r3, [r3, #32]
 800111c:	4a60      	ldr	r2, [pc, #384]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800111e:	f043 0304 	orr.w	r3, r3, #4
 8001122:	6213      	str	r3, [r2, #32]
 8001124:	4b5e      	ldr	r3, [pc, #376]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001126:	6a1b      	ldr	r3, [r3, #32]
 8001128:	4a5d      	ldr	r2, [pc, #372]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6213      	str	r3, [r2, #32]
 8001130:	e00b      	b.n	800114a <HAL_RCC_OscConfig+0x36e>
 8001132:	4b5b      	ldr	r3, [pc, #364]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001134:	6a1b      	ldr	r3, [r3, #32]
 8001136:	4a5a      	ldr	r2, [pc, #360]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001138:	f023 0301 	bic.w	r3, r3, #1
 800113c:	6213      	str	r3, [r2, #32]
 800113e:	4b58      	ldr	r3, [pc, #352]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001140:	6a1b      	ldr	r3, [r3, #32]
 8001142:	4a57      	ldr	r2, [pc, #348]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001144:	f023 0304 	bic.w	r3, r3, #4
 8001148:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	68db      	ldr	r3, [r3, #12]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d015      	beq.n	800117e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001152:	f7ff fbb9 	bl	80008c8 <HAL_GetTick>
 8001156:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001158:	e00a      	b.n	8001170 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800115a:	f7ff fbb5 	bl	80008c8 <HAL_GetTick>
 800115e:	4602      	mov	r2, r0
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	1ad3      	subs	r3, r2, r3
 8001164:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001168:	4293      	cmp	r3, r2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e0b1      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001170:	4b4b      	ldr	r3, [pc, #300]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001172:	6a1b      	ldr	r3, [r3, #32]
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d0ee      	beq.n	800115a <HAL_RCC_OscConfig+0x37e>
 800117c:	e014      	b.n	80011a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff fba3 	bl	80008c8 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001184:	e00a      	b.n	800119c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001186:	f7ff fb9f 	bl	80008c8 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001194:	4293      	cmp	r3, r2
 8001196:	d901      	bls.n	800119c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001198:	2303      	movs	r3, #3
 800119a:	e09b      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800119c:	4b40      	ldr	r3, [pc, #256]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800119e:	6a1b      	ldr	r3, [r3, #32]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1ee      	bne.n	8001186 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80011a8:	7dfb      	ldrb	r3, [r7, #23]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d105      	bne.n	80011ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80011ae:	4b3c      	ldr	r3, [pc, #240]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80011b0:	69db      	ldr	r3, [r3, #28]
 80011b2:	4a3b      	ldr	r2, [pc, #236]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80011b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80011b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69db      	ldr	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f000 8087 	beq.w	80012d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80011c4:	4b36      	ldr	r3, [pc, #216]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f003 030c 	and.w	r3, r3, #12
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d061      	beq.n	8001294 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	69db      	ldr	r3, [r3, #28]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d146      	bne.n	8001266 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011d8:	4b33      	ldr	r3, [pc, #204]	@ (80012a8 <HAL_RCC_OscConfig+0x4cc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011de:	f7ff fb73 	bl	80008c8 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011e6:	f7ff fb6f 	bl	80008c8 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e06d      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011f8:	4b29      	ldr	r3, [pc, #164]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1f0      	bne.n	80011e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800120c:	d108      	bne.n	8001220 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800120e:	4b24      	ldr	r3, [pc, #144]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	4921      	ldr	r1, [pc, #132]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001220:	4b1f      	ldr	r3, [pc, #124]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6a19      	ldr	r1, [r3, #32]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001230:	430b      	orrs	r3, r1
 8001232:	491b      	ldr	r1, [pc, #108]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001234:	4313      	orrs	r3, r2
 8001236:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001238:	4b1b      	ldr	r3, [pc, #108]	@ (80012a8 <HAL_RCC_OscConfig+0x4cc>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fb43 	bl	80008c8 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fb3f 	bl	80008c8 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e03d      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001258:	4b11      	ldr	r3, [pc, #68]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d0f0      	beq.n	8001246 <HAL_RCC_OscConfig+0x46a>
 8001264:	e035      	b.n	80012d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001266:	4b10      	ldr	r3, [pc, #64]	@ (80012a8 <HAL_RCC_OscConfig+0x4cc>)
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800126c:	f7ff fb2c 	bl	80008c8 <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001274:	f7ff fb28 	bl	80008c8 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b02      	cmp	r3, #2
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e026      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001286:	4b06      	ldr	r3, [pc, #24]	@ (80012a0 <HAL_RCC_OscConfig+0x4c4>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x498>
 8001292:	e01e      	b.n	80012d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	69db      	ldr	r3, [r3, #28]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d107      	bne.n	80012ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e019      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40007000 	.word	0x40007000
 80012a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_RCC_OscConfig+0x500>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	429a      	cmp	r2, r3
 80012be:	d106      	bne.n	80012ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d001      	beq.n	80012d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80012d2:	2300      	movs	r3, #0
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3718      	adds	r7, #24
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40021000 	.word	0x40021000

080012e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d101      	bne.n	80012f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e0d0      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012f4:	4b6a      	ldr	r3, [pc, #424]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d910      	bls.n	8001324 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b67      	ldr	r3, [pc, #412]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 0207 	bic.w	r2, r3, #7
 800130a:	4965      	ldr	r1, [pc, #404]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001312:	4b63      	ldr	r3, [pc, #396]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d001      	beq.n	8001324 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e0b8      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d020      	beq.n	8001372 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0304 	and.w	r3, r3, #4
 8001338:	2b00      	cmp	r3, #0
 800133a:	d005      	beq.n	8001348 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800133c:	4b59      	ldr	r3, [pc, #356]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	4a58      	ldr	r2, [pc, #352]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001342:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001346:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0308 	and.w	r3, r3, #8
 8001350:	2b00      	cmp	r3, #0
 8001352:	d005      	beq.n	8001360 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001354:	4b53      	ldr	r3, [pc, #332]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	4a52      	ldr	r2, [pc, #328]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800135e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001360:	4b50      	ldr	r3, [pc, #320]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	494d      	ldr	r1, [pc, #308]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800136e:	4313      	orrs	r3, r2
 8001370:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d040      	beq.n	8001400 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d107      	bne.n	8001396 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001386:	4b47      	ldr	r3, [pc, #284]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800138e:	2b00      	cmp	r3, #0
 8001390:	d115      	bne.n	80013be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e07f      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d107      	bne.n	80013ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800139e:	4b41      	ldr	r3, [pc, #260]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e073      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ae:	4b3d      	ldr	r3, [pc, #244]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d101      	bne.n	80013be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e06b      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013be:	4b39      	ldr	r3, [pc, #228]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f023 0203 	bic.w	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	4936      	ldr	r1, [pc, #216]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013cc:	4313      	orrs	r3, r2
 80013ce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013d0:	f7ff fa7a 	bl	80008c8 <HAL_GetTick>
 80013d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013d6:	e00a      	b.n	80013ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013d8:	f7ff fa76 	bl	80008c8 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d901      	bls.n	80013ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e053      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ee:	4b2d      	ldr	r3, [pc, #180]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f003 020c 	and.w	r2, r3, #12
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d1eb      	bne.n	80013d8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001400:	4b27      	ldr	r3, [pc, #156]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0307 	and.w	r3, r3, #7
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	429a      	cmp	r2, r3
 800140c:	d210      	bcs.n	8001430 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800140e:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 0207 	bic.w	r2, r3, #7
 8001416:	4922      	ldr	r1, [pc, #136]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	4313      	orrs	r3, r2
 800141c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800141e:	4b20      	ldr	r3, [pc, #128]	@ (80014a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	429a      	cmp	r2, r3
 800142a:	d001      	beq.n	8001430 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	e032      	b.n	8001496 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	2b00      	cmp	r3, #0
 800143a:	d008      	beq.n	800144e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800143c:	4b19      	ldr	r3, [pc, #100]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	4916      	ldr	r1, [pc, #88]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800144a:	4313      	orrs	r3, r2
 800144c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0308 	and.w	r3, r3, #8
 8001456:	2b00      	cmp	r3, #0
 8001458:	d009      	beq.n	800146e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800145a:	4b12      	ldr	r3, [pc, #72]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	691b      	ldr	r3, [r3, #16]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	490e      	ldr	r1, [pc, #56]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 800146a:	4313      	orrs	r3, r2
 800146c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800146e:	f000 f821 	bl	80014b4 <HAL_RCC_GetSysClockFreq>
 8001472:	4602      	mov	r2, r0
 8001474:	4b0b      	ldr	r3, [pc, #44]	@ (80014a4 <HAL_RCC_ClockConfig+0x1c4>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	091b      	lsrs	r3, r3, #4
 800147a:	f003 030f 	and.w	r3, r3, #15
 800147e:	490a      	ldr	r1, [pc, #40]	@ (80014a8 <HAL_RCC_ClockConfig+0x1c8>)
 8001480:	5ccb      	ldrb	r3, [r1, r3]
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	4a09      	ldr	r2, [pc, #36]	@ (80014ac <HAL_RCC_ClockConfig+0x1cc>)
 8001488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800148a:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <HAL_RCC_ClockConfig+0x1d0>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f9d8 	bl	8000844 <HAL_InitTick>

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40022000 	.word	0x40022000
 80014a4:	40021000 	.word	0x40021000
 80014a8:	08004e08 	.word	0x08004e08
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b087      	sub	sp, #28
 80014b8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	2300      	movs	r3, #0
 80014c0:	60bb      	str	r3, [r7, #8]
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	2300      	movs	r3, #0
 80014c8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <HAL_RCC_GetSysClockFreq+0x94>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d002      	beq.n	80014e4 <HAL_RCC_GetSysClockFreq+0x30>
 80014de:	2b08      	cmp	r3, #8
 80014e0:	d003      	beq.n	80014ea <HAL_RCC_GetSysClockFreq+0x36>
 80014e2:	e027      	b.n	8001534 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014e4:	4b19      	ldr	r3, [pc, #100]	@ (800154c <HAL_RCC_GetSysClockFreq+0x98>)
 80014e6:	613b      	str	r3, [r7, #16]
      break;
 80014e8:	e027      	b.n	800153a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	0c9b      	lsrs	r3, r3, #18
 80014ee:	f003 030f 	and.w	r3, r3, #15
 80014f2:	4a17      	ldr	r2, [pc, #92]	@ (8001550 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014f4:	5cd3      	ldrb	r3, [r2, r3]
 80014f6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d010      	beq.n	8001524 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001502:	4b11      	ldr	r3, [pc, #68]	@ (8001548 <HAL_RCC_GetSysClockFreq+0x94>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	0c5b      	lsrs	r3, r3, #17
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	4a11      	ldr	r2, [pc, #68]	@ (8001554 <HAL_RCC_GetSysClockFreq+0xa0>)
 800150e:	5cd3      	ldrb	r3, [r2, r3]
 8001510:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <HAL_RCC_GetSysClockFreq+0x98>)
 8001516:	fb03 f202 	mul.w	r2, r3, r2
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	e004      	b.n	800152e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a0c      	ldr	r2, [pc, #48]	@ (8001558 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001528:	fb02 f303 	mul.w	r3, r2, r3
 800152c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	613b      	str	r3, [r7, #16]
      break;
 8001532:	e002      	b.n	800153a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001534:	4b05      	ldr	r3, [pc, #20]	@ (800154c <HAL_RCC_GetSysClockFreq+0x98>)
 8001536:	613b      	str	r3, [r7, #16]
      break;
 8001538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800153a:	693b      	ldr	r3, [r7, #16]
}
 800153c:	4618      	mov	r0, r3
 800153e:	371c      	adds	r7, #28
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40021000 	.word	0x40021000
 800154c:	007a1200 	.word	0x007a1200
 8001550:	08004e20 	.word	0x08004e20
 8001554:	08004e30 	.word	0x08004e30
 8001558:	003d0900 	.word	0x003d0900

0800155c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001560:	4b02      	ldr	r3, [pc, #8]	@ (800156c <HAL_RCC_GetHCLKFreq+0x10>)
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	46bd      	mov	sp, r7
 8001568:	bc80      	pop	{r7}
 800156a:	4770      	bx	lr
 800156c:	20000000 	.word	0x20000000

08001570 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001574:	f7ff fff2 	bl	800155c <HAL_RCC_GetHCLKFreq>
 8001578:	4602      	mov	r2, r0
 800157a:	4b05      	ldr	r3, [pc, #20]	@ (8001590 <HAL_RCC_GetPCLK1Freq+0x20>)
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	f003 0307 	and.w	r3, r3, #7
 8001584:	4903      	ldr	r1, [pc, #12]	@ (8001594 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001586:	5ccb      	ldrb	r3, [r1, r3]
 8001588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800158c:	4618      	mov	r0, r3
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000
 8001594:	08004e18 	.word	0x08004e18

08001598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800159c:	f7ff ffde 	bl	800155c <HAL_RCC_GetHCLKFreq>
 80015a0:	4602      	mov	r2, r0
 80015a2:	4b05      	ldr	r3, [pc, #20]	@ (80015b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	0adb      	lsrs	r3, r3, #11
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	4903      	ldr	r1, [pc, #12]	@ (80015bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80015ae:	5ccb      	ldrb	r3, [r1, r3]
 80015b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08004e18 	.word	0x08004e18

080015c0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80015c8:	4b0a      	ldr	r3, [pc, #40]	@ (80015f4 <RCC_Delay+0x34>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0a      	ldr	r2, [pc, #40]	@ (80015f8 <RCC_Delay+0x38>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0a5b      	lsrs	r3, r3, #9
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	fb02 f303 	mul.w	r3, r2, r3
 80015da:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80015dc:	bf00      	nop
  }
  while (Delay --);
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1e5a      	subs	r2, r3, #1
 80015e2:	60fa      	str	r2, [r7, #12]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1f9      	bne.n	80015dc <RCC_Delay+0x1c>
}
 80015e8:	bf00      	nop
 80015ea:	bf00      	nop
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	20000000 	.word	0x20000000
 80015f8:	10624dd3 	.word	0x10624dd3

080015fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e076      	b.n	80016fc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001612:	2b00      	cmp	r3, #0
 8001614:	d108      	bne.n	8001628 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800161e:	d009      	beq.n	8001634 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
 8001626:	e005      	b.n	8001634 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2200      	movs	r2, #0
 800162c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001640:	b2db      	uxtb	r3, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	d106      	bne.n	8001654 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 f858 	bl	8001704 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2202      	movs	r2, #2
 8001658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800166a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800167c:	431a      	orrs	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001686:	431a      	orrs	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	691b      	ldr	r3, [r3, #16]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	431a      	orrs	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	695b      	ldr	r3, [r3, #20]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	431a      	orrs	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016a4:	431a      	orrs	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a1b      	ldr	r3, [r3, #32]
 80016b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016b8:	ea42 0103 	orr.w	r1, r2, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016c0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	430a      	orrs	r2, r1
 80016ca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	0c1a      	lsrs	r2, r3, #16
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f002 0204 	and.w	r2, r2, #4
 80016da:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	69da      	ldr	r2, [r3, #28]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2200      	movs	r2, #0
 80016f0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2201      	movs	r2, #1
 80016f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}

08001704 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e042      	b.n	80017ae <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800172e:	b2db      	uxtb	r3, r3
 8001730:	2b00      	cmp	r3, #0
 8001732:	d106      	bne.n	8001742 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f83a 	bl	80017b6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2224      	movs	r2, #36	@ 0x24
 8001746:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	68da      	ldr	r2, [r3, #12]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001758:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f9b8 	bl	8001ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691a      	ldr	r2, [r3, #16]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800176e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	695a      	ldr	r2, [r3, #20]
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800177e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68da      	ldr	r2, [r3, #12]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800178e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2220      	movs	r2, #32
 80017a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	2200      	movs	r2, #0
 80017aa:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80017b6:	b480      	push	{r7}
 80017b8:	b083      	sub	sp, #12
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bc80      	pop	{r7}
 80017c6:	4770      	bx	lr

080017c8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	@ 0x28
 80017cc:	af02      	add	r7, sp, #8
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	4613      	mov	r3, r2
 80017d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	2b20      	cmp	r3, #32
 80017e6:	d16d      	bne.n	80018c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d002      	beq.n	80017f4 <HAL_UART_Transmit+0x2c>
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e066      	b.n	80018c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2200      	movs	r2, #0
 80017fc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2221      	movs	r2, #33	@ 0x21
 8001802:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001806:	f7ff f85f 	bl	80008c8 <HAL_GetTick>
 800180a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	88fa      	ldrh	r2, [r7, #6]
 8001810:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	88fa      	ldrh	r2, [r7, #6]
 8001816:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001820:	d108      	bne.n	8001834 <HAL_UART_Transmit+0x6c>
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d104      	bne.n	8001834 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	61bb      	str	r3, [r7, #24]
 8001832:	e003      	b.n	800183c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800183c:	e02a      	b.n	8001894 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	2200      	movs	r2, #0
 8001846:	2180      	movs	r1, #128	@ 0x80
 8001848:	68f8      	ldr	r0, [r7, #12]
 800184a:	f000 f8d2 	bl	80019f2 <UART_WaitOnFlagUntilTimeout>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e036      	b.n	80018c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d10b      	bne.n	8001876 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	881b      	ldrh	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800186c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	3302      	adds	r3, #2
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	e007      	b.n	8001886 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	781a      	ldrb	r2, [r3, #0]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	3301      	adds	r3, #1
 8001884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800188a:	b29b      	uxth	r3, r3
 800188c:	3b01      	subs	r3, #1
 800188e:	b29a      	uxth	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001898:	b29b      	uxth	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1cf      	bne.n	800183e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2200      	movs	r2, #0
 80018a6:	2140      	movs	r1, #64	@ 0x40
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f000 f8a2 	bl	80019f2 <UART_WaitOnFlagUntilTimeout>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e006      	b.n	80018c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2220      	movs	r2, #32
 80018bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	e000      	b.n	80018c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80018c4:	2302      	movs	r3, #2
  }
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3720      	adds	r7, #32
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b08a      	sub	sp, #40	@ 0x28
 80018d2:	af02      	add	r7, sp, #8
 80018d4:	60f8      	str	r0, [r7, #12]
 80018d6:	60b9      	str	r1, [r7, #8]
 80018d8:	603b      	str	r3, [r7, #0]
 80018da:	4613      	mov	r3, r2
 80018dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018de:	2300      	movs	r3, #0
 80018e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b20      	cmp	r3, #32
 80018ec:	d17c      	bne.n	80019e8 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_UART_Receive+0x2c>
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e075      	b.n	80019ea <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2222      	movs	r2, #34	@ 0x22
 8001908:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2200      	movs	r2, #0
 8001910:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001912:	f7fe ffd9 	bl	80008c8 <HAL_GetTick>
 8001916:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	88fa      	ldrh	r2, [r7, #6]
 800191c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	88fa      	ldrh	r2, [r7, #6]
 8001922:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800192c:	d108      	bne.n	8001940 <HAL_UART_Receive+0x72>
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d104      	bne.n	8001940 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	61bb      	str	r3, [r7, #24]
 800193e:	e003      	b.n	8001948 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001944:	2300      	movs	r3, #0
 8001946:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001948:	e043      	b.n	80019d2 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	9300      	str	r3, [sp, #0]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	2200      	movs	r2, #0
 8001952:	2120      	movs	r1, #32
 8001954:	68f8      	ldr	r0, [r7, #12]
 8001956:	f000 f84c 	bl	80019f2 <UART_WaitOnFlagUntilTimeout>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e042      	b.n	80019ea <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10c      	bne.n	8001984 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	b29b      	uxth	r3, r3
 8001972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001976:	b29a      	uxth	r2, r3
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	3302      	adds	r3, #2
 8001980:	61bb      	str	r3, [r7, #24]
 8001982:	e01f      	b.n	80019c4 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800198c:	d007      	beq.n	800199e <HAL_UART_Receive+0xd0>
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d10a      	bne.n	80019ac <HAL_UART_Receive+0xde>
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	691b      	ldr	r3, [r3, #16]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d106      	bne.n	80019ac <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	701a      	strb	r2, [r3, #0]
 80019aa:	e008      	b.n	80019be <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80019b8:	b2da      	uxtb	r2, r3
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	3301      	adds	r3, #1
 80019c2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	3b01      	subs	r3, #1
 80019cc:	b29a      	uxth	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1b6      	bne.n	800194a <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	2220      	movs	r2, #32
 80019e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	e000      	b.n	80019ea <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80019e8:	2302      	movs	r3, #2
  }
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3720      	adds	r7, #32
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}

080019f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b090      	sub	sp, #64	@ 0x40
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a02:	e050      	b.n	8001aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a0a:	d04c      	beq.n	8001aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d007      	beq.n	8001a22 <UART_WaitOnFlagUntilTimeout+0x30>
 8001a12:	f7fe ff59 	bl	80008c8 <HAL_GetTick>
 8001a16:	4602      	mov	r2, r0
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d241      	bcs.n	8001aa6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	330c      	adds	r3, #12
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a2c:	e853 3f00 	ldrex	r3, [r3]
 8001a30:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a34:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001a38:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	330c      	adds	r3, #12
 8001a40:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001a42:	637a      	str	r2, [r7, #52]	@ 0x34
 8001a44:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a46:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001a48:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a4a:	e841 2300 	strex	r3, r2, [r1]
 8001a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8001a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1e5      	bne.n	8001a22 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	3314      	adds	r3, #20
 8001a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	e853 3f00 	ldrex	r3, [r3]
 8001a64:	613b      	str	r3, [r7, #16]
   return(result);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	3314      	adds	r3, #20
 8001a74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001a76:	623a      	str	r2, [r7, #32]
 8001a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001a7a:	69f9      	ldr	r1, [r7, #28]
 8001a7c:	6a3a      	ldr	r2, [r7, #32]
 8001a7e:	e841 2300 	strex	r3, r2, [r1]
 8001a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8001a84:	69bb      	ldr	r3, [r7, #24]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1e5      	bne.n	8001a56 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	2220      	movs	r2, #32
 8001a8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2220      	movs	r2, #32
 8001a96:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e00f      	b.n	8001ac6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	68ba      	ldr	r2, [r7, #8]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	bf0c      	ite	eq
 8001ab6:	2301      	moveq	r3, #1
 8001ab8:	2300      	movne	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	461a      	mov	r2, r3
 8001abe:	79fb      	ldrb	r3, [r7, #7]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d09f      	beq.n	8001a04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3740      	adds	r7, #64	@ 0x40
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68da      	ldr	r2, [r3, #12]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	430a      	orrs	r2, r1
 8001aec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	689a      	ldr	r2, [r3, #8]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	431a      	orrs	r2, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001b0a:	f023 030c 	bic.w	r3, r3, #12
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699a      	ldr	r2, [r3, #24]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a2c      	ldr	r2, [pc, #176]	@ (8001be4 <UART_SetConfig+0x114>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d103      	bne.n	8001b40 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001b38:	f7ff fd2e 	bl	8001598 <HAL_RCC_GetPCLK2Freq>
 8001b3c:	60f8      	str	r0, [r7, #12]
 8001b3e:	e002      	b.n	8001b46 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001b40:	f7ff fd16 	bl	8001570 <HAL_RCC_GetPCLK1Freq>
 8001b44:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	009a      	lsls	r2, r3, #2
 8001b50:	441a      	add	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5c:	4a22      	ldr	r2, [pc, #136]	@ (8001be8 <UART_SetConfig+0x118>)
 8001b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	0119      	lsls	r1, r3, #4
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	009b      	lsls	r3, r3, #2
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009a      	lsls	r2, r3, #2
 8001b70:	441a      	add	r2, r3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001be8 <UART_SetConfig+0x118>)
 8001b7e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b82:	095b      	lsrs	r3, r3, #5
 8001b84:	2064      	movs	r0, #100	@ 0x64
 8001b86:	fb00 f303 	mul.w	r3, r0, r3
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	011b      	lsls	r3, r3, #4
 8001b8e:	3332      	adds	r3, #50	@ 0x32
 8001b90:	4a15      	ldr	r2, [pc, #84]	@ (8001be8 <UART_SetConfig+0x118>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	095b      	lsrs	r3, r3, #5
 8001b98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001b9c:	4419      	add	r1, r3
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009a      	lsls	r2, r3, #2
 8001ba8:	441a      	add	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001be8 <UART_SetConfig+0x118>)
 8001bb6:	fba3 0302 	umull	r0, r3, r3, r2
 8001bba:	095b      	lsrs	r3, r3, #5
 8001bbc:	2064      	movs	r0, #100	@ 0x64
 8001bbe:	fb00 f303 	mul.w	r3, r0, r3
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	3332      	adds	r3, #50	@ 0x32
 8001bc8:	4a07      	ldr	r2, [pc, #28]	@ (8001be8 <UART_SetConfig+0x118>)
 8001bca:	fba2 2303 	umull	r2, r3, r2, r3
 8001bce:	095b      	lsrs	r3, r3, #5
 8001bd0:	f003 020f 	and.w	r2, r3, #15
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	440a      	add	r2, r1
 8001bda:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	40013800 	.word	0x40013800
 8001be8:	51eb851f 	.word	0x51eb851f

08001bec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f103 0208 	add.w	r2, r3, #8
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295
 8001c04:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f103 0208 	add.w	r2, r3, #8
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	f103 0208 	add.w	r2, r3, #8
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bc80      	pop	{r7}
 8001c28:	4770      	bx	lr

08001c2a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c42:	b480      	push	{r7}
 8001c44:	b085      	sub	sp, #20
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
 8001c4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	683a      	ldr	r2, [r7, #0]
 8001c66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	601a      	str	r2, [r3, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr

08001c88 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c9e:	d103      	bne.n	8001ca8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	60fb      	str	r3, [r7, #12]
 8001ca6:	e00c      	b.n	8001cc2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3308      	adds	r3, #8
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	e002      	b.n	8001cb6 <vListInsert+0x2e>
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d2f6      	bcs.n	8001cb0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	601a      	str	r2, [r3, #0]
}
 8001cee:	bf00      	nop
 8001cf0:	3714      	adds	r7, #20
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr

08001cf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	691b      	ldr	r3, [r3, #16]
 8001d04:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6892      	ldr	r2, [r2, #8]
 8001d0e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6852      	ldr	r2, [r2, #4]
 8001d18:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d103      	bne.n	8001d2c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	1e5a      	subs	r2, r3, #1
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr

08001d4a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b08e      	sub	sp, #56	@ 0x38
 8001d4e:	af04      	add	r7, sp, #16
 8001d50:	60f8      	str	r0, [r7, #12]
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001d58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d10b      	bne.n	8001d76 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d62:	f383 8811 	msr	BASEPRI, r3
 8001d66:	f3bf 8f6f 	isb	sy
 8001d6a:	f3bf 8f4f 	dsb	sy
 8001d6e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d70:	bf00      	nop
 8001d72:	bf00      	nop
 8001d74:	e7fd      	b.n	8001d72 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001d76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d10b      	bne.n	8001d94 <xTaskCreateStatic+0x4a>
	__asm volatile
 8001d7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d80:	f383 8811 	msr	BASEPRI, r3
 8001d84:	f3bf 8f6f 	isb	sy
 8001d88:	f3bf 8f4f 	dsb	sy
 8001d8c:	61fb      	str	r3, [r7, #28]
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	e7fd      	b.n	8001d90 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001d94:	2354      	movs	r3, #84	@ 0x54
 8001d96:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b54      	cmp	r3, #84	@ 0x54
 8001d9c:	d00b      	beq.n	8001db6 <xTaskCreateStatic+0x6c>
	__asm volatile
 8001d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001da2:	f383 8811 	msr	BASEPRI, r3
 8001da6:	f3bf 8f6f 	isb	sy
 8001daa:	f3bf 8f4f 	dsb	sy
 8001dae:	61bb      	str	r3, [r7, #24]
}
 8001db0:	bf00      	nop
 8001db2:	bf00      	nop
 8001db4:	e7fd      	b.n	8001db2 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d01e      	beq.n	8001dfa <xTaskCreateStatic+0xb0>
 8001dbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d01b      	beq.n	8001dfa <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dc4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001dca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	9303      	str	r3, [sp, #12]
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dda:	9302      	str	r3, [sp, #8]
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	68b9      	ldr	r1, [r7, #8]
 8001dec:	68f8      	ldr	r0, [r7, #12]
 8001dee:	f000 f850 	bl	8001e92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001df2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001df4:	f000 f8ce 	bl	8001f94 <prvAddNewTaskToReadyList>
 8001df8:	e001      	b.n	8001dfe <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001dfe:	697b      	ldr	r3, [r7, #20]
	}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3728      	adds	r7, #40	@ 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08c      	sub	sp, #48	@ 0x30
 8001e0c:	af04      	add	r7, sp, #16
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	4613      	mov	r3, r2
 8001e16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e18:	88fb      	ldrh	r3, [r7, #6]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 ffff 	bl	8002e20 <pvPortMalloc>
 8001e22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00e      	beq.n	8001e48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001e2a:	2054      	movs	r0, #84	@ 0x54
 8001e2c:	f000 fff8 	bl	8002e20 <pvPortMalloc>
 8001e30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	697a      	ldr	r2, [r7, #20]
 8001e3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e3e:	e005      	b.n	8001e4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001e40:	6978      	ldr	r0, [r7, #20]
 8001e42:	f001 f8b5 	bl	8002fb0 <vPortFree>
 8001e46:	e001      	b.n	8001e4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d017      	beq.n	8001e82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	2200      	movs	r2, #0
 8001e56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001e5a:	88fa      	ldrh	r2, [r7, #6]
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	9303      	str	r3, [sp, #12]
 8001e60:	69fb      	ldr	r3, [r7, #28]
 8001e62:	9302      	str	r3, [sp, #8]
 8001e64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e66:	9301      	str	r3, [sp, #4]
 8001e68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68b9      	ldr	r1, [r7, #8]
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f80e 	bl	8001e92 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e76:	69f8      	ldr	r0, [r7, #28]
 8001e78:	f000 f88c 	bl	8001f94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
 8001e80:	e002      	b.n	8001e88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001e88:	69bb      	ldr	r3, [r7, #24]
	}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3720      	adds	r7, #32
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b088      	sub	sp, #32
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	f023 0307 	bic.w	r3, r3, #7
 8001eb8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00b      	beq.n	8001edc <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ec8:	f383 8811 	msr	BASEPRI, r3
 8001ecc:	f3bf 8f6f 	isb	sy
 8001ed0:	f3bf 8f4f 	dsb	sy
 8001ed4:	617b      	str	r3, [r7, #20]
}
 8001ed6:	bf00      	nop
 8001ed8:	bf00      	nop
 8001eda:	e7fd      	b.n	8001ed8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001edc:	2300      	movs	r3, #0
 8001ede:	61fb      	str	r3, [r7, #28]
 8001ee0:	e012      	b.n	8001f08 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	7819      	ldrb	r1, [r3, #0]
 8001eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	4413      	add	r3, r2
 8001ef0:	3334      	adds	r3, #52	@ 0x34
 8001ef2:	460a      	mov	r2, r1
 8001ef4:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001ef6:	68ba      	ldr	r2, [r7, #8]
 8001ef8:	69fb      	ldr	r3, [r7, #28]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d006      	beq.n	8001f10 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3301      	adds	r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	d9e9      	bls.n	8001ee2 <prvInitialiseNewTask+0x50>
 8001f0e:	e000      	b.n	8001f12 <prvInitialiseNewTask+0x80>
		{
			break;
 8001f10:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f14:	2200      	movs	r2, #0
 8001f16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f1c:	2b06      	cmp	r3, #6
 8001f1e:	d901      	bls.n	8001f24 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f20:	2306      	movs	r3, #6
 8001f22:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f28:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f2e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f32:	2200      	movs	r2, #0
 8001f34:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f38:	3304      	adds	r3, #4
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fe75 	bl	8001c2a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f42:	3318      	adds	r3, #24
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff fe70 	bl	8001c2a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f4e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f52:	f1c3 0207 	rsb	r2, r3, #7
 8001f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f58:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f5e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001f60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f62:	2200      	movs	r2, #0
 8001f64:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001f6e:	683a      	ldr	r2, [r7, #0]
 8001f70:	68f9      	ldr	r1, [r7, #12]
 8001f72:	69b8      	ldr	r0, [r7, #24]
 8001f74:	f000 fd5a 	bl	8002a2c <pxPortInitialiseStack>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f7c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d002      	beq.n	8001f8a <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001f84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f86:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f8a:	bf00      	nop
 8001f8c:	3720      	adds	r7, #32
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001f94:	b5b0      	push	{r4, r5, r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af02      	add	r7, sp, #8
 8001f9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001f9c:	f000 fe36 	bl	8002c0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001fa0:	4b39      	ldr	r3, [pc, #228]	@ (8002088 <prvAddNewTaskToReadyList+0xf4>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	4a38      	ldr	r2, [pc, #224]	@ (8002088 <prvAddNewTaskToReadyList+0xf4>)
 8001fa8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001faa:	4b38      	ldr	r3, [pc, #224]	@ (800208c <prvAddNewTaskToReadyList+0xf8>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001fb2:	4a36      	ldr	r2, [pc, #216]	@ (800208c <prvAddNewTaskToReadyList+0xf8>)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001fb8:	4b33      	ldr	r3, [pc, #204]	@ (8002088 <prvAddNewTaskToReadyList+0xf4>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d110      	bne.n	8001fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001fc0:	f000 fad8 	bl	8002574 <prvInitialiseTaskLists>
 8001fc4:	e00d      	b.n	8001fe2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001fc6:	4b32      	ldr	r3, [pc, #200]	@ (8002090 <prvAddNewTaskToReadyList+0xfc>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d109      	bne.n	8001fe2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001fce:	4b2f      	ldr	r3, [pc, #188]	@ (800208c <prvAddNewTaskToReadyList+0xf8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d802      	bhi.n	8001fe2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001fdc:	4a2b      	ldr	r2, [pc, #172]	@ (800208c <prvAddNewTaskToReadyList+0xf8>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8002094 <prvAddNewTaskToReadyList+0x100>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8002094 <prvAddNewTaskToReadyList+0x100>)
 8001fea:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d016      	beq.n	8002020 <prvAddNewTaskToReadyList+0x8c>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f002 fbcf 	bl	8004798 <SEGGER_SYSVIEW_OnTaskCreate>
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800200a:	461d      	mov	r5, r3
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	461c      	mov	r4, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002016:	1ae3      	subs	r3, r4, r3
 8002018:	9300      	str	r3, [sp, #0]
 800201a:	462b      	mov	r3, r5
 800201c:	f001 f98e 	bl	800333c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	4618      	mov	r0, r3
 8002024:	f002 fc3c 	bl	80048a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202c:	2201      	movs	r2, #1
 800202e:	409a      	lsls	r2, r3
 8002030:	4b19      	ldr	r3, [pc, #100]	@ (8002098 <prvAddNewTaskToReadyList+0x104>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4313      	orrs	r3, r2
 8002036:	4a18      	ldr	r2, [pc, #96]	@ (8002098 <prvAddNewTaskToReadyList+0x104>)
 8002038:	6013      	str	r3, [r2, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800203e:	4613      	mov	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	4a15      	ldr	r2, [pc, #84]	@ (800209c <prvAddNewTaskToReadyList+0x108>)
 8002048:	441a      	add	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	3304      	adds	r3, #4
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f7ff fdf6 	bl	8001c42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002056:	f000 fe09 	bl	8002c6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800205a:	4b0d      	ldr	r3, [pc, #52]	@ (8002090 <prvAddNewTaskToReadyList+0xfc>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00e      	beq.n	8002080 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <prvAddNewTaskToReadyList+0xf8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206c:	429a      	cmp	r2, r3
 800206e:	d207      	bcs.n	8002080 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <prvAddNewTaskToReadyList+0x10c>)
 8002072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002076:	601a      	str	r2, [r3, #0]
 8002078:	f3bf 8f4f 	dsb	sy
 800207c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002080:	bf00      	nop
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bdb0      	pop	{r4, r5, r7, pc}
 8002088:	20000488 	.word	0x20000488
 800208c:	20000388 	.word	0x20000388
 8002090:	20000494 	.word	0x20000494
 8002094:	200004a4 	.word	0x200004a4
 8002098:	20000490 	.word	0x20000490
 800209c:	2000038c 	.word	0x2000038c
 80020a0:	e000ed04 	.word	0xe000ed04

080020a4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b08a      	sub	sp, #40	@ 0x28
 80020a8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80020b2:	463a      	mov	r2, r7
 80020b4:	1d39      	adds	r1, r7, #4
 80020b6:	f107 0308 	add.w	r3, r7, #8
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe f848 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80020c0:	6839      	ldr	r1, [r7, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	9202      	str	r2, [sp, #8]
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	2300      	movs	r3, #0
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2300      	movs	r3, #0
 80020d0:	460a      	mov	r2, r1
 80020d2:	491f      	ldr	r1, [pc, #124]	@ (8002150 <vTaskStartScheduler+0xac>)
 80020d4:	481f      	ldr	r0, [pc, #124]	@ (8002154 <vTaskStartScheduler+0xb0>)
 80020d6:	f7ff fe38 	bl	8001d4a <xTaskCreateStatic>
 80020da:	4603      	mov	r3, r0
 80020dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002158 <vTaskStartScheduler+0xb4>)
 80020de:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80020e0:	4b1d      	ldr	r3, [pc, #116]	@ (8002158 <vTaskStartScheduler+0xb4>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80020e8:	2301      	movs	r3, #1
 80020ea:	617b      	str	r3, [r7, #20]
 80020ec:	e001      	b.n	80020f2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d116      	bne.n	8002126 <vTaskStartScheduler+0x82>
	__asm volatile
 80020f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020fc:	f383 8811 	msr	BASEPRI, r3
 8002100:	f3bf 8f6f 	isb	sy
 8002104:	f3bf 8f4f 	dsb	sy
 8002108:	613b      	str	r3, [r7, #16]
}
 800210a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800210c:	4b13      	ldr	r3, [pc, #76]	@ (800215c <vTaskStartScheduler+0xb8>)
 800210e:	f04f 32ff 	mov.w	r2, #4294967295
 8002112:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002114:	4b12      	ldr	r3, [pc, #72]	@ (8002160 <vTaskStartScheduler+0xbc>)
 8002116:	2201      	movs	r2, #1
 8002118:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800211a:	4b12      	ldr	r3, [pc, #72]	@ (8002164 <vTaskStartScheduler+0xc0>)
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002120:	f000 fd02 	bl	8002b28 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002124:	e00f      	b.n	8002146 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800212c:	d10b      	bne.n	8002146 <vTaskStartScheduler+0xa2>
	__asm volatile
 800212e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002132:	f383 8811 	msr	BASEPRI, r3
 8002136:	f3bf 8f6f 	isb	sy
 800213a:	f3bf 8f4f 	dsb	sy
 800213e:	60fb      	str	r3, [r7, #12]
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	e7fd      	b.n	8002142 <vTaskStartScheduler+0x9e>
}
 8002146:	bf00      	nop
 8002148:	3718      	adds	r7, #24
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	08004d44 	.word	0x08004d44
 8002154:	08002545 	.word	0x08002545
 8002158:	200004ac 	.word	0x200004ac
 800215c:	200004a8 	.word	0x200004a8
 8002160:	20000494 	.word	0x20000494
 8002164:	2000048c 	.word	0x2000048c

08002168 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800216c:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <vTaskSuspendAll+0x18>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	3301      	adds	r3, #1
 8002172:	4a03      	ldr	r2, [pc, #12]	@ (8002180 <vTaskSuspendAll+0x18>)
 8002174:	6013      	str	r3, [r2, #0]
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	bc80      	pop	{r7}
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	200004b0 	.word	0x200004b0

08002184 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800218e:	2300      	movs	r3, #0
 8002190:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002192:	4b44      	ldr	r3, [pc, #272]	@ (80022a4 <xTaskResumeAll+0x120>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10b      	bne.n	80021b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800219a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800219e:	f383 8811 	msr	BASEPRI, r3
 80021a2:	f3bf 8f6f 	isb	sy
 80021a6:	f3bf 8f4f 	dsb	sy
 80021aa:	603b      	str	r3, [r7, #0]
}
 80021ac:	bf00      	nop
 80021ae:	bf00      	nop
 80021b0:	e7fd      	b.n	80021ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80021b2:	f000 fd2b 	bl	8002c0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80021b6:	4b3b      	ldr	r3, [pc, #236]	@ (80022a4 <xTaskResumeAll+0x120>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	4a39      	ldr	r2, [pc, #228]	@ (80022a4 <xTaskResumeAll+0x120>)
 80021be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021c0:	4b38      	ldr	r3, [pc, #224]	@ (80022a4 <xTaskResumeAll+0x120>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d165      	bne.n	8002294 <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80021c8:	4b37      	ldr	r3, [pc, #220]	@ (80022a8 <xTaskResumeAll+0x124>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d061      	beq.n	8002294 <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021d0:	e032      	b.n	8002238 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80021d2:	4b36      	ldr	r3, [pc, #216]	@ (80022ac <xTaskResumeAll+0x128>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	3318      	adds	r3, #24
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff fd8a 	bl	8001cf8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	3304      	adds	r3, #4
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fd85 	bl	8001cf8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f002 fb55 	bl	80048a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fa:	2201      	movs	r2, #1
 80021fc:	409a      	lsls	r2, r3
 80021fe:	4b2c      	ldr	r3, [pc, #176]	@ (80022b0 <xTaskResumeAll+0x12c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4313      	orrs	r3, r2
 8002204:	4a2a      	ldr	r2, [pc, #168]	@ (80022b0 <xTaskResumeAll+0x12c>)
 8002206:	6013      	str	r3, [r2, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4a27      	ldr	r2, [pc, #156]	@ (80022b4 <xTaskResumeAll+0x130>)
 8002216:	441a      	add	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	3304      	adds	r3, #4
 800221c:	4619      	mov	r1, r3
 800221e:	4610      	mov	r0, r2
 8002220:	f7ff fd0f 	bl	8001c42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002228:	4b23      	ldr	r3, [pc, #140]	@ (80022b8 <xTaskResumeAll+0x134>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800222e:	429a      	cmp	r2, r3
 8002230:	d302      	bcc.n	8002238 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 8002232:	4b22      	ldr	r3, [pc, #136]	@ (80022bc <xTaskResumeAll+0x138>)
 8002234:	2201      	movs	r2, #1
 8002236:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002238:	4b1c      	ldr	r3, [pc, #112]	@ (80022ac <xTaskResumeAll+0x128>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1c8      	bne.n	80021d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002246:	f000 fa33 	bl	80026b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800224a:	4b1d      	ldr	r3, [pc, #116]	@ (80022c0 <xTaskResumeAll+0x13c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d010      	beq.n	8002278 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002256:	f000 f849 	bl	80022ec <xTaskIncrementTick>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d002      	beq.n	8002266 <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8002260:	4b16      	ldr	r3, [pc, #88]	@ (80022bc <xTaskResumeAll+0x138>)
 8002262:	2201      	movs	r2, #1
 8002264:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3b01      	subs	r3, #1
 800226a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f1      	bne.n	8002256 <xTaskResumeAll+0xd2>

						uxPendedTicks = 0;
 8002272:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <xTaskResumeAll+0x13c>)
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002278:	4b10      	ldr	r3, [pc, #64]	@ (80022bc <xTaskResumeAll+0x138>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d009      	beq.n	8002294 <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002280:	2301      	movs	r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002284:	4b0f      	ldr	r3, [pc, #60]	@ (80022c4 <xTaskResumeAll+0x140>)
 8002286:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	f3bf 8f4f 	dsb	sy
 8002290:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002294:	f000 fcea 	bl	8002c6c <vPortExitCritical>

	return xAlreadyYielded;
 8002298:	68bb      	ldr	r3, [r7, #8]
}
 800229a:	4618      	mov	r0, r3
 800229c:	3710      	adds	r7, #16
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	200004b0 	.word	0x200004b0
 80022a8:	20000488 	.word	0x20000488
 80022ac:	20000448 	.word	0x20000448
 80022b0:	20000490 	.word	0x20000490
 80022b4:	2000038c 	.word	0x2000038c
 80022b8:	20000388 	.word	0x20000388
 80022bc:	2000049c 	.word	0x2000049c
 80022c0:	20000498 	.word	0x20000498
 80022c4:	e000ed04 	.word	0xe000ed04

080022c8 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80022ce:	f000 fd67 	bl	8002da0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80022d2:	2300      	movs	r3, #0
 80022d4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80022d6:	4b04      	ldr	r3, [pc, #16]	@ (80022e8 <xTaskGetTickCountFromISR+0x20>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80022dc:	683b      	ldr	r3, [r7, #0]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	2000048c 	.word	0x2000048c

080022ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022f6:	4b53      	ldr	r3, [pc, #332]	@ (8002444 <xTaskIncrementTick+0x158>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f040 8092 	bne.w	8002424 <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002300:	4b51      	ldr	r3, [pc, #324]	@ (8002448 <xTaskIncrementTick+0x15c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	3301      	adds	r3, #1
 8002306:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002308:	4a4f      	ldr	r2, [pc, #316]	@ (8002448 <xTaskIncrementTick+0x15c>)
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d121      	bne.n	8002358 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002314:	4b4d      	ldr	r3, [pc, #308]	@ (800244c <xTaskIncrementTick+0x160>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00b      	beq.n	8002336 <xTaskIncrementTick+0x4a>
	__asm volatile
 800231e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002322:	f383 8811 	msr	BASEPRI, r3
 8002326:	f3bf 8f6f 	isb	sy
 800232a:	f3bf 8f4f 	dsb	sy
 800232e:	603b      	str	r3, [r7, #0]
}
 8002330:	bf00      	nop
 8002332:	bf00      	nop
 8002334:	e7fd      	b.n	8002332 <xTaskIncrementTick+0x46>
 8002336:	4b45      	ldr	r3, [pc, #276]	@ (800244c <xTaskIncrementTick+0x160>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	60fb      	str	r3, [r7, #12]
 800233c:	4b44      	ldr	r3, [pc, #272]	@ (8002450 <xTaskIncrementTick+0x164>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a42      	ldr	r2, [pc, #264]	@ (800244c <xTaskIncrementTick+0x160>)
 8002342:	6013      	str	r3, [r2, #0]
 8002344:	4a42      	ldr	r2, [pc, #264]	@ (8002450 <xTaskIncrementTick+0x164>)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b42      	ldr	r3, [pc, #264]	@ (8002454 <xTaskIncrementTick+0x168>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3301      	adds	r3, #1
 8002350:	4a40      	ldr	r2, [pc, #256]	@ (8002454 <xTaskIncrementTick+0x168>)
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	f000 f9ac 	bl	80026b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002358:	4b3f      	ldr	r3, [pc, #252]	@ (8002458 <xTaskIncrementTick+0x16c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	429a      	cmp	r2, r3
 8002360:	d351      	bcc.n	8002406 <xTaskIncrementTick+0x11a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002362:	4b3a      	ldr	r3, [pc, #232]	@ (800244c <xTaskIncrementTick+0x160>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <xTaskIncrementTick+0x84>
 800236c:	2301      	movs	r3, #1
 800236e:	e000      	b.n	8002372 <xTaskIncrementTick+0x86>
 8002370:	2300      	movs	r3, #0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d004      	beq.n	8002380 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002376:	4b38      	ldr	r3, [pc, #224]	@ (8002458 <xTaskIncrementTick+0x16c>)
 8002378:	f04f 32ff 	mov.w	r2, #4294967295
 800237c:	601a      	str	r2, [r3, #0]
					break;
 800237e:	e042      	b.n	8002406 <xTaskIncrementTick+0x11a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002380:	4b32      	ldr	r3, [pc, #200]	@ (800244c <xTaskIncrementTick+0x160>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002390:	693a      	ldr	r2, [r7, #16]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	429a      	cmp	r2, r3
 8002396:	d203      	bcs.n	80023a0 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002398:	4a2f      	ldr	r2, [pc, #188]	@ (8002458 <xTaskIncrementTick+0x16c>)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6013      	str	r3, [r2, #0]
						break;
 800239e:	e032      	b.n	8002406 <xTaskIncrementTick+0x11a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	3304      	adds	r3, #4
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff fca7 	bl	8001cf8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d004      	beq.n	80023bc <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	3318      	adds	r3, #24
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7ff fc9e 	bl	8001cf8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 fa6e 	bl	80048a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023c8:	2201      	movs	r2, #1
 80023ca:	409a      	lsls	r2, r3
 80023cc:	4b23      	ldr	r3, [pc, #140]	@ (800245c <xTaskIncrementTick+0x170>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	4a22      	ldr	r2, [pc, #136]	@ (800245c <xTaskIncrementTick+0x170>)
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4a1f      	ldr	r2, [pc, #124]	@ (8002460 <xTaskIncrementTick+0x174>)
 80023e4:	441a      	add	r2, r3
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	3304      	adds	r3, #4
 80023ea:	4619      	mov	r1, r3
 80023ec:	4610      	mov	r0, r2
 80023ee:	f7ff fc28 	bl	8001c42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002464 <xTaskIncrementTick+0x178>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d3b0      	bcc.n	8002362 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002400:	2301      	movs	r3, #1
 8002402:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002404:	e7ad      	b.n	8002362 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002406:	4b17      	ldr	r3, [pc, #92]	@ (8002464 <xTaskIncrementTick+0x178>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800240c:	4914      	ldr	r1, [pc, #80]	@ (8002460 <xTaskIncrementTick+0x174>)
 800240e:	4613      	mov	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	4413      	add	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	440b      	add	r3, r1
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b01      	cmp	r3, #1
 800241c:	d907      	bls.n	800242e <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 800241e:	2301      	movs	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e004      	b.n	800242e <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8002424:	4b10      	ldr	r3, [pc, #64]	@ (8002468 <xTaskIncrementTick+0x17c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	3301      	adds	r3, #1
 800242a:	4a0f      	ldr	r2, [pc, #60]	@ (8002468 <xTaskIncrementTick+0x17c>)
 800242c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800242e:	4b0f      	ldr	r3, [pc, #60]	@ (800246c <xTaskIncrementTick+0x180>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 8002436:	2301      	movs	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800243a:	697b      	ldr	r3, [r7, #20]
}
 800243c:	4618      	mov	r0, r3
 800243e:	3718      	adds	r7, #24
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}
 8002444:	200004b0 	.word	0x200004b0
 8002448:	2000048c 	.word	0x2000048c
 800244c:	20000440 	.word	0x20000440
 8002450:	20000444 	.word	0x20000444
 8002454:	200004a0 	.word	0x200004a0
 8002458:	200004a8 	.word	0x200004a8
 800245c:	20000490 	.word	0x20000490
 8002460:	2000038c 	.word	0x2000038c
 8002464:	20000388 	.word	0x20000388
 8002468:	20000498 	.word	0x20000498
 800246c:	2000049c 	.word	0x2000049c

08002470 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002476:	4b2d      	ldr	r3, [pc, #180]	@ (800252c <vTaskSwitchContext+0xbc>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d003      	beq.n	8002486 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800247e:	4b2c      	ldr	r3, [pc, #176]	@ (8002530 <vTaskSwitchContext+0xc0>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002484:	e04e      	b.n	8002524 <vTaskSwitchContext+0xb4>
		xYieldPending = pdFALSE;
 8002486:	4b2a      	ldr	r3, [pc, #168]	@ (8002530 <vTaskSwitchContext+0xc0>)
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800248c:	4b29      	ldr	r3, [pc, #164]	@ (8002534 <vTaskSwitchContext+0xc4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	fab3 f383 	clz	r3, r3
 8002498:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800249a:	7afb      	ldrb	r3, [r7, #11]
 800249c:	f1c3 031f 	rsb	r3, r3, #31
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	4925      	ldr	r1, [pc, #148]	@ (8002538 <vTaskSwitchContext+0xc8>)
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	009b      	lsls	r3, r3, #2
 80024ae:	440b      	add	r3, r1
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10b      	bne.n	80024ce <vTaskSwitchContext+0x5e>
	__asm volatile
 80024b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024ba:	f383 8811 	msr	BASEPRI, r3
 80024be:	f3bf 8f6f 	isb	sy
 80024c2:	f3bf 8f4f 	dsb	sy
 80024c6:	607b      	str	r3, [r7, #4]
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	e7fd      	b.n	80024ca <vTaskSwitchContext+0x5a>
 80024ce:	697a      	ldr	r2, [r7, #20]
 80024d0:	4613      	mov	r3, r2
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	4a17      	ldr	r2, [pc, #92]	@ (8002538 <vTaskSwitchContext+0xc8>)
 80024da:	4413      	add	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	605a      	str	r2, [r3, #4]
 80024e8:	693b      	ldr	r3, [r7, #16]
 80024ea:	685a      	ldr	r2, [r3, #4]
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	3308      	adds	r3, #8
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d104      	bne.n	80024fe <vTaskSwitchContext+0x8e>
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	605a      	str	r2, [r3, #4]
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	4a0d      	ldr	r2, [pc, #52]	@ (800253c <vTaskSwitchContext+0xcc>)
 8002506:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002508:	4b0c      	ldr	r3, [pc, #48]	@ (800253c <vTaskSwitchContext+0xcc>)
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b0c      	ldr	r3, [pc, #48]	@ (8002540 <vTaskSwitchContext+0xd0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d102      	bne.n	800251a <vTaskSwitchContext+0xaa>
 8002514:	f002 f924 	bl	8004760 <SEGGER_SYSVIEW_OnIdle>
}
 8002518:	e004      	b.n	8002524 <vTaskSwitchContext+0xb4>
		traceTASK_SWITCHED_IN();
 800251a:	4b08      	ldr	r3, [pc, #32]	@ (800253c <vTaskSwitchContext+0xcc>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4618      	mov	r0, r3
 8002520:	f002 f97c 	bl	800481c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8002524:	bf00      	nop
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	200004b0 	.word	0x200004b0
 8002530:	2000049c 	.word	0x2000049c
 8002534:	20000490 	.word	0x20000490
 8002538:	2000038c 	.word	0x2000038c
 800253c:	20000388 	.word	0x20000388
 8002540:	200004ac 	.word	0x200004ac

08002544 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800254c:	f000 f852 	bl	80025f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002550:	4b06      	ldr	r3, [pc, #24]	@ (800256c <prvIdleTask+0x28>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d9f9      	bls.n	800254c <prvIdleTask+0x8>
			{
				taskYIELD();
 8002558:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <prvIdleTask+0x2c>)
 800255a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	f3bf 8f4f 	dsb	sy
 8002564:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002568:	e7f0      	b.n	800254c <prvIdleTask+0x8>
 800256a:	bf00      	nop
 800256c:	2000038c 	.word	0x2000038c
 8002570:	e000ed04 	.word	0xe000ed04

08002574 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800257a:	2300      	movs	r3, #0
 800257c:	607b      	str	r3, [r7, #4]
 800257e:	e00c      	b.n	800259a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	4413      	add	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4a12      	ldr	r2, [pc, #72]	@ (80025d4 <prvInitialiseTaskLists+0x60>)
 800258c:	4413      	add	r3, r2
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff fb2c 	bl	8001bec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3301      	adds	r3, #1
 8002598:	607b      	str	r3, [r7, #4]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b06      	cmp	r3, #6
 800259e:	d9ef      	bls.n	8002580 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80025a0:	480d      	ldr	r0, [pc, #52]	@ (80025d8 <prvInitialiseTaskLists+0x64>)
 80025a2:	f7ff fb23 	bl	8001bec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80025a6:	480d      	ldr	r0, [pc, #52]	@ (80025dc <prvInitialiseTaskLists+0x68>)
 80025a8:	f7ff fb20 	bl	8001bec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80025ac:	480c      	ldr	r0, [pc, #48]	@ (80025e0 <prvInitialiseTaskLists+0x6c>)
 80025ae:	f7ff fb1d 	bl	8001bec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80025b2:	480c      	ldr	r0, [pc, #48]	@ (80025e4 <prvInitialiseTaskLists+0x70>)
 80025b4:	f7ff fb1a 	bl	8001bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80025b8:	480b      	ldr	r0, [pc, #44]	@ (80025e8 <prvInitialiseTaskLists+0x74>)
 80025ba:	f7ff fb17 	bl	8001bec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80025be:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <prvInitialiseTaskLists+0x78>)
 80025c0:	4a05      	ldr	r2, [pc, #20]	@ (80025d8 <prvInitialiseTaskLists+0x64>)
 80025c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80025c4:	4b0a      	ldr	r3, [pc, #40]	@ (80025f0 <prvInitialiseTaskLists+0x7c>)
 80025c6:	4a05      	ldr	r2, [pc, #20]	@ (80025dc <prvInitialiseTaskLists+0x68>)
 80025c8:	601a      	str	r2, [r3, #0]
}
 80025ca:	bf00      	nop
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	2000038c 	.word	0x2000038c
 80025d8:	20000418 	.word	0x20000418
 80025dc:	2000042c 	.word	0x2000042c
 80025e0:	20000448 	.word	0x20000448
 80025e4:	2000045c 	.word	0x2000045c
 80025e8:	20000474 	.word	0x20000474
 80025ec:	20000440 	.word	0x20000440
 80025f0:	20000444 	.word	0x20000444

080025f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025fa:	e019      	b.n	8002630 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80025fc:	f000 fb06 	bl	8002c0c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002600:	4b10      	ldr	r3, [pc, #64]	@ (8002644 <prvCheckTasksWaitingTermination+0x50>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	68db      	ldr	r3, [r3, #12]
 8002606:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3304      	adds	r3, #4
 800260c:	4618      	mov	r0, r3
 800260e:	f7ff fb73 	bl	8001cf8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002612:	4b0d      	ldr	r3, [pc, #52]	@ (8002648 <prvCheckTasksWaitingTermination+0x54>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	3b01      	subs	r3, #1
 8002618:	4a0b      	ldr	r2, [pc, #44]	@ (8002648 <prvCheckTasksWaitingTermination+0x54>)
 800261a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800261c:	4b0b      	ldr	r3, [pc, #44]	@ (800264c <prvCheckTasksWaitingTermination+0x58>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3b01      	subs	r3, #1
 8002622:	4a0a      	ldr	r2, [pc, #40]	@ (800264c <prvCheckTasksWaitingTermination+0x58>)
 8002624:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8002626:	f000 fb21 	bl	8002c6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f810 	bl	8002650 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002630:	4b06      	ldr	r3, [pc, #24]	@ (800264c <prvCheckTasksWaitingTermination+0x58>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e1      	bne.n	80025fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	2000045c 	.word	0x2000045c
 8002648:	20000488 	.word	0x20000488
 800264c:	20000470 	.word	0x20000470

08002650 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800265e:	2b00      	cmp	r3, #0
 8002660:	d108      	bne.n	8002674 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fca2 	bl	8002fb0 <vPortFree>
				vPortFree( pxTCB );
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f000 fc9f 	bl	8002fb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8002672:	e019      	b.n	80026a8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800267a:	2b01      	cmp	r3, #1
 800267c:	d103      	bne.n	8002686 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fc96 	bl	8002fb0 <vPortFree>
	}
 8002684:	e010      	b.n	80026a8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800268c:	2b02      	cmp	r3, #2
 800268e:	d00b      	beq.n	80026a8 <prvDeleteTCB+0x58>
	__asm volatile
 8002690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002694:	f383 8811 	msr	BASEPRI, r3
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	f3bf 8f4f 	dsb	sy
 80026a0:	60fb      	str	r3, [r7, #12]
}
 80026a2:	bf00      	nop
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <prvDeleteTCB+0x54>
	}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026b6:	4b0e      	ldr	r3, [pc, #56]	@ (80026f0 <prvResetNextTaskUnblockTime+0x40>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <prvResetNextTaskUnblockTime+0x14>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <prvResetNextTaskUnblockTime+0x16>
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d004      	beq.n	80026d4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80026ca:	4b0a      	ldr	r3, [pc, #40]	@ (80026f4 <prvResetNextTaskUnblockTime+0x44>)
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80026d2:	e008      	b.n	80026e6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026d4:	4b06      	ldr	r3, [pc, #24]	@ (80026f0 <prvResetNextTaskUnblockTime+0x40>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4a04      	ldr	r2, [pc, #16]	@ (80026f4 <prvResetNextTaskUnblockTime+0x44>)
 80026e4:	6013      	str	r3, [r2, #0]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bc80      	pop	{r7}
 80026ee:	4770      	bx	lr
 80026f0:	20000440 	.word	0x20000440
 80026f4:	200004a8 	.word	0x200004a8

080026f8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80026fe:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <xTaskGetSchedulerState+0x34>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d102      	bne.n	800270c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002706:	2301      	movs	r3, #1
 8002708:	607b      	str	r3, [r7, #4]
 800270a:	e008      	b.n	800271e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800270c:	4b08      	ldr	r3, [pc, #32]	@ (8002730 <xTaskGetSchedulerState+0x38>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002714:	2302      	movs	r3, #2
 8002716:	607b      	str	r3, [r7, #4]
 8002718:	e001      	b.n	800271e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800271a:	2300      	movs	r3, #0
 800271c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800271e:	687b      	ldr	r3, [r7, #4]
	}
 8002720:	4618      	mov	r0, r3
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	bc80      	pop	{r7}
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000494 	.word	0x20000494
 8002730:	200004b0 	.word	0x200004b0

08002734 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800273e:	f000 fa65 	bl	8002c0c <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8002742:	4b21      	ldr	r3, [pc, #132]	@ (80027c8 <ulTaskNotifyTake+0x94>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002748:	2b00      	cmp	r3, #0
 800274a:	d113      	bne.n	8002774 <ulTaskNotifyTake+0x40>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800274c:	4b1e      	ldr	r3, [pc, #120]	@ (80027c8 <ulTaskNotifyTake+0x94>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00b      	beq.n	8002774 <ulTaskNotifyTake+0x40>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800275c:	2101      	movs	r1, #1
 800275e:	6838      	ldr	r0, [r7, #0]
 8002760:	f000 f8ec 	bl	800293c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8002764:	4b19      	ldr	r3, [pc, #100]	@ (80027cc <ulTaskNotifyTake+0x98>)
 8002766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800276a:	601a      	str	r2, [r3, #0]
 800276c:	f3bf 8f4f 	dsb	sy
 8002770:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8002774:	f000 fa7a 	bl	8002c6c <vPortExitCritical>

		taskENTER_CRITICAL();
 8002778:	f000 fa48 	bl	8002c0c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	2042      	movs	r0, #66	@ 0x42
 8002784:	f001 fbbe 	bl	8003f04 <SEGGER_SYSVIEW_RecordU32x2>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8002788:	4b0f      	ldr	r3, [pc, #60]	@ (80027c8 <ulTaskNotifyTake+0x94>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00c      	beq.n	80027b0 <ulTaskNotifyTake+0x7c>
			{
				if( xClearCountOnExit != pdFALSE )
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d004      	beq.n	80027a6 <ulTaskNotifyTake+0x72>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800279c:	4b0a      	ldr	r3, [pc, #40]	@ (80027c8 <ulTaskNotifyTake+0x94>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2200      	movs	r2, #0
 80027a2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80027a4:	e004      	b.n	80027b0 <ulTaskNotifyTake+0x7c>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80027a6:	4b08      	ldr	r3, [pc, #32]	@ (80027c8 <ulTaskNotifyTake+0x94>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	3a01      	subs	r2, #1
 80027ae:	64da      	str	r2, [r3, #76]	@ 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027b0:	4b05      	ldr	r3, [pc, #20]	@ (80027c8 <ulTaskNotifyTake+0x94>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
		}
		taskEXIT_CRITICAL();
 80027ba:	f000 fa57 	bl	8002c6c <vPortExitCritical>

		return ulReturn;
 80027be:	68fb      	ldr	r3, [r7, #12]
	}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20000388 	.word	0x20000388
 80027cc:	e000ed04 	.word	0xe000ed04

080027d0 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b08c      	sub	sp, #48	@ 0x30
 80027d4:	af02      	add	r7, sp, #8
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	603b      	str	r3, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80027e0:	2301      	movs	r3, #1
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d10b      	bne.n	8002802 <xTaskGenericNotify+0x32>
	__asm volatile
 80027ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	61bb      	str	r3, [r7, #24]
}
 80027fc:	bf00      	nop
 80027fe:	bf00      	nop
 8002800:	e7fd      	b.n	80027fe <xTaskGenericNotify+0x2e>
		pxTCB = ( TCB_t * ) xTaskToNotify;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8002806:	f000 fa01 	bl	8002c0c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8002810:	6a3b      	ldr	r3, [r7, #32]
 8002812:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800281e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	2202      	movs	r2, #2
 8002824:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

			switch( eAction )
 8002828:	79fb      	ldrb	r3, [r7, #7]
 800282a:	2b04      	cmp	r3, #4
 800282c:	d827      	bhi.n	800287e <xTaskGenericNotify+0xae>
 800282e:	a201      	add	r2, pc, #4	@ (adr r2, 8002834 <xTaskGenericNotify+0x64>)
 8002830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002834:	0800287f 	.word	0x0800287f
 8002838:	08002849 	.word	0x08002849
 800283c:	08002857 	.word	0x08002857
 8002840:	08002863 	.word	0x08002863
 8002844:	0800286b 	.word	0x0800286b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8002848:	6a3b      	ldr	r3, [r7, #32]
 800284a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	431a      	orrs	r2, r3
 8002850:	6a3b      	ldr	r3, [r7, #32]
 8002852:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8002854:	e013      	b.n	800287e <xTaskGenericNotify+0xae>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8002856:	6a3b      	ldr	r3, [r7, #32]
 8002858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	6a3b      	ldr	r3, [r7, #32]
 800285e:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8002860:	e00d      	b.n	800287e <xTaskGenericNotify+0xae>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8002862:	6a3b      	ldr	r3, [r7, #32]
 8002864:	68ba      	ldr	r2, [r7, #8]
 8002866:	64da      	str	r2, [r3, #76]	@ 0x4c
					break;
 8002868:	e009      	b.n	800287e <xTaskGenericNotify+0xae>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800286a:	7ffb      	ldrb	r3, [r7, #31]
 800286c:	2b02      	cmp	r3, #2
 800286e:	d003      	beq.n	8002878 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8002870:	6a3b      	ldr	r3, [r7, #32]
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	64da      	str	r2, [r3, #76]	@ 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8002876:	e001      	b.n	800287c <xTaskGenericNotify+0xac>
						xReturn = pdFAIL;
 8002878:	2300      	movs	r3, #0
 800287a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800287c:	bf00      	nop
					/* The task is being notified without its notify value being
					updated. */
					break;
			}

			traceTASK_NOTIFY();
 800287e:	6a3b      	ldr	r3, [r7, #32]
 8002880:	4618      	mov	r0, r3
 8002882:	f002 f8af 	bl	80049e4 <SEGGER_SYSVIEW_ShrinkId>
 8002886:	4601      	mov	r1, r0
 8002888:	79fa      	ldrb	r2, [r7, #7]
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	4613      	mov	r3, r2
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	203e      	movs	r0, #62	@ 0x3e
 8002894:	f001 fb90 	bl	8003fb8 <SEGGER_SYSVIEW_RecordU32x4>

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8002898:	7ffb      	ldrb	r3, [r7, #31]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d13e      	bne.n	800291c <xTaskGenericNotify+0x14c>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800289e:	6a3b      	ldr	r3, [r7, #32]
 80028a0:	3304      	adds	r3, #4
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7ff fa28 	bl	8001cf8 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f001 fff8 	bl	80048a0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028b4:	2201      	movs	r2, #1
 80028b6:	409a      	lsls	r2, r3
 80028b8:	4b1c      	ldr	r3, [pc, #112]	@ (800292c <xTaskGenericNotify+0x15c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4313      	orrs	r3, r2
 80028be:	4a1b      	ldr	r2, [pc, #108]	@ (800292c <xTaskGenericNotify+0x15c>)
 80028c0:	6013      	str	r3, [r2, #0]
 80028c2:	6a3b      	ldr	r3, [r7, #32]
 80028c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028c6:	4613      	mov	r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4413      	add	r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4a18      	ldr	r2, [pc, #96]	@ (8002930 <xTaskGenericNotify+0x160>)
 80028d0:	441a      	add	r2, r3
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	3304      	adds	r3, #4
 80028d6:	4619      	mov	r1, r3
 80028d8:	4610      	mov	r0, r2
 80028da:	f7ff f9b2 	bl	8001c42 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00b      	beq.n	80028fe <xTaskGenericNotify+0x12e>
	__asm volatile
 80028e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ea:	f383 8811 	msr	BASEPRI, r3
 80028ee:	f3bf 8f6f 	isb	sy
 80028f2:	f3bf 8f4f 	dsb	sy
 80028f6:	617b      	str	r3, [r7, #20]
}
 80028f8:	bf00      	nop
 80028fa:	bf00      	nop
 80028fc:	e7fd      	b.n	80028fa <xTaskGenericNotify+0x12a>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002902:	4b0c      	ldr	r3, [pc, #48]	@ (8002934 <xTaskGenericNotify+0x164>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002908:	429a      	cmp	r2, r3
 800290a:	d907      	bls.n	800291c <xTaskGenericNotify+0x14c>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800290c:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <xTaskGenericNotify+0x168>)
 800290e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002912:	601a      	str	r2, [r3, #0]
 8002914:	f3bf 8f4f 	dsb	sy
 8002918:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800291c:	f000 f9a6 	bl	8002c6c <vPortExitCritical>

		return xReturn;
 8002920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8002922:	4618      	mov	r0, r3
 8002924:	3728      	adds	r7, #40	@ 0x28
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000490 	.word	0x20000490
 8002930:	2000038c 	.word	0x2000038c
 8002934:	20000388 	.word	0x20000388
 8002938:	e000ed04 	.word	0xe000ed04

0800293c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002946:	4b32      	ldr	r3, [pc, #200]	@ (8002a10 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800294c:	4b31      	ldr	r3, [pc, #196]	@ (8002a14 <prvAddCurrentTaskToDelayedList+0xd8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3304      	adds	r3, #4
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff f9d0 	bl	8001cf8 <uxListRemove>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d10b      	bne.n	8002976 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800295e:	4b2d      	ldr	r3, [pc, #180]	@ (8002a14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002964:	2201      	movs	r2, #1
 8002966:	fa02 f303 	lsl.w	r3, r2, r3
 800296a:	43da      	mvns	r2, r3
 800296c:	4b2a      	ldr	r3, [pc, #168]	@ (8002a18 <prvAddCurrentTaskToDelayedList+0xdc>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4013      	ands	r3, r2
 8002972:	4a29      	ldr	r2, [pc, #164]	@ (8002a18 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002974:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d110      	bne.n	80029a0 <prvAddCurrentTaskToDelayedList+0x64>
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00d      	beq.n	80029a0 <prvAddCurrentTaskToDelayedList+0x64>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
      traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 8002984:	4b23      	ldr	r3, [pc, #140]	@ (8002a14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	211b      	movs	r1, #27
 800298a:	4618      	mov	r0, r3
 800298c:	f001 ffca 	bl	8004924 <SEGGER_SYSVIEW_OnTaskStopReady>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002990:	4b20      	ldr	r3, [pc, #128]	@ (8002a14 <prvAddCurrentTaskToDelayedList+0xd8>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	3304      	adds	r3, #4
 8002996:	4619      	mov	r1, r3
 8002998:	4820      	ldr	r0, [pc, #128]	@ (8002a1c <prvAddCurrentTaskToDelayedList+0xe0>)
 800299a:	f7ff f952 	bl	8001c42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800299e:	e032      	b.n	8002a06 <prvAddCurrentTaskToDelayedList+0xca>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80029a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002a14 <prvAddCurrentTaskToDelayedList+0xd8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	68ba      	ldr	r2, [r7, #8]
 80029ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80029b0:	68ba      	ldr	r2, [r7, #8]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d20f      	bcs.n	80029d8 <prvAddCurrentTaskToDelayedList+0x9c>
        traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80029b8:	4b16      	ldr	r3, [pc, #88]	@ (8002a14 <prvAddCurrentTaskToDelayedList+0xd8>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2104      	movs	r1, #4
 80029be:	4618      	mov	r0, r3
 80029c0:	f001 ffb0 	bl	8004924 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029c4:	4b16      	ldr	r3, [pc, #88]	@ (8002a20 <prvAddCurrentTaskToDelayedList+0xe4>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4b12      	ldr	r3, [pc, #72]	@ (8002a14 <prvAddCurrentTaskToDelayedList+0xd8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	3304      	adds	r3, #4
 80029ce:	4619      	mov	r1, r3
 80029d0:	4610      	mov	r0, r2
 80029d2:	f7ff f959 	bl	8001c88 <vListInsert>
}
 80029d6:	e016      	b.n	8002a06 <prvAddCurrentTaskToDelayedList+0xca>
        traceMOVED_TASK_TO_DELAYED_LIST();
 80029d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002a14 <prvAddCurrentTaskToDelayedList+0xd8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2104      	movs	r1, #4
 80029de:	4618      	mov	r0, r3
 80029e0:	f001 ffa0 	bl	8004924 <SEGGER_SYSVIEW_OnTaskStopReady>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80029e4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a24 <prvAddCurrentTaskToDelayedList+0xe8>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002a14 <prvAddCurrentTaskToDelayedList+0xd8>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	3304      	adds	r3, #4
 80029ee:	4619      	mov	r1, r3
 80029f0:	4610      	mov	r0, r2
 80029f2:	f7ff f949 	bl	8001c88 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80029f6:	4b0c      	ldr	r3, [pc, #48]	@ (8002a28 <prvAddCurrentTaskToDelayedList+0xec>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d202      	bcs.n	8002a06 <prvAddCurrentTaskToDelayedList+0xca>
					xNextTaskUnblockTime = xTimeToWake;
 8002a00:	4a09      	ldr	r2, [pc, #36]	@ (8002a28 <prvAddCurrentTaskToDelayedList+0xec>)
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	6013      	str	r3, [r2, #0]
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	2000048c 	.word	0x2000048c
 8002a14:	20000388 	.word	0x20000388
 8002a18:	20000490 	.word	0x20000490
 8002a1c:	20000474 	.word	0x20000474
 8002a20:	20000444 	.word	0x20000444
 8002a24:	20000440 	.word	0x20000440
 8002a28:	200004a8 	.word	0x200004a8

08002a2c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	3b04      	subs	r3, #4
 8002a3c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a44:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	3b04      	subs	r3, #4
 8002a4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	f023 0201 	bic.w	r2, r3, #1
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	3b04      	subs	r3, #4
 8002a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002a5c:	4a08      	ldr	r2, [pc, #32]	@ (8002a80 <pxPortInitialiseStack+0x54>)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	3b14      	subs	r3, #20
 8002a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	3b20      	subs	r3, #32
 8002a72:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002a74:	68fb      	ldr	r3, [r7, #12]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bc80      	pop	{r7}
 8002a7e:	4770      	bx	lr
 8002a80:	08002a85 	.word	0x08002a85

08002a84 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a84:	b480      	push	{r7}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002a8e:	4b12      	ldr	r3, [pc, #72]	@ (8002ad8 <prvTaskExitError+0x54>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a96:	d00b      	beq.n	8002ab0 <prvTaskExitError+0x2c>
	__asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	60fb      	str	r3, [r7, #12]
}
 8002aaa:	bf00      	nop
 8002aac:	bf00      	nop
 8002aae:	e7fd      	b.n	8002aac <prvTaskExitError+0x28>
	__asm volatile
 8002ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ab4:	f383 8811 	msr	BASEPRI, r3
 8002ab8:	f3bf 8f6f 	isb	sy
 8002abc:	f3bf 8f4f 	dsb	sy
 8002ac0:	60bb      	str	r3, [r7, #8]
}
 8002ac2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002ac4:	bf00      	nop
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0fc      	beq.n	8002ac6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bc80      	pop	{r7}
 8002ad6:	4770      	bx	lr
 8002ad8:	2000000c 	.word	0x2000000c
 8002adc:	00000000 	.word	0x00000000

08002ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002ae0:	4b07      	ldr	r3, [pc, #28]	@ (8002b00 <pxCurrentTCBConst2>)
 8002ae2:	6819      	ldr	r1, [r3, #0]
 8002ae4:	6808      	ldr	r0, [r1, #0]
 8002ae6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002aea:	f380 8809 	msr	PSP, r0
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f04f 0000 	mov.w	r0, #0
 8002af6:	f380 8811 	msr	BASEPRI, r0
 8002afa:	f04e 0e0d 	orr.w	lr, lr, #13
 8002afe:	4770      	bx	lr

08002b00 <pxCurrentTCBConst2>:
 8002b00:	20000388 	.word	0x20000388
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop

08002b08 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002b08:	4806      	ldr	r0, [pc, #24]	@ (8002b24 <prvPortStartFirstTask+0x1c>)
 8002b0a:	6800      	ldr	r0, [r0, #0]
 8002b0c:	6800      	ldr	r0, [r0, #0]
 8002b0e:	f380 8808 	msr	MSP, r0
 8002b12:	b662      	cpsie	i
 8002b14:	b661      	cpsie	f
 8002b16:	f3bf 8f4f 	dsb	sy
 8002b1a:	f3bf 8f6f 	isb	sy
 8002b1e:	df00      	svc	0
 8002b20:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002b22:	bf00      	nop
 8002b24:	e000ed08 	.word	0xe000ed08

08002b28 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002b2e:	4b32      	ldr	r3, [pc, #200]	@ (8002bf8 <xPortStartScheduler+0xd0>)
 8002b30:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	22ff      	movs	r2, #255	@ 0xff
 8002b3e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	781b      	ldrb	r3, [r3, #0]
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002b48:	78fb      	ldrb	r3, [r7, #3]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b2a      	ldr	r3, [pc, #168]	@ (8002bfc <xPortStartScheduler+0xd4>)
 8002b54:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002b56:	4b2a      	ldr	r3, [pc, #168]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002b58:	2207      	movs	r2, #7
 8002b5a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b5c:	e009      	b.n	8002b72 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002b5e:	4b28      	ldr	r3, [pc, #160]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	4a26      	ldr	r2, [pc, #152]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002b66:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002b68:	78fb      	ldrb	r3, [r7, #3]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	b2db      	uxtb	r3, r3
 8002b70:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002b72:	78fb      	ldrb	r3, [r7, #3]
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b7a:	2b80      	cmp	r3, #128	@ 0x80
 8002b7c:	d0ef      	beq.n	8002b5e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002b7e:	4b20      	ldr	r3, [pc, #128]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f1c3 0307 	rsb	r3, r3, #7
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d00b      	beq.n	8002ba2 <xPortStartScheduler+0x7a>
	__asm volatile
 8002b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b8e:	f383 8811 	msr	BASEPRI, r3
 8002b92:	f3bf 8f6f 	isb	sy
 8002b96:	f3bf 8f4f 	dsb	sy
 8002b9a:	60bb      	str	r3, [r7, #8]
}
 8002b9c:	bf00      	nop
 8002b9e:	bf00      	nop
 8002ba0:	e7fd      	b.n	8002b9e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002ba2:	4b17      	ldr	r3, [pc, #92]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	021b      	lsls	r3, r3, #8
 8002ba8:	4a15      	ldr	r2, [pc, #84]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002baa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002bac:	4b14      	ldr	r3, [pc, #80]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002bb4:	4a12      	ldr	r2, [pc, #72]	@ (8002c00 <xPortStartScheduler+0xd8>)
 8002bb6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002bc0:	4b10      	ldr	r3, [pc, #64]	@ (8002c04 <xPortStartScheduler+0xdc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0f      	ldr	r2, [pc, #60]	@ (8002c04 <xPortStartScheduler+0xdc>)
 8002bc6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002bca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002bcc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c04 <xPortStartScheduler+0xdc>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a0c      	ldr	r2, [pc, #48]	@ (8002c04 <xPortStartScheduler+0xdc>)
 8002bd2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002bd6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002bd8:	f000 f8c0 	bl	8002d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002bdc:	4b0a      	ldr	r3, [pc, #40]	@ (8002c08 <xPortStartScheduler+0xe0>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002be2:	f7ff ff91 	bl	8002b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002be6:	f7ff fc43 	bl	8002470 <vTaskSwitchContext>
	prvTaskExitError();
 8002bea:	f7ff ff4b 	bl	8002a84 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	3710      	adds	r7, #16
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	e000e400 	.word	0xe000e400
 8002bfc:	200004b4 	.word	0x200004b4
 8002c00:	200004b8 	.word	0x200004b8
 8002c04:	e000ed20 	.word	0xe000ed20
 8002c08:	2000000c 	.word	0x2000000c

08002c0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
	__asm volatile
 8002c12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c16:	f383 8811 	msr	BASEPRI, r3
 8002c1a:	f3bf 8f6f 	isb	sy
 8002c1e:	f3bf 8f4f 	dsb	sy
 8002c22:	607b      	str	r3, [r7, #4]
}
 8002c24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002c26:	4b0f      	ldr	r3, [pc, #60]	@ (8002c64 <vPortEnterCritical+0x58>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	3301      	adds	r3, #1
 8002c2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002c64 <vPortEnterCritical+0x58>)
 8002c2e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <vPortEnterCritical+0x58>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d110      	bne.n	8002c5a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002c38:	4b0b      	ldr	r3, [pc, #44]	@ (8002c68 <vPortEnterCritical+0x5c>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00b      	beq.n	8002c5a <vPortEnterCritical+0x4e>
	__asm volatile
 8002c42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c46:	f383 8811 	msr	BASEPRI, r3
 8002c4a:	f3bf 8f6f 	isb	sy
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	603b      	str	r3, [r7, #0]
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	e7fd      	b.n	8002c56 <vPortEnterCritical+0x4a>
	}
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bc80      	pop	{r7}
 8002c62:	4770      	bx	lr
 8002c64:	2000000c 	.word	0x2000000c
 8002c68:	e000ed04 	.word	0xe000ed04

08002c6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002c72:	4b12      	ldr	r3, [pc, #72]	@ (8002cbc <vPortExitCritical+0x50>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10b      	bne.n	8002c92 <vPortExitCritical+0x26>
	__asm volatile
 8002c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c7e:	f383 8811 	msr	BASEPRI, r3
 8002c82:	f3bf 8f6f 	isb	sy
 8002c86:	f3bf 8f4f 	dsb	sy
 8002c8a:	607b      	str	r3, [r7, #4]
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	e7fd      	b.n	8002c8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002c92:	4b0a      	ldr	r3, [pc, #40]	@ (8002cbc <vPortExitCritical+0x50>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	3b01      	subs	r3, #1
 8002c98:	4a08      	ldr	r2, [pc, #32]	@ (8002cbc <vPortExitCritical+0x50>)
 8002c9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002c9c:	4b07      	ldr	r3, [pc, #28]	@ (8002cbc <vPortExitCritical+0x50>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d105      	bne.n	8002cb0 <vPortExitCritical+0x44>
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002cae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bc80      	pop	{r7}
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	2000000c 	.word	0x2000000c

08002cc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002cc0:	f3ef 8009 	mrs	r0, PSP
 8002cc4:	f3bf 8f6f 	isb	sy
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8002d00 <pxCurrentTCBConst>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002cd0:	6010      	str	r0, [r2, #0]
 8002cd2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002cd6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8002cda:	f380 8811 	msr	BASEPRI, r0
 8002cde:	f7ff fbc7 	bl	8002470 <vTaskSwitchContext>
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f380 8811 	msr	BASEPRI, r0
 8002cea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002cee:	6819      	ldr	r1, [r3, #0]
 8002cf0:	6808      	ldr	r0, [r1, #0]
 8002cf2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002cf6:	f380 8809 	msr	PSP, r0
 8002cfa:	f3bf 8f6f 	isb	sy
 8002cfe:	4770      	bx	lr

08002d00 <pxCurrentTCBConst>:
 8002d00:	20000388 	.word	0x20000388
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002d04:	bf00      	nop
 8002d06:	bf00      	nop

08002d08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0
	__asm volatile
 8002d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	607b      	str	r3, [r7, #4]
}
 8002d20:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8002d22:	f001 fca3 	bl	800466c <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002d26:	f7ff fae1 	bl	80022ec <xTaskIncrementTick>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d006      	beq.n	8002d3e <xPortSysTickHandler+0x36>
		{
      traceISR_EXIT_TO_SCHEDULER();
 8002d30:	f001 fcfa 	bl	8004728 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002d34:	4b08      	ldr	r3, [pc, #32]	@ (8002d58 <xPortSysTickHandler+0x50>)
 8002d36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	e001      	b.n	8002d42 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 8002d3e:	f001 fcd7 	bl	80046f0 <SEGGER_SYSVIEW_RecordExitISR>
 8002d42:	2300      	movs	r3, #0
 8002d44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	f383 8811 	msr	BASEPRI, r3
}
 8002d4c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000ed04 	.word	0xe000ed04

08002d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002d60:	4b0a      	ldr	r3, [pc, #40]	@ (8002d8c <vPortSetupTimerInterrupt+0x30>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002d66:	4b0a      	ldr	r3, [pc, #40]	@ (8002d90 <vPortSetupTimerInterrupt+0x34>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002d6c:	4b09      	ldr	r3, [pc, #36]	@ (8002d94 <vPortSetupTimerInterrupt+0x38>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a09      	ldr	r2, [pc, #36]	@ (8002d98 <vPortSetupTimerInterrupt+0x3c>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	4a08      	ldr	r2, [pc, #32]	@ (8002d9c <vPortSetupTimerInterrupt+0x40>)
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002d7e:	4b03      	ldr	r3, [pc, #12]	@ (8002d8c <vPortSetupTimerInterrupt+0x30>)
 8002d80:	2207      	movs	r2, #7
 8002d82:	601a      	str	r2, [r3, #0]
}
 8002d84:	bf00      	nop
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	e000e010 	.word	0xe000e010
 8002d90:	e000e018 	.word	0xe000e018
 8002d94:	20000000 	.word	0x20000000
 8002d98:	10624dd3 	.word	0x10624dd3
 8002d9c:	e000e014 	.word	0xe000e014

08002da0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002da6:	f3ef 8305 	mrs	r3, IPSR
 8002daa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2b0f      	cmp	r3, #15
 8002db0:	d915      	bls.n	8002dde <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002db2:	4a17      	ldr	r2, [pc, #92]	@ (8002e10 <vPortValidateInterruptPriority+0x70>)
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	4413      	add	r3, r2
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8002dbc:	4b15      	ldr	r3, [pc, #84]	@ (8002e14 <vPortValidateInterruptPriority+0x74>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	7afa      	ldrb	r2, [r7, #11]
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d20b      	bcs.n	8002dde <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	607b      	str	r3, [r7, #4]
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	e7fd      	b.n	8002dda <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8002dde:	4b0e      	ldr	r3, [pc, #56]	@ (8002e18 <vPortValidateInterruptPriority+0x78>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002de6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e1c <vPortValidateInterruptPriority+0x7c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d90b      	bls.n	8002e06 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8002dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df2:	f383 8811 	msr	BASEPRI, r3
 8002df6:	f3bf 8f6f 	isb	sy
 8002dfa:	f3bf 8f4f 	dsb	sy
 8002dfe:	603b      	str	r3, [r7, #0]
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	e7fd      	b.n	8002e02 <vPortValidateInterruptPriority+0x62>
	}
 8002e06:	bf00      	nop
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr
 8002e10:	e000e3f0 	.word	0xe000e3f0
 8002e14:	200004b4 	.word	0x200004b4
 8002e18:	e000ed0c 	.word	0xe000ed0c
 8002e1c:	200004b8 	.word	0x200004b8

08002e20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	@ 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002e2c:	f7ff f99c 	bl	8002168 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002e30:	4b5a      	ldr	r3, [pc, #360]	@ (8002f9c <pvPortMalloc+0x17c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d101      	bne.n	8002e3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002e38:	f000 f916 	bl	8003068 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002e3c:	4b58      	ldr	r3, [pc, #352]	@ (8002fa0 <pvPortMalloc+0x180>)
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4013      	ands	r3, r2
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f040 8090 	bne.w	8002f6a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d01e      	beq.n	8002e8e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002e50:	2208      	movs	r2, #8
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	f003 0307 	and.w	r3, r3, #7
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d015      	beq.n	8002e8e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	f023 0307 	bic.w	r3, r3, #7
 8002e68:	3308      	adds	r3, #8
 8002e6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00b      	beq.n	8002e8e <pvPortMalloc+0x6e>
	__asm volatile
 8002e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e7a:	f383 8811 	msr	BASEPRI, r3
 8002e7e:	f3bf 8f6f 	isb	sy
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	617b      	str	r3, [r7, #20]
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	e7fd      	b.n	8002e8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d06a      	beq.n	8002f6a <pvPortMalloc+0x14a>
 8002e94:	4b43      	ldr	r3, [pc, #268]	@ (8002fa4 <pvPortMalloc+0x184>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d865      	bhi.n	8002f6a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002e9e:	4b42      	ldr	r3, [pc, #264]	@ (8002fa8 <pvPortMalloc+0x188>)
 8002ea0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002ea2:	4b41      	ldr	r3, [pc, #260]	@ (8002fa8 <pvPortMalloc+0x188>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002ea8:	e004      	b.n	8002eb4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d903      	bls.n	8002ec6 <pvPortMalloc+0xa6>
 8002ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f1      	bne.n	8002eaa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002ec6:	4b35      	ldr	r3, [pc, #212]	@ (8002f9c <pvPortMalloc+0x17c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d04c      	beq.n	8002f6a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002ed0:	6a3b      	ldr	r3, [r7, #32]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	4413      	add	r3, r2
 8002ed8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	1ad2      	subs	r2, r2, r3
 8002eea:	2308      	movs	r3, #8
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d920      	bls.n	8002f34 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d00b      	beq.n	8002f1c <pvPortMalloc+0xfc>
	__asm volatile
 8002f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	613b      	str	r3, [r7, #16]
}
 8002f16:	bf00      	nop
 8002f18:	bf00      	nop
 8002f1a:	e7fd      	b.n	8002f18 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	1ad2      	subs	r2, r2, r3
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002f2e:	69b8      	ldr	r0, [r7, #24]
 8002f30:	f000 f8fc 	bl	800312c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002f34:	4b1b      	ldr	r3, [pc, #108]	@ (8002fa4 <pvPortMalloc+0x184>)
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	4a19      	ldr	r2, [pc, #100]	@ (8002fa4 <pvPortMalloc+0x184>)
 8002f40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002f42:	4b18      	ldr	r3, [pc, #96]	@ (8002fa4 <pvPortMalloc+0x184>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	4b19      	ldr	r3, [pc, #100]	@ (8002fac <pvPortMalloc+0x18c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d203      	bcs.n	8002f56 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002f4e:	4b15      	ldr	r3, [pc, #84]	@ (8002fa4 <pvPortMalloc+0x184>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a16      	ldr	r2, [pc, #88]	@ (8002fac <pvPortMalloc+0x18c>)
 8002f54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	4b11      	ldr	r3, [pc, #68]	@ (8002fa0 <pvPortMalloc+0x180>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002f6a:	f7ff f90b 	bl	8002184 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	f003 0307 	and.w	r3, r3, #7
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <pvPortMalloc+0x170>
	__asm volatile
 8002f78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f7c:	f383 8811 	msr	BASEPRI, r3
 8002f80:	f3bf 8f6f 	isb	sy
 8002f84:	f3bf 8f4f 	dsb	sy
 8002f88:	60fb      	str	r3, [r7, #12]
}
 8002f8a:	bf00      	nop
 8002f8c:	bf00      	nop
 8002f8e:	e7fd      	b.n	8002f8c <pvPortMalloc+0x16c>
	return pvReturn;
 8002f90:	69fb      	ldr	r3, [r7, #28]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3728      	adds	r7, #40	@ 0x28
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	200010c4 	.word	0x200010c4
 8002fa0:	200010d0 	.word	0x200010d0
 8002fa4:	200010c8 	.word	0x200010c8
 8002fa8:	200010bc 	.word	0x200010bc
 8002fac:	200010cc 	.word	0x200010cc

08002fb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b086      	sub	sp, #24
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d04a      	beq.n	8003058 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002fc2:	2308      	movs	r3, #8
 8002fc4:	425b      	negs	r3, r3
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4413      	add	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002fd0:	693b      	ldr	r3, [r7, #16]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	4b22      	ldr	r3, [pc, #136]	@ (8003060 <vPortFree+0xb0>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d10b      	bne.n	8002ff6 <vPortFree+0x46>
	__asm volatile
 8002fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fe2:	f383 8811 	msr	BASEPRI, r3
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	f3bf 8f4f 	dsb	sy
 8002fee:	60fb      	str	r3, [r7, #12]
}
 8002ff0:	bf00      	nop
 8002ff2:	bf00      	nop
 8002ff4:	e7fd      	b.n	8002ff2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <vPortFree+0x66>
	__asm volatile
 8002ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003002:	f383 8811 	msr	BASEPRI, r3
 8003006:	f3bf 8f6f 	isb	sy
 800300a:	f3bf 8f4f 	dsb	sy
 800300e:	60bb      	str	r3, [r7, #8]
}
 8003010:	bf00      	nop
 8003012:	bf00      	nop
 8003014:	e7fd      	b.n	8003012 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4b11      	ldr	r3, [pc, #68]	@ (8003060 <vPortFree+0xb0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4013      	ands	r3, r2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d019      	beq.n	8003058 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d115      	bne.n	8003058 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <vPortFree+0xb0>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	43db      	mvns	r3, r3
 8003036:	401a      	ands	r2, r3
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800303c:	f7ff f894 	bl	8002168 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	4b07      	ldr	r3, [pc, #28]	@ (8003064 <vPortFree+0xb4>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4413      	add	r3, r2
 800304a:	4a06      	ldr	r2, [pc, #24]	@ (8003064 <vPortFree+0xb4>)
 800304c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800304e:	6938      	ldr	r0, [r7, #16]
 8003050:	f000 f86c 	bl	800312c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8003054:	f7ff f896 	bl	8002184 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003058:	bf00      	nop
 800305a:	3718      	adds	r7, #24
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	200010d0 	.word	0x200010d0
 8003064:	200010c8 	.word	0x200010c8

08003068 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800306e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003072:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003074:	4b27      	ldr	r3, [pc, #156]	@ (8003114 <prvHeapInit+0xac>)
 8003076:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f003 0307 	and.w	r3, r3, #7
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00c      	beq.n	800309c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	3307      	adds	r3, #7
 8003086:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f023 0307 	bic.w	r3, r3, #7
 800308e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	4a1f      	ldr	r2, [pc, #124]	@ (8003114 <prvHeapInit+0xac>)
 8003098:	4413      	add	r3, r2
 800309a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80030a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003118 <prvHeapInit+0xb0>)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80030a6:	4b1c      	ldr	r3, [pc, #112]	@ (8003118 <prvHeapInit+0xb0>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68ba      	ldr	r2, [r7, #8]
 80030b0:	4413      	add	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80030b4:	2208      	movs	r2, #8
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	1a9b      	subs	r3, r3, r2
 80030ba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 0307 	bic.w	r3, r3, #7
 80030c2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4a15      	ldr	r2, [pc, #84]	@ (800311c <prvHeapInit+0xb4>)
 80030c8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80030ca:	4b14      	ldr	r3, [pc, #80]	@ (800311c <prvHeapInit+0xb4>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2200      	movs	r2, #0
 80030d0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80030d2:	4b12      	ldr	r3, [pc, #72]	@ (800311c <prvHeapInit+0xb4>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	1ad2      	subs	r2, r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80030e8:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <prvHeapInit+0xb4>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003120 <prvHeapInit+0xb8>)
 80030f6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4a09      	ldr	r2, [pc, #36]	@ (8003124 <prvHeapInit+0xbc>)
 80030fe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003100:	4b09      	ldr	r3, [pc, #36]	@ (8003128 <prvHeapInit+0xc0>)
 8003102:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003106:	601a      	str	r2, [r3, #0]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	200004bc 	.word	0x200004bc
 8003118:	200010bc 	.word	0x200010bc
 800311c:	200010c4 	.word	0x200010c4
 8003120:	200010cc 	.word	0x200010cc
 8003124:	200010c8 	.word	0x200010c8
 8003128:	200010d0 	.word	0x200010d0

0800312c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800312c:	b480      	push	{r7}
 800312e:	b085      	sub	sp, #20
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003134:	4b27      	ldr	r3, [pc, #156]	@ (80031d4 <prvInsertBlockIntoFreeList+0xa8>)
 8003136:	60fb      	str	r3, [r7, #12]
 8003138:	e002      	b.n	8003140 <prvInsertBlockIntoFreeList+0x14>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	60fb      	str	r3, [r7, #12]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	429a      	cmp	r2, r3
 8003148:	d8f7      	bhi.n	800313a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	68ba      	ldr	r2, [r7, #8]
 8003154:	4413      	add	r3, r2
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	429a      	cmp	r2, r3
 800315a:	d108      	bne.n	800316e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	441a      	add	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	68ba      	ldr	r2, [r7, #8]
 8003178:	441a      	add	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d118      	bne.n	80031b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	4b14      	ldr	r3, [pc, #80]	@ (80031d8 <prvInsertBlockIntoFreeList+0xac>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	429a      	cmp	r2, r3
 800318c:	d00d      	beq.n	80031aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685a      	ldr	r2, [r3, #4]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	441a      	add	r2, r3
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	601a      	str	r2, [r3, #0]
 80031a8:	e008      	b.n	80031bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80031aa:	4b0b      	ldr	r3, [pc, #44]	@ (80031d8 <prvInsertBlockIntoFreeList+0xac>)
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	601a      	str	r2, [r3, #0]
 80031b2:	e003      	b.n	80031bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d002      	beq.n	80031ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031ca:	bf00      	nop
 80031cc:	3714      	adds	r7, #20
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bc80      	pop	{r7}
 80031d2:	4770      	bx	lr
 80031d4:	200010bc 	.word	0x200010bc
 80031d8:	200010c4 	.word	0x200010c4

080031dc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 80031e0:	4803      	ldr	r0, [pc, #12]	@ (80031f0 <_cbSendSystemDesc+0x14>)
 80031e2:	f001 f9ed 	bl	80045c0 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 80031e6:	4803      	ldr	r0, [pc, #12]	@ (80031f4 <_cbSendSystemDesc+0x18>)
 80031e8:	f001 f9ea 	bl	80045c0 <SEGGER_SYSVIEW_SendSysDesc>
}
 80031ec:	bf00      	nop
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	08004d4c 	.word	0x08004d4c
 80031f4:	08004d84 	.word	0x08004d84

080031f8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 80031fc:	4b06      	ldr	r3, [pc, #24]	@ (8003218 <SEGGER_SYSVIEW_Conf+0x20>)
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	4b05      	ldr	r3, [pc, #20]	@ (8003218 <SEGGER_SYSVIEW_Conf+0x20>)
 8003202:	6819      	ldr	r1, [r3, #0]
 8003204:	4b05      	ldr	r3, [pc, #20]	@ (800321c <SEGGER_SYSVIEW_Conf+0x24>)
 8003206:	4a06      	ldr	r2, [pc, #24]	@ (8003220 <SEGGER_SYSVIEW_Conf+0x28>)
 8003208:	f000 fdd0 	bl	8003dac <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800320c:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8003210:	f000 fe10 	bl	8003e34 <SEGGER_SYSVIEW_SetRAMBase>
}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000000 	.word	0x20000000
 800321c:	080031dd 	.word	0x080031dd
 8003220:	08004e34 	.word	0x08004e34

08003224 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8003224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003226:	b085      	sub	sp, #20
 8003228:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800322a:	2300      	movs	r3, #0
 800322c:	607b      	str	r3, [r7, #4]
 800322e:	e033      	b.n	8003298 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8003230:	491e      	ldr	r1, [pc, #120]	@ (80032ac <_cbSendTaskList+0x88>)
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	4613      	mov	r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	4413      	add	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	491a      	ldr	r1, [pc, #104]	@ (80032ac <_cbSendTaskList+0x88>)
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	3304      	adds	r3, #4
 8003250:	6819      	ldr	r1, [r3, #0]
 8003252:	4c16      	ldr	r4, [pc, #88]	@ (80032ac <_cbSendTaskList+0x88>)
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	4613      	mov	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4423      	add	r3, r4
 8003260:	3308      	adds	r3, #8
 8003262:	681c      	ldr	r4, [r3, #0]
 8003264:	4d11      	ldr	r5, [pc, #68]	@ (80032ac <_cbSendTaskList+0x88>)
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4413      	add	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	442b      	add	r3, r5
 8003272:	330c      	adds	r3, #12
 8003274:	681d      	ldr	r5, [r3, #0]
 8003276:	4e0d      	ldr	r6, [pc, #52]	@ (80032ac <_cbSendTaskList+0x88>)
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	4613      	mov	r3, r2
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	009b      	lsls	r3, r3, #2
 8003282:	4433      	add	r3, r6
 8003284:	3310      	adds	r3, #16
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	462b      	mov	r3, r5
 800328c:	4622      	mov	r2, r4
 800328e:	f000 f8bd 	bl	800340c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3301      	adds	r3, #1
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	4b05      	ldr	r3, [pc, #20]	@ (80032b0 <_cbSendTaskList+0x8c>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	429a      	cmp	r2, r3
 80032a0:	d3c6      	bcc.n	8003230 <_cbSendTaskList+0xc>
  }
}
 80032a2:	bf00      	nop
 80032a4:	bf00      	nop
 80032a6:	370c      	adds	r7, #12
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032ac:	200010d4 	.word	0x200010d4
 80032b0:	20001174 	.word	0x20001174

080032b4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 80032b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032b8:	b082      	sub	sp, #8
 80032ba:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 80032bc:	f7ff f804 	bl	80022c8 <xTaskGetTickCountFromISR>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2200      	movs	r2, #0
 80032c4:	469a      	mov	sl, r3
 80032c6:	4693      	mov	fp, r2
 80032c8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 80032cc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032d0:	4602      	mov	r2, r0
 80032d2:	460b      	mov	r3, r1
 80032d4:	f04f 0a00 	mov.w	sl, #0
 80032d8:	f04f 0b00 	mov.w	fp, #0
 80032dc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 80032e0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 80032e4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 80032e8:	4652      	mov	r2, sl
 80032ea:	465b      	mov	r3, fp
 80032ec:	1a14      	subs	r4, r2, r0
 80032ee:	eb63 0501 	sbc.w	r5, r3, r1
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	00ab      	lsls	r3, r5, #2
 80032fc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8003300:	00a2      	lsls	r2, r4, #2
 8003302:	4614      	mov	r4, r2
 8003304:	461d      	mov	r5, r3
 8003306:	eb14 0800 	adds.w	r8, r4, r0
 800330a:	eb45 0901 	adc.w	r9, r5, r1
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800331a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800331e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003322:	4690      	mov	r8, r2
 8003324:	4699      	mov	r9, r3
 8003326:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800332a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800332e:	4610      	mov	r0, r2
 8003330:	4619      	mov	r1, r3
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800333c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af02      	add	r7, sp, #8
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800334a:	2205      	movs	r2, #5
 800334c:	492b      	ldr	r1, [pc, #172]	@ (80033fc <SYSVIEW_AddTask+0xc0>)
 800334e:	68b8      	ldr	r0, [r7, #8]
 8003350:	f001 fc9a 	bl	8004c88 <memcmp>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d04b      	beq.n	80033f2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800335a:	4b29      	ldr	r3, [pc, #164]	@ (8003400 <SYSVIEW_AddTask+0xc4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b07      	cmp	r3, #7
 8003360:	d903      	bls.n	800336a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8003362:	4828      	ldr	r0, [pc, #160]	@ (8003404 <SYSVIEW_AddTask+0xc8>)
 8003364:	f001 fc34 	bl	8004bd0 <SEGGER_SYSVIEW_Warn>
    return;
 8003368:	e044      	b.n	80033f4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800336a:	4b25      	ldr	r3, [pc, #148]	@ (8003400 <SYSVIEW_AddTask+0xc4>)
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	4926      	ldr	r1, [pc, #152]	@ (8003408 <SYSVIEW_AddTask+0xcc>)
 8003370:	4613      	mov	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	4413      	add	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	68fa      	ldr	r2, [r7, #12]
 800337c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800337e:	4b20      	ldr	r3, [pc, #128]	@ (8003400 <SYSVIEW_AddTask+0xc4>)
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	4921      	ldr	r1, [pc, #132]	@ (8003408 <SYSVIEW_AddTask+0xcc>)
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	3304      	adds	r3, #4
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8003394:	4b1a      	ldr	r3, [pc, #104]	@ (8003400 <SYSVIEW_AddTask+0xc4>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	491b      	ldr	r1, [pc, #108]	@ (8003408 <SYSVIEW_AddTask+0xcc>)
 800339a:	4613      	mov	r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4413      	add	r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	3308      	adds	r3, #8
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80033aa:	4b15      	ldr	r3, [pc, #84]	@ (8003400 <SYSVIEW_AddTask+0xc4>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	4916      	ldr	r1, [pc, #88]	@ (8003408 <SYSVIEW_AddTask+0xcc>)
 80033b0:	4613      	mov	r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	4413      	add	r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	330c      	adds	r3, #12
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80033c0:	4b0f      	ldr	r3, [pc, #60]	@ (8003400 <SYSVIEW_AddTask+0xc4>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	4910      	ldr	r1, [pc, #64]	@ (8003408 <SYSVIEW_AddTask+0xcc>)
 80033c6:	4613      	mov	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	4413      	add	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	440b      	add	r3, r1
 80033d0:	3310      	adds	r3, #16
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 80033d6:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <SYSVIEW_AddTask+0xc4>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	4a08      	ldr	r2, [pc, #32]	@ (8003400 <SYSVIEW_AddTask+0xc4>)
 80033de:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f80e 	bl	800340c <SYSVIEW_SendTaskInfo>
 80033f0:	e000      	b.n	80033f4 <SYSVIEW_AddTask+0xb8>
    return;
 80033f2:	bf00      	nop

}
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	08004d94 	.word	0x08004d94
 8003400:	20001174 	.word	0x20001174
 8003404:	08004d9c 	.word	0x08004d9c
 8003408:	200010d4 	.word	0x200010d4

0800340c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	@ 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	607a      	str	r2, [r7, #4]
 8003418:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	2214      	movs	r2, #20
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f001 fc40 	bl	8004ca8 <memset>
  TaskInfo.TaskID     = TaskID;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800343a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800343c:	f107 0314 	add.w	r3, r7, #20
 8003440:	4618      	mov	r0, r3
 8003442:	f000 ffc5 	bl	80043d0 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003446:	bf00      	nop
 8003448:	3728      	adds	r7, #40	@ 0x28
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
	...

08003450 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003456:	4b25      	ldr	r3, [pc, #148]	@ (80034ec <_DoInit+0x9c>)
 8003458:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800345a:	22a8      	movs	r2, #168	@ 0xa8
 800345c:	2100      	movs	r1, #0
 800345e:	6838      	ldr	r0, [r7, #0]
 8003460:	f001 fc22 	bl	8004ca8 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	2203      	movs	r2, #3
 8003468:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	2203      	movs	r2, #3
 800346e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	4a1f      	ldr	r2, [pc, #124]	@ (80034f0 <_DoInit+0xa0>)
 8003474:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	4a1e      	ldr	r2, [pc, #120]	@ (80034f4 <_DoInit+0xa4>)
 800347a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003482:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2200      	movs	r2, #0
 8003488:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	2200      	movs	r2, #0
 800348e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	2200      	movs	r2, #0
 8003494:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	4a15      	ldr	r2, [pc, #84]	@ (80034f0 <_DoInit+0xa0>)
 800349a:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	4a16      	ldr	r2, [pc, #88]	@ (80034f8 <_DoInit+0xa8>)
 80034a0:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	2210      	movs	r2, #16
 80034a6:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	2200      	movs	r2, #0
 80034ac:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	2200      	movs	r2, #0
 80034b2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80034ba:	2300      	movs	r3, #0
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	e00c      	b.n	80034da <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f1c3 030f 	rsb	r3, r3, #15
 80034c6:	4a0d      	ldr	r2, [pc, #52]	@ (80034fc <_DoInit+0xac>)
 80034c8:	5cd1      	ldrb	r1, [r2, r3]
 80034ca:	683a      	ldr	r2, [r7, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	460a      	mov	r2, r1
 80034d2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3301      	adds	r3, #1
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b0f      	cmp	r3, #15
 80034de:	d9ef      	bls.n	80034c0 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 80034e0:	bf00      	nop
 80034e2:	bf00      	nop
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20001178 	.word	0x20001178
 80034f0:	08004dec 	.word	0x08004dec
 80034f4:	20001220 	.word	0x20001220
 80034f8:	20001620 	.word	0x20001620
 80034fc:	08004e3c 	.word	0x08004e3c

08003500 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b08c      	sub	sp, #48	@ 0x30
 8003504:	af00      	add	r7, sp, #0
 8003506:	60f8      	str	r0, [r7, #12]
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800350c:	4b3e      	ldr	r3, [pc, #248]	@ (8003608 <SEGGER_RTT_ReadNoLock+0x108>)
 800350e:	623b      	str	r3, [r7, #32]
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b53      	cmp	r3, #83	@ 0x53
 8003518:	d001      	beq.n	800351e <SEGGER_RTT_ReadNoLock+0x1e>
 800351a:	f7ff ff99 	bl	8003450 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4613      	mov	r3, r2
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	4413      	add	r3, r2
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	3360      	adds	r3, #96	@ 0x60
 800352a:	4a37      	ldr	r2, [pc, #220]	@ (8003608 <SEGGER_RTT_ReadNoLock+0x108>)
 800352c:	4413      	add	r3, r2
 800352e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003540:	2300      	movs	r3, #0
 8003542:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003544:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003546:	69bb      	ldr	r3, [r7, #24]
 8003548:	429a      	cmp	r2, r3
 800354a:	d92b      	bls.n	80035a4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4293      	cmp	r3, r2
 800355c:	bf28      	it	cs
 800355e:	4613      	movcs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	685a      	ldr	r2, [r3, #4]
 8003566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003568:	4413      	add	r3, r2
 800356a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	6939      	ldr	r1, [r7, #16]
 8003570:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003572:	f001 fbc5 	bl	8004d00 <memcpy>
    NumBytesRead += NumBytesRem;
 8003576:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	4413      	add	r3, r2
 800357c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800357e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	4413      	add	r3, r2
 8003584:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	1ad3      	subs	r3, r2, r3
 800358c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800358e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	4413      	add	r3, r2
 8003594:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800359c:	429a      	cmp	r2, r3
 800359e:	d101      	bne.n	80035a4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80035a0:	2300      	movs	r3, #0
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80035ac:	697a      	ldr	r2, [r7, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4293      	cmp	r3, r2
 80035b2:	bf28      	it	cs
 80035b4:	4613      	movcs	r3, r2
 80035b6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d019      	beq.n	80035f2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	685a      	ldr	r2, [r3, #4]
 80035c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035c4:	4413      	add	r3, r2
 80035c6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	6939      	ldr	r1, [r7, #16]
 80035cc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035ce:	f001 fb97 	bl	8004d00 <memcpy>
    NumBytesRead += NumBytesRem;
 80035d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	4413      	add	r3, r2
 80035d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80035da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	4413      	add	r3, r2
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	1ad3      	subs	r3, r2, r3
 80035e8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80035ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	4413      	add	r3, r2
 80035f0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80035f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d002      	beq.n	80035fe <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80035fc:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80035fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003600:	4618      	mov	r0, r3
 8003602:	3730      	adds	r7, #48	@ 0x30
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	20001178 	.word	0x20001178

0800360c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	@ 0x30
 8003610:	af00      	add	r7, sp, #0
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	60b9      	str	r1, [r7, #8]
 8003616:	607a      	str	r2, [r7, #4]
  //   4) RdOff >  WrOff => Space is sufficient
  //   5) RdOff >  WrOff => No space in buf
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	1c5a      	adds	r2, r3, #1
 8003620:	4613      	mov	r3, r2
 8003622:	005b      	lsls	r3, r3, #1
 8003624:	4413      	add	r3, r2
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	4a35      	ldr	r2, [pc, #212]	@ (8003700 <SEGGER_RTT_WriteSkipNoLock+0xf4>)
 800362a:	4413      	add	r3, r2
 800362c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RdOff = pRing->RdOff;
 800362e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003630:	691b      	ldr	r3, [r3, #16]
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
  WrOff = pRing->WrOff;
 8003634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	623b      	str	r3, [r7, #32]
  pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800363a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800363c:	685a      	ldr	r2, [r3, #4]
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	4413      	add	r3, r2
 8003642:	61fb      	str	r3, [r7, #28]
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 8003644:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	429a      	cmp	r2, r3
 800364a:	d83e      	bhi.n	80036ca <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800364c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800364e:	689a      	ldr	r2, [r3, #8]
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	1ad3      	subs	r3, r2, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 1)?
 8003658:	69ba      	ldr	r2, [r7, #24]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	429a      	cmp	r2, r3
 800365e:	d30b      	bcc.n	8003678 <SEGGER_RTT_WriteSkipNoLock+0x6c>
      memcpy((void*)pDst, pData, NumBytes);
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003664:	69f8      	ldr	r0, [r7, #28]
 8003666:	f001 fb4b 	bl	8004d00 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
 800366a:	6a3a      	ldr	r2, [r7, #32]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	441a      	add	r2, r3
 8003670:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003672:	60da      	str	r2, [r3, #12]
      return 1;
 8003674:	2301      	movs	r3, #1
 8003676:	e03e      	b.n	80036f6 <SEGGER_RTT_WriteSkipNoLock+0xea>
    }
    Avail += RdOff;                                     // Space incl. wrap-around
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800367c:	4413      	add	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 8003680:	69ba      	ldr	r2, [r7, #24]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	429a      	cmp	r2, r3
 8003686:	d335      	bcc.n	80036f4 <SEGGER_RTT_WriteSkipNoLock+0xe8>
      Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 8003688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800368a:	689a      	ldr	r2, [r3, #8]
 800368c:	6a3b      	ldr	r3, [r7, #32]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	617b      	str	r3, [r7, #20]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003696:	69f8      	ldr	r0, [r7, #28]
 8003698:	f001 fb32 	bl	8004d00 <memcpy>
      NumBytes -= Rem;
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	607b      	str	r3, [r7, #4]
      // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
      // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
      // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <SEGGER_RTT_WriteSkipNoLock+0xb4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80036aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	61fb      	str	r3, [r7, #28]
        memcpy((void*)pDst, pData + Rem, NumBytes);
 80036b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	4413      	add	r3, r2
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4619      	mov	r1, r3
 80036ba:	69f8      	ldr	r0, [r7, #28]
 80036bc:	f001 fb20 	bl	8004d00 <memcpy>
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
 80036c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	60da      	str	r2, [r3, #12]
      return 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e015      	b.n	80036f6 <SEGGER_RTT_WriteSkipNoLock+0xea>
    }
  } else {                                             // Potential case 4)
    Avail = RdOff - WrOff - 1u;
 80036ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036cc:	6a3b      	ldr	r3, [r7, #32]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d30b      	bcc.n	80036f4 <SEGGER_RTT_WriteSkipNoLock+0xe8>
      memcpy((void*)pDst, pData, NumBytes);
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036e0:	69f8      	ldr	r0, [r7, #28]
 80036e2:	f001 fb0d 	bl	8004d00 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
 80036e6:	6a3a      	ldr	r2, [r7, #32]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	441a      	add	r2, r3
 80036ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ee:	60da      	str	r2, [r3, #12]
      return 1;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <SEGGER_RTT_WriteSkipNoLock+0xea>
    }
  }
  return 0;     // No space in buffer
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3730      	adds	r7, #48	@ 0x30
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	20001178 	.word	0x20001178

08003704 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	60f8      	str	r0, [r7, #12]
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	607a      	str	r2, [r7, #4]
 8003710:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003712:	4b3c      	ldr	r3, [pc, #240]	@ (8003804 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8003714:	61bb      	str	r3, [r7, #24]
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b53      	cmp	r3, #83	@ 0x53
 800371e:	d001      	beq.n	8003724 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003720:	f7ff fe96 	bl	8003450 <_DoInit>
  SEGGER_RTT_LOCK();
 8003724:	f3ef 8311 	mrs	r3, BASEPRI
 8003728:	f04f 0120 	mov.w	r1, #32
 800372c:	f381 8811 	msr	BASEPRI, r1
 8003730:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003732:	4b34      	ldr	r3, [pc, #208]	@ (8003804 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8003734:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003736:	2300      	movs	r3, #0
 8003738:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800373a:	6939      	ldr	r1, [r7, #16]
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	00db      	lsls	r3, r3, #3
 8003748:	440b      	add	r3, r1
 800374a:	3304      	adds	r3, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d008      	beq.n	8003764 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	3301      	adds	r3, #1
 8003756:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	69fa      	ldr	r2, [r7, #28]
 800375e:	429a      	cmp	r2, r3
 8003760:	dbeb      	blt.n	800373a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003762:	e000      	b.n	8003766 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003764:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	691b      	ldr	r3, [r3, #16]
 800376a:	69fa      	ldr	r2, [r7, #28]
 800376c:	429a      	cmp	r2, r3
 800376e:	da3d      	bge.n	80037ec <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003770:	6939      	ldr	r1, [r7, #16]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	1c5a      	adds	r2, r3, #1
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	440b      	add	r3, r1
 8003780:	68fa      	ldr	r2, [r7, #12]
 8003782:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003784:	6939      	ldr	r1, [r7, #16]
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	1c5a      	adds	r2, r3, #1
 800378a:	4613      	mov	r3, r2
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	440b      	add	r3, r1
 8003794:	3304      	adds	r3, #4
 8003796:	68ba      	ldr	r2, [r7, #8]
 8003798:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800379a:	6939      	ldr	r1, [r7, #16]
 800379c:	69fa      	ldr	r2, [r7, #28]
 800379e:	4613      	mov	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	3320      	adds	r3, #32
 80037aa:	687a      	ldr	r2, [r7, #4]
 80037ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80037ae:	6939      	ldr	r1, [r7, #16]
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	4613      	mov	r3, r2
 80037b4:	005b      	lsls	r3, r3, #1
 80037b6:	4413      	add	r3, r2
 80037b8:	00db      	lsls	r3, r3, #3
 80037ba:	440b      	add	r3, r1
 80037bc:	3328      	adds	r3, #40	@ 0x28
 80037be:	2200      	movs	r2, #0
 80037c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80037c2:	6939      	ldr	r1, [r7, #16]
 80037c4:	69fa      	ldr	r2, [r7, #28]
 80037c6:	4613      	mov	r3, r2
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	4413      	add	r3, r2
 80037cc:	00db      	lsls	r3, r3, #3
 80037ce:	440b      	add	r3, r1
 80037d0:	3324      	adds	r3, #36	@ 0x24
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80037d6:	6939      	ldr	r1, [r7, #16]
 80037d8:	69fa      	ldr	r2, [r7, #28]
 80037da:	4613      	mov	r3, r2
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	440b      	add	r3, r1
 80037e4:	332c      	adds	r3, #44	@ 0x2c
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	e002      	b.n	80037f2 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 80037ec:	f04f 33ff 	mov.w	r3, #4294967295
 80037f0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80037f8:	69fb      	ldr	r3, [r7, #28]
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3720      	adds	r7, #32
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	20001178 	.word	0x20001178

08003808 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003808:	b580      	push	{r7, lr}
 800380a:	b08a      	sub	sp, #40	@ 0x28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003816:	4b20      	ldr	r3, [pc, #128]	@ (8003898 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8003818:	623b      	str	r3, [r7, #32]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b53      	cmp	r3, #83	@ 0x53
 8003822:	d001      	beq.n	8003828 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003824:	f7ff fe14 	bl	8003450 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003828:	4b1b      	ldr	r3, [pc, #108]	@ (8003898 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 800382a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d82a      	bhi.n	8003888 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 8003832:	f3ef 8311 	mrs	r3, BASEPRI
 8003836:	f04f 0120 	mov.w	r1, #32
 800383a:	f381 8811 	msr	BASEPRI, r1
 800383e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	4613      	mov	r3, r2
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	4413      	add	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	3360      	adds	r3, #96	@ 0x60
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	4413      	add	r3, r2
 8003850:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00e      	beq.n	8003876 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	68ba      	ldr	r2, [r7, #8]
 800385c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2200      	movs	r2, #0
 800386e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	2200      	movs	r2, #0
 8003874:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800387a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	@ 0x24
 8003886:	e002      	b.n	800388e <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 8003888:	f04f 33ff 	mov.w	r3, #4294967295
 800388c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800388e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003890:	4618      	mov	r0, r3
 8003892:	3728      	adds	r7, #40	@ 0x28
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}
 8003898:	20001178 	.word	0x20001178

0800389c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	60fa      	str	r2, [r7, #12]
 80038b2:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b80      	cmp	r3, #128	@ 0x80
 80038b8:	d90a      	bls.n	80038d0 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80038ba:	2380      	movs	r3, #128	@ 0x80
 80038bc:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80038be:	e007      	b.n	80038d0 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	1c53      	adds	r3, r2, #1
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	1c59      	adds	r1, r3, #1
 80038ca:	60f9      	str	r1, [r7, #12]
 80038cc:	7812      	ldrb	r2, [r2, #0]
 80038ce:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	1e5a      	subs	r2, r3, #1
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <_EncodeStr+0x46>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	781b      	ldrb	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1ee      	bne.n	80038c0 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80038ee:	68fb      	ldr	r3, [r7, #12]
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	371c      	adds	r7, #28
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr

080038fa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80038fa:	b480      	push	{r7}
 80038fc:	b083      	sub	sp, #12
 80038fe:	af00      	add	r7, sp, #0
 8003900:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	3307      	adds	r3, #7
}
 8003906:	4618      	mov	r0, r3
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	bc80      	pop	{r7}
 800390e:	4770      	bx	lr

08003910 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003916:	4b34      	ldr	r3, [pc, #208]	@ (80039e8 <_HandleIncomingPacket+0xd8>)
 8003918:	7e1b      	ldrb	r3, [r3, #24]
 800391a:	4618      	mov	r0, r3
 800391c:	1cfb      	adds	r3, r7, #3
 800391e:	2201      	movs	r2, #1
 8003920:	4619      	mov	r1, r3
 8003922:	f7ff fded 	bl	8003500 <SEGGER_RTT_ReadNoLock>
 8003926:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d057      	beq.n	80039de <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	2b80      	cmp	r3, #128	@ 0x80
 8003932:	d031      	beq.n	8003998 <_HandleIncomingPacket+0x88>
 8003934:	2b80      	cmp	r3, #128	@ 0x80
 8003936:	dc40      	bgt.n	80039ba <_HandleIncomingPacket+0xaa>
 8003938:	2b07      	cmp	r3, #7
 800393a:	dc15      	bgt.n	8003968 <_HandleIncomingPacket+0x58>
 800393c:	2b00      	cmp	r3, #0
 800393e:	dd3c      	ble.n	80039ba <_HandleIncomingPacket+0xaa>
 8003940:	3b01      	subs	r3, #1
 8003942:	2b06      	cmp	r3, #6
 8003944:	d839      	bhi.n	80039ba <_HandleIncomingPacket+0xaa>
 8003946:	a201      	add	r2, pc, #4	@ (adr r2, 800394c <_HandleIncomingPacket+0x3c>)
 8003948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394c:	0800396f 	.word	0x0800396f
 8003950:	08003975 	.word	0x08003975
 8003954:	0800397b 	.word	0x0800397b
 8003958:	08003981 	.word	0x08003981
 800395c:	08003987 	.word	0x08003987
 8003960:	0800398d 	.word	0x0800398d
 8003964:	08003993 	.word	0x08003993
 8003968:	2b7f      	cmp	r3, #127	@ 0x7f
 800396a:	d033      	beq.n	80039d4 <_HandleIncomingPacket+0xc4>
 800396c:	e025      	b.n	80039ba <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800396e:	f000 fbb5 	bl	80040dc <SEGGER_SYSVIEW_Start>
      break;
 8003972:	e034      	b.n	80039de <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003974:	f000 fc6c 	bl	8004250 <SEGGER_SYSVIEW_Stop>
      break;
 8003978:	e031      	b.n	80039de <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800397a:	f000 fe45 	bl	8004608 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800397e:	e02e      	b.n	80039de <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003980:	f000 fe0a 	bl	8004598 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003984:	e02b      	b.n	80039de <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003986:	f000 fc89 	bl	800429c <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800398a:	e028      	b.n	80039de <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800398c:	f001 f8e2 	bl	8004b54 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003990:	e025      	b.n	80039de <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003992:	f001 f8c1 	bl	8004b18 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003996:	e022      	b.n	80039de <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003998:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <_HandleIncomingPacket+0xd8>)
 800399a:	7e1b      	ldrb	r3, [r3, #24]
 800399c:	4618      	mov	r0, r3
 800399e:	1cfb      	adds	r3, r7, #3
 80039a0:	2201      	movs	r2, #1
 80039a2:	4619      	mov	r1, r3
 80039a4:	f7ff fdac 	bl	8003500 <SEGGER_RTT_ReadNoLock>
 80039a8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	4618      	mov	r0, r3
 80039b4:	f001 f826 	bl	8004a04 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80039b8:	e00e      	b.n	80039d8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80039ba:	78fb      	ldrb	r3, [r7, #3]
 80039bc:	b25b      	sxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	da0c      	bge.n	80039dc <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80039c2:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <_HandleIncomingPacket+0xd8>)
 80039c4:	7e1b      	ldrb	r3, [r3, #24]
 80039c6:	4618      	mov	r0, r3
 80039c8:	1cfb      	adds	r3, r7, #3
 80039ca:	2201      	movs	r2, #1
 80039cc:	4619      	mov	r1, r3
 80039ce:	f7ff fd97 	bl	8003500 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80039d2:	e003      	b.n	80039dc <_HandleIncomingPacket+0xcc>
      break;
 80039d4:	bf00      	nop
 80039d6:	e002      	b.n	80039de <_HandleIncomingPacket+0xce>
      break;
 80039d8:	bf00      	nop
 80039da:	e000      	b.n	80039de <_HandleIncomingPacket+0xce>
      break;
 80039dc:	bf00      	nop
    }
  }
}
 80039de:	bf00      	nop
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	20003638 	.word	0x20003638

080039ec <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b08c      	sub	sp, #48	@ 0x30
 80039f0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80039f2:	2301      	movs	r3, #1
 80039f4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	3301      	adds	r3, #1
 80039fa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a00:	4b31      	ldr	r3, [pc, #196]	@ (8003ac8 <_TrySendOverflowPacket+0xdc>)
 8003a02:	695b      	ldr	r3, [r3, #20]
 8003a04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a06:	e00b      	b.n	8003a20 <_TrySendOverflowPacket+0x34>
 8003a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0e:	1c59      	adds	r1, r3, #1
 8003a10:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003a12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]
 8003a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a1c:	09db      	lsrs	r3, r3, #7
 8003a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a22:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a24:	d8f0      	bhi.n	8003a08 <_TrySendOverflowPacket+0x1c>
 8003a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a28:	1c5a      	adds	r2, r3, #1
 8003a2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	701a      	strb	r2, [r3, #0]
 8003a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a34:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003a36:	4b25      	ldr	r3, [pc, #148]	@ (8003acc <_TrySendOverflowPacket+0xe0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003a3c:	4b22      	ldr	r3, [pc, #136]	@ (8003ac8 <_TrySendOverflowPacket+0xdc>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	69ba      	ldr	r2, [r7, #24]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	623b      	str	r3, [r7, #32]
 8003a4e:	e00b      	b.n	8003a68 <_TrySendOverflowPacket+0x7c>
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	b2da      	uxtb	r2, r3
 8003a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a56:	1c59      	adds	r1, r3, #1
 8003a58:	6279      	str	r1, [r7, #36]	@ 0x24
 8003a5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	701a      	strb	r2, [r3, #0]
 8003a62:	6a3b      	ldr	r3, [r7, #32]
 8003a64:	09db      	lsrs	r3, r3, #7
 8003a66:	623b      	str	r3, [r7, #32]
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a6c:	d8f0      	bhi.n	8003a50 <_TrySendOverflowPacket+0x64>
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	627a      	str	r2, [r7, #36]	@ 0x24
 8003a74:	6a3a      	ldr	r2, [r7, #32]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8003a7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ac8 <_TrySendOverflowPacket+0xdc>)
 8003a80:	785b      	ldrb	r3, [r3, #1]
 8003a82:	4618      	mov	r0, r3
 8003a84:	1d3b      	adds	r3, r7, #4
 8003a86:	69fa      	ldr	r2, [r7, #28]
 8003a88:	1ad3      	subs	r3, r2, r3
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	f7ff fdbc 	bl	800360c <SEGGER_RTT_WriteSkipNoLock>
 8003a94:	4603      	mov	r3, r0
 8003a96:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d009      	beq.n	8003ab2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac8 <_TrySendOverflowPacket+0xdc>)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003aa4:	4b08      	ldr	r3, [pc, #32]	@ (8003ac8 <_TrySendOverflowPacket+0xdc>)
 8003aa6:	781b      	ldrb	r3, [r3, #0]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <_TrySendOverflowPacket+0xdc>)
 8003aae:	701a      	strb	r2, [r3, #0]
 8003ab0:	e004      	b.n	8003abc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003ab2:	4b05      	ldr	r3, [pc, #20]	@ (8003ac8 <_TrySendOverflowPacket+0xdc>)
 8003ab4:	695b      	ldr	r3, [r3, #20]
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	4a03      	ldr	r2, [pc, #12]	@ (8003ac8 <_TrySendOverflowPacket+0xdc>)
 8003aba:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8003abc:	693b      	ldr	r3, [r7, #16]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3730      	adds	r7, #48	@ 0x30
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20003638 	.word	0x20003638
 8003acc:	e0001004 	.word	0xe0001004

08003ad0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	@ 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8003adc:	4b98      	ldr	r3, [pc, #608]	@ (8003d40 <_SendPacket+0x270>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d010      	beq.n	8003b06 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003ae4:	4b96      	ldr	r3, [pc, #600]	@ (8003d40 <_SendPacket+0x270>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 812d 	beq.w	8003d48 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8003aee:	4b94      	ldr	r3, [pc, #592]	@ (8003d40 <_SendPacket+0x270>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d109      	bne.n	8003b0a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003af6:	f7ff ff79 	bl	80039ec <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8003afa:	4b91      	ldr	r3, [pc, #580]	@ (8003d40 <_SendPacket+0x270>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	f040 8124 	bne.w	8003d4c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8003b04:	e001      	b.n	8003b0a <_SendPacket+0x3a>
    goto Send;
 8003b06:	bf00      	nop
 8003b08:	e000      	b.n	8003b0c <_SendPacket+0x3c>
Send:
 8003b0a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b1f      	cmp	r3, #31
 8003b10:	d809      	bhi.n	8003b26 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003b12:	4b8b      	ldr	r3, [pc, #556]	@ (8003d40 <_SendPacket+0x270>)
 8003b14:	69da      	ldr	r2, [r3, #28]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	fa22 f303 	lsr.w	r3, r2, r3
 8003b1c:	f003 0301 	and.w	r3, r3, #1
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f040 8115 	bne.w	8003d50 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b17      	cmp	r3, #23
 8003b2a:	d807      	bhi.n	8003b3c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3b01      	subs	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	701a      	strb	r2, [r3, #0]
 8003b3a:	e0c4      	b.n	8003cc6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b48:	d912      	bls.n	8003b70 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	09da      	lsrs	r2, r3, #7
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3b01      	subs	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	3a01      	subs	r2, #1
 8003b62:	60fa      	str	r2, [r7, #12]
 8003b64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	e006      	b.n	8003b7e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	60fb      	str	r3, [r7, #12]
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	b2da      	uxtb	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2b7e      	cmp	r3, #126	@ 0x7e
 8003b82:	d807      	bhi.n	8003b94 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	3b01      	subs	r3, #1
 8003b88:	60fb      	str	r3, [r7, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	e098      	b.n	8003cc6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003b9a:	d212      	bcs.n	8003bc2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	09da      	lsrs	r2, r3, #7
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	3b01      	subs	r3, #1
 8003ba4:	60fb      	str	r3, [r7, #12]
 8003ba6:	b2d2      	uxtb	r2, r2
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	b2db      	uxtb	r3, r3
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	3a01      	subs	r2, #1
 8003bb4:	60fa      	str	r2, [r7, #12]
 8003bb6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	701a      	strb	r2, [r3, #0]
 8003bc0:	e081      	b.n	8003cc6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003bc8:	d21d      	bcs.n	8003c06 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	0b9a      	lsrs	r2, r3, #14
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	60fb      	str	r3, [r7, #12]
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	09db      	lsrs	r3, r3, #7
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	3a01      	subs	r2, #1
 8003be4:	60fa      	str	r2, [r7, #12]
 8003be6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bea:	b2da      	uxtb	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	3a01      	subs	r2, #1
 8003bf8:	60fa      	str	r2, [r7, #12]
 8003bfa:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	701a      	strb	r2, [r3, #0]
 8003c04:	e05f      	b.n	8003cc6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c0c:	d228      	bcs.n	8003c60 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	0d5a      	lsrs	r2, r3, #21
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
 8003c18:	b2d2      	uxtb	r2, r2
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	0b9b      	lsrs	r3, r3, #14
 8003c22:	b2db      	uxtb	r3, r3
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	3a01      	subs	r2, #1
 8003c28:	60fa      	str	r2, [r7, #12]
 8003c2a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	09db      	lsrs	r3, r3, #7
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	3a01      	subs	r2, #1
 8003c3e:	60fa      	str	r2, [r7, #12]
 8003c40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c44:	b2da      	uxtb	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	3a01      	subs	r2, #1
 8003c52:	60fa      	str	r2, [r7, #12]
 8003c54:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	701a      	strb	r2, [r3, #0]
 8003c5e:	e032      	b.n	8003cc6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	0f1a      	lsrs	r2, r3, #28
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	3b01      	subs	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	0d5b      	lsrs	r3, r3, #21
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	3a01      	subs	r2, #1
 8003c7a:	60fa      	str	r2, [r7, #12]
 8003c7c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	0b9b      	lsrs	r3, r3, #14
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	3a01      	subs	r2, #1
 8003c90:	60fa      	str	r2, [r7, #12]
 8003c92:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003c96:	b2da      	uxtb	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	09db      	lsrs	r3, r3, #7
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	3a01      	subs	r2, #1
 8003ca6:	60fa      	str	r2, [r7, #12]
 8003ca8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	3a01      	subs	r2, #1
 8003cba:	60fa      	str	r2, [r7, #12]
 8003cbc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003cc0:	b2da      	uxtb	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8003d44 <_SendPacket+0x274>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8003ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <_SendPacket+0x270>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	623b      	str	r3, [r7, #32]
 8003cde:	e00b      	b.n	8003cf8 <_SendPacket+0x228>
 8003ce0:	6a3b      	ldr	r3, [r7, #32]
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce6:	1c59      	adds	r1, r3, #1
 8003ce8:	6279      	str	r1, [r7, #36]	@ 0x24
 8003cea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003cee:	b2d2      	uxtb	r2, r2
 8003cf0:	701a      	strb	r2, [r3, #0]
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	09db      	lsrs	r3, r3, #7
 8003cf6:	623b      	str	r3, [r7, #32]
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	2b7f      	cmp	r3, #127	@ 0x7f
 8003cfc:	d8f0      	bhi.n	8003ce0 <_SendPacket+0x210>
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	1c5a      	adds	r2, r3, #1
 8003d02:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d0c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 8003d0e:	4b0c      	ldr	r3, [pc, #48]	@ (8003d40 <_SendPacket+0x270>)
 8003d10:	785b      	ldrb	r3, [r3, #1]
 8003d12:	4618      	mov	r0, r3
 8003d14:	68ba      	ldr	r2, [r7, #8]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	68f9      	ldr	r1, [r7, #12]
 8003d1e:	f7ff fc75 	bl	800360c <SEGGER_RTT_WriteSkipNoLock>
 8003d22:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8003d2a:	4a05      	ldr	r2, [pc, #20]	@ (8003d40 <_SendPacket+0x270>)
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	60d3      	str	r3, [r2, #12]
 8003d30:	e00f      	b.n	8003d52 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003d32:	4b03      	ldr	r3, [pc, #12]	@ (8003d40 <_SendPacket+0x270>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	b2da      	uxtb	r2, r3
 8003d3a:	4b01      	ldr	r3, [pc, #4]	@ (8003d40 <_SendPacket+0x270>)
 8003d3c:	701a      	strb	r2, [r3, #0]
 8003d3e:	e008      	b.n	8003d52 <_SendPacket+0x282>
 8003d40:	20003638 	.word	0x20003638
 8003d44:	e0001004 	.word	0xe0001004
    goto SendDone;
 8003d48:	bf00      	nop
 8003d4a:	e002      	b.n	8003d52 <_SendPacket+0x282>
      goto SendDone;
 8003d4c:	bf00      	nop
 8003d4e:	e000      	b.n	8003d52 <_SendPacket+0x282>
      goto SendDone;
 8003d50:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003d52:	4b14      	ldr	r3, [pc, #80]	@ (8003da4 <_SendPacket+0x2d4>)
 8003d54:	7e1b      	ldrb	r3, [r3, #24]
 8003d56:	4619      	mov	r1, r3
 8003d58:	4a13      	ldr	r2, [pc, #76]	@ (8003da8 <_SendPacket+0x2d8>)
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	440b      	add	r3, r1
 8003d60:	00db      	lsls	r3, r3, #3
 8003d62:	4413      	add	r3, r2
 8003d64:	336c      	adds	r3, #108	@ 0x6c
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	4b0e      	ldr	r3, [pc, #56]	@ (8003da4 <_SendPacket+0x2d4>)
 8003d6a:	7e1b      	ldrb	r3, [r3, #24]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	490e      	ldr	r1, [pc, #56]	@ (8003da8 <_SendPacket+0x2d8>)
 8003d70:	4603      	mov	r3, r0
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4403      	add	r3, r0
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	440b      	add	r3, r1
 8003d7a:	3370      	adds	r3, #112	@ 0x70
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d00b      	beq.n	8003d9a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003d82:	4b08      	ldr	r3, [pc, #32]	@ (8003da4 <_SendPacket+0x2d4>)
 8003d84:	789b      	ldrb	r3, [r3, #2]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d107      	bne.n	8003d9a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003d8a:	4b06      	ldr	r3, [pc, #24]	@ (8003da4 <_SendPacket+0x2d4>)
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003d90:	f7ff fdbe 	bl	8003910 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003d94:	4b03      	ldr	r3, [pc, #12]	@ (8003da4 <_SendPacket+0x2d4>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003d9a:	bf00      	nop
 8003d9c:	3728      	adds	r7, #40	@ 0x28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	20003638 	.word	0x20003638
 8003da8:	20001178 	.word	0x20001178

08003dac <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	60f8      	str	r0, [r7, #12]
 8003db4:	60b9      	str	r1, [r7, #8]
 8003db6:	607a      	str	r2, [r7, #4]
 8003db8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003dc0:	4917      	ldr	r1, [pc, #92]	@ (8003e20 <SEGGER_SYSVIEW_Init+0x74>)
 8003dc2:	4818      	ldr	r0, [pc, #96]	@ (8003e24 <SEGGER_SYSVIEW_Init+0x78>)
 8003dc4:	f7ff fc9e 	bl	8003704 <SEGGER_RTT_AllocUpBuffer>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	4b16      	ldr	r3, [pc, #88]	@ (8003e28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003dce:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003dd0:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003dd2:	785a      	ldrb	r2, [r3, #1]
 8003dd4:	4b14      	ldr	r3, [pc, #80]	@ (8003e28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003dd6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003dd8:	4b13      	ldr	r3, [pc, #76]	@ (8003e28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003dda:	7e1b      	ldrb	r3, [r3, #24]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	2300      	movs	r3, #0
 8003de0:	9300      	str	r3, [sp, #0]
 8003de2:	2308      	movs	r3, #8
 8003de4:	4a11      	ldr	r2, [pc, #68]	@ (8003e2c <SEGGER_SYSVIEW_Init+0x80>)
 8003de6:	490f      	ldr	r1, [pc, #60]	@ (8003e24 <SEGGER_SYSVIEW_Init+0x78>)
 8003de8:	f7ff fd0e 	bl	8003808 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8003dec:	4b0e      	ldr	r3, [pc, #56]	@ (8003e28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003dee:	2200      	movs	r2, #0
 8003df0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003df2:	4b0f      	ldr	r3, [pc, #60]	@ (8003e30 <SEGGER_SYSVIEW_Init+0x84>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a0c      	ldr	r2, [pc, #48]	@ (8003e28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003df8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8003dfa:	4a0b      	ldr	r2, [pc, #44]	@ (8003e28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003e00:	4a09      	ldr	r2, [pc, #36]	@ (8003e28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003e06:	4a08      	ldr	r2, [pc, #32]	@ (8003e28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8003e0c:	4a06      	ldr	r2, [pc, #24]	@ (8003e28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003e12:	4b05      	ldr	r3, [pc, #20]	@ (8003e28 <SEGGER_SYSVIEW_Init+0x7c>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	20001630 	.word	0x20001630
 8003e24:	08004e00 	.word	0x08004e00
 8003e28:	20003638 	.word	0x20003638
 8003e2c:	20003630 	.word	0x20003630
 8003e30:	e0001004 	.word	0xe0001004

08003e34 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003e3c:	4a03      	ldr	r2, [pc, #12]	@ (8003e4c <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6113      	str	r3, [r2, #16]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bc80      	pop	{r7}
 8003e4a:	4770      	bx	lr
 8003e4c:	20003638 	.word	0x20003638

08003e50 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b084      	sub	sp, #16
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003e58:	f3ef 8311 	mrs	r3, BASEPRI
 8003e5c:	f04f 0120 	mov.w	r1, #32
 8003e60:	f381 8811 	msr	BASEPRI, r1
 8003e64:	60fb      	str	r3, [r7, #12]
 8003e66:	4808      	ldr	r0, [pc, #32]	@ (8003e88 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003e68:	f7ff fd47 	bl	80038fa <_PreparePacket>
 8003e6c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	68b8      	ldr	r0, [r7, #8]
 8003e74:	f7ff fe2c 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f383 8811 	msr	BASEPRI, r3
}
 8003e7e:	bf00      	nop
 8003e80:	3710      	adds	r7, #16
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	20003668 	.word	0x20003668

08003e8c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003e96:	f3ef 8311 	mrs	r3, BASEPRI
 8003e9a:	f04f 0120 	mov.w	r1, #32
 8003e9e:	f381 8811 	msr	BASEPRI, r1
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	4816      	ldr	r0, [pc, #88]	@ (8003f00 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003ea6:	f7ff fd28 	bl	80038fa <_PreparePacket>
 8003eaa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	61fb      	str	r3, [r7, #28]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	e00b      	b.n	8003ed2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	1c59      	adds	r1, r3, #1
 8003ec2:	61f9      	str	r1, [r7, #28]
 8003ec4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	09db      	lsrs	r3, r3, #7
 8003ed0:	61bb      	str	r3, [r7, #24]
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ed6:	d8f0      	bhi.n	8003eba <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	1c5a      	adds	r2, r3, #1
 8003edc:	61fa      	str	r2, [r7, #28]
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68f9      	ldr	r1, [r7, #12]
 8003eec:	6938      	ldr	r0, [r7, #16]
 8003eee:	f7ff fdef 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f383 8811 	msr	BASEPRI, r3
}
 8003ef8:	bf00      	nop
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	20003668 	.word	0x20003668

08003f04 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b08c      	sub	sp, #48	@ 0x30
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003f10:	f3ef 8311 	mrs	r3, BASEPRI
 8003f14:	f04f 0120 	mov.w	r1, #32
 8003f18:	f381 8811 	msr	BASEPRI, r1
 8003f1c:	61fb      	str	r3, [r7, #28]
 8003f1e:	4825      	ldr	r0, [pc, #148]	@ (8003fb4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003f20:	f7ff fceb 	bl	80038fa <_PreparePacket>
 8003f24:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f32:	e00b      	b.n	8003f4c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f3a:	1c59      	adds	r1, r3, #1
 8003f3c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003f3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f48:	09db      	lsrs	r3, r3, #7
 8003f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f50:	d8f0      	bhi.n	8003f34 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003f52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f54:	1c5a      	adds	r2, r3, #1
 8003f56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f60:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	623b      	str	r3, [r7, #32]
 8003f6a:	e00b      	b.n	8003f84 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003f6c:	6a3b      	ldr	r3, [r7, #32]
 8003f6e:	b2da      	uxtb	r2, r3
 8003f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f72:	1c59      	adds	r1, r3, #1
 8003f74:	6279      	str	r1, [r7, #36]	@ 0x24
 8003f76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f7a:	b2d2      	uxtb	r2, r2
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	6a3b      	ldr	r3, [r7, #32]
 8003f80:	09db      	lsrs	r3, r3, #7
 8003f82:	623b      	str	r3, [r7, #32]
 8003f84:	6a3b      	ldr	r3, [r7, #32]
 8003f86:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f88:	d8f0      	bhi.n	8003f6c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f8c:	1c5a      	adds	r2, r3, #1
 8003f8e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	b2d2      	uxtb	r2, r2
 8003f94:	701a      	strb	r2, [r3, #0]
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003f9a:	68fa      	ldr	r2, [r7, #12]
 8003f9c:	6979      	ldr	r1, [r7, #20]
 8003f9e:	69b8      	ldr	r0, [r7, #24]
 8003fa0:	f7ff fd96 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	f383 8811 	msr	BASEPRI, r3
}
 8003faa:	bf00      	nop
 8003fac:	3730      	adds	r7, #48	@ 0x30
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20003668 	.word	0x20003668

08003fb8 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b090      	sub	sp, #64	@ 0x40
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	60f8      	str	r0, [r7, #12]
 8003fc0:	60b9      	str	r1, [r7, #8]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003fc6:	f3ef 8311 	mrs	r3, BASEPRI
 8003fca:	f04f 0120 	mov.w	r1, #32
 8003fce:	f381 8811 	msr	BASEPRI, r1
 8003fd2:	61fb      	str	r3, [r7, #28]
 8003fd4:	4840      	ldr	r0, [pc, #256]	@ (80040d8 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8003fd6:	f7ff fc90 	bl	80038fa <_PreparePacket>
 8003fda:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003fe8:	e00b      	b.n	8004002 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8003fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fec:	b2da      	uxtb	r2, r3
 8003fee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ff0:	1c59      	adds	r1, r3, #1
 8003ff2:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003ff4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	09db      	lsrs	r3, r3, #7
 8004000:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004004:	2b7f      	cmp	r3, #127	@ 0x7f
 8004006:	d8f0      	bhi.n	8003fea <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800400e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004016:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004018:	697b      	ldr	r3, [r7, #20]
 800401a:	637b      	str	r3, [r7, #52]	@ 0x34
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004020:	e00b      	b.n	800403a <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004024:	b2da      	uxtb	r2, r3
 8004026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004028:	1c59      	adds	r1, r3, #1
 800402a:	6379      	str	r1, [r7, #52]	@ 0x34
 800402c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004030:	b2d2      	uxtb	r2, r2
 8004032:	701a      	strb	r2, [r3, #0]
 8004034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004036:	09db      	lsrs	r3, r3, #7
 8004038:	633b      	str	r3, [r7, #48]	@ 0x30
 800403a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800403c:	2b7f      	cmp	r3, #127	@ 0x7f
 800403e:	d8f0      	bhi.n	8004022 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004042:	1c5a      	adds	r2, r3, #1
 8004044:	637a      	str	r2, [r7, #52]	@ 0x34
 8004046:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	701a      	strb	r2, [r3, #0]
 800404c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800404e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004050:	697b      	ldr	r3, [r7, #20]
 8004052:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004058:	e00b      	b.n	8004072 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 800405a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405c:	b2da      	uxtb	r2, r3
 800405e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004060:	1c59      	adds	r1, r3, #1
 8004062:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004064:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004068:	b2d2      	uxtb	r2, r2
 800406a:	701a      	strb	r2, [r3, #0]
 800406c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800406e:	09db      	lsrs	r3, r3, #7
 8004070:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004074:	2b7f      	cmp	r3, #127	@ 0x7f
 8004076:	d8f0      	bhi.n	800405a <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004078:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800407a:	1c5a      	adds	r2, r3, #1
 800407c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800407e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	701a      	strb	r2, [r3, #0]
 8004084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004086:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	627b      	str	r3, [r7, #36]	@ 0x24
 800408c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800408e:	623b      	str	r3, [r7, #32]
 8004090:	e00b      	b.n	80040aa <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	b2da      	uxtb	r2, r3
 8004096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004098:	1c59      	adds	r1, r3, #1
 800409a:	6279      	str	r1, [r7, #36]	@ 0x24
 800409c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	701a      	strb	r2, [r3, #0]
 80040a4:	6a3b      	ldr	r3, [r7, #32]
 80040a6:	09db      	lsrs	r3, r3, #7
 80040a8:	623b      	str	r3, [r7, #32]
 80040aa:	6a3b      	ldr	r3, [r7, #32]
 80040ac:	2b7f      	cmp	r3, #127	@ 0x7f
 80040ae:	d8f0      	bhi.n	8004092 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 80040b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040b2:	1c5a      	adds	r2, r3, #1
 80040b4:	627a      	str	r2, [r7, #36]	@ 0x24
 80040b6:	6a3a      	ldr	r2, [r7, #32]
 80040b8:	b2d2      	uxtb	r2, r2
 80040ba:	701a      	strb	r2, [r3, #0]
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	6979      	ldr	r1, [r7, #20]
 80040c4:	69b8      	ldr	r0, [r7, #24]
 80040c6:	f7ff fd03 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f383 8811 	msr	BASEPRI, r3
}
 80040d0:	bf00      	nop
 80040d2:	3740      	adds	r7, #64	@ 0x40
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}
 80040d8:	20003668 	.word	0x20003668

080040dc <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80040dc:	b580      	push	{r7, lr}
 80040de:	b08c      	sub	sp, #48	@ 0x30
 80040e0:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80040e2:	4b58      	ldr	r3, [pc, #352]	@ (8004244 <SEGGER_SYSVIEW_Start+0x168>)
 80040e4:	2201      	movs	r2, #1
 80040e6:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80040e8:	f3ef 8311 	mrs	r3, BASEPRI
 80040ec:	f04f 0120 	mov.w	r1, #32
 80040f0:	f381 8811 	msr	BASEPRI, r1
 80040f4:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80040f6:	4b53      	ldr	r3, [pc, #332]	@ (8004244 <SEGGER_SYSVIEW_Start+0x168>)
 80040f8:	785b      	ldrb	r3, [r3, #1]
 80040fa:	220a      	movs	r2, #10
 80040fc:	4952      	ldr	r1, [pc, #328]	@ (8004248 <SEGGER_SYSVIEW_Start+0x16c>)
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fa84 	bl	800360c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800410a:	200a      	movs	r0, #10
 800410c:	f7ff fea0 	bl	8003e50 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004110:	f3ef 8311 	mrs	r3, BASEPRI
 8004114:	f04f 0120 	mov.w	r1, #32
 8004118:	f381 8811 	msr	BASEPRI, r1
 800411c:	60bb      	str	r3, [r7, #8]
 800411e:	484b      	ldr	r0, [pc, #300]	@ (800424c <SEGGER_SYSVIEW_Start+0x170>)
 8004120:	f7ff fbeb 	bl	80038fa <_PreparePacket>
 8004124:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800412e:	4b45      	ldr	r3, [pc, #276]	@ (8004244 <SEGGER_SYSVIEW_Start+0x168>)
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004134:	e00b      	b.n	800414e <SEGGER_SYSVIEW_Start+0x72>
 8004136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004138:	b2da      	uxtb	r2, r3
 800413a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800413c:	1c59      	adds	r1, r3, #1
 800413e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004140:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	701a      	strb	r2, [r3, #0]
 8004148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800414a:	09db      	lsrs	r3, r3, #7
 800414c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800414e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004150:	2b7f      	cmp	r3, #127	@ 0x7f
 8004152:	d8f0      	bhi.n	8004136 <SEGGER_SYSVIEW_Start+0x5a>
 8004154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800415a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]
 8004160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004162:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	627b      	str	r3, [r7, #36]	@ 0x24
 8004168:	4b36      	ldr	r3, [pc, #216]	@ (8004244 <SEGGER_SYSVIEW_Start+0x168>)
 800416a:	689b      	ldr	r3, [r3, #8]
 800416c:	623b      	str	r3, [r7, #32]
 800416e:	e00b      	b.n	8004188 <SEGGER_SYSVIEW_Start+0xac>
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	b2da      	uxtb	r2, r3
 8004174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004176:	1c59      	adds	r1, r3, #1
 8004178:	6279      	str	r1, [r7, #36]	@ 0x24
 800417a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800417e:	b2d2      	uxtb	r2, r2
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	6a3b      	ldr	r3, [r7, #32]
 8004184:	09db      	lsrs	r3, r3, #7
 8004186:	623b      	str	r3, [r7, #32]
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	2b7f      	cmp	r3, #127	@ 0x7f
 800418c:	d8f0      	bhi.n	8004170 <SEGGER_SYSVIEW_Start+0x94>
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	1c5a      	adds	r2, r3, #1
 8004192:	627a      	str	r2, [r7, #36]	@ 0x24
 8004194:	6a3a      	ldr	r2, [r7, #32]
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	701a      	strb	r2, [r3, #0]
 800419a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800419c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	4b28      	ldr	r3, [pc, #160]	@ (8004244 <SEGGER_SYSVIEW_Start+0x168>)
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	61bb      	str	r3, [r7, #24]
 80041a8:	e00b      	b.n	80041c2 <SEGGER_SYSVIEW_Start+0xe6>
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	1c59      	adds	r1, r3, #1
 80041b2:	61f9      	str	r1, [r7, #28]
 80041b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80041b8:	b2d2      	uxtb	r2, r2
 80041ba:	701a      	strb	r2, [r3, #0]
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	09db      	lsrs	r3, r3, #7
 80041c0:	61bb      	str	r3, [r7, #24]
 80041c2:	69bb      	ldr	r3, [r7, #24]
 80041c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80041c6:	d8f0      	bhi.n	80041aa <SEGGER_SYSVIEW_Start+0xce>
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	61fa      	str	r2, [r7, #28]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	b2d2      	uxtb	r2, r2
 80041d2:	701a      	strb	r2, [r3, #0]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	617b      	str	r3, [r7, #20]
 80041dc:	2300      	movs	r3, #0
 80041de:	613b      	str	r3, [r7, #16]
 80041e0:	e00b      	b.n	80041fa <SEGGER_SYSVIEW_Start+0x11e>
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	1c59      	adds	r1, r3, #1
 80041ea:	6179      	str	r1, [r7, #20]
 80041ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80041f0:	b2d2      	uxtb	r2, r2
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	09db      	lsrs	r3, r3, #7
 80041f8:	613b      	str	r3, [r7, #16]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80041fe:	d8f0      	bhi.n	80041e2 <SEGGER_SYSVIEW_Start+0x106>
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	617a      	str	r2, [r7, #20]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8004210:	2218      	movs	r2, #24
 8004212:	6839      	ldr	r1, [r7, #0]
 8004214:	6878      	ldr	r0, [r7, #4]
 8004216:	f7ff fc5b 	bl	8003ad0 <_SendPacket>
      RECORD_END();
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8004220:	4b08      	ldr	r3, [pc, #32]	@ (8004244 <SEGGER_SYSVIEW_Start+0x168>)
 8004222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8004228:	4b06      	ldr	r3, [pc, #24]	@ (8004244 <SEGGER_SYSVIEW_Start+0x168>)
 800422a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422c:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800422e:	f000 f9eb 	bl	8004608 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8004232:	f000 f9b1 	bl	8004598 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8004236:	f000 fc8d 	bl	8004b54 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800423a:	bf00      	nop
 800423c:	3730      	adds	r7, #48	@ 0x30
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
 8004242:	bf00      	nop
 8004244:	20003638 	.word	0x20003638
 8004248:	08004e50 	.word	0x08004e50
 800424c:	20003668 	.word	0x20003668

08004250 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004256:	f3ef 8311 	mrs	r3, BASEPRI
 800425a:	f04f 0120 	mov.w	r1, #32
 800425e:	f381 8811 	msr	BASEPRI, r1
 8004262:	607b      	str	r3, [r7, #4]
 8004264:	480b      	ldr	r0, [pc, #44]	@ (8004294 <SEGGER_SYSVIEW_Stop+0x44>)
 8004266:	f7ff fb48 	bl	80038fa <_PreparePacket>
 800426a:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800426c:	4b0a      	ldr	r3, [pc, #40]	@ (8004298 <SEGGER_SYSVIEW_Stop+0x48>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d007      	beq.n	8004284 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8004274:	220b      	movs	r2, #11
 8004276:	6839      	ldr	r1, [r7, #0]
 8004278:	6838      	ldr	r0, [r7, #0]
 800427a:	f7ff fc29 	bl	8003ad0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800427e:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <SEGGER_SYSVIEW_Stop+0x48>)
 8004280:	2200      	movs	r2, #0
 8004282:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f383 8811 	msr	BASEPRI, r3
}
 800428a:	bf00      	nop
 800428c:	3708      	adds	r7, #8
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20003668 	.word	0x20003668
 8004298:	20003638 	.word	0x20003638

0800429c <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800429c:	b580      	push	{r7, lr}
 800429e:	b08c      	sub	sp, #48	@ 0x30
 80042a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80042a2:	f3ef 8311 	mrs	r3, BASEPRI
 80042a6:	f04f 0120 	mov.w	r1, #32
 80042aa:	f381 8811 	msr	BASEPRI, r1
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	4845      	ldr	r0, [pc, #276]	@ (80043c8 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80042b2:	f7ff fb22 	bl	80038fa <_PreparePacket>
 80042b6:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80042c0:	4b42      	ldr	r3, [pc, #264]	@ (80043cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042c6:	e00b      	b.n	80042e0 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80042c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ce:	1c59      	adds	r1, r3, #1
 80042d0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80042d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042dc:	09db      	lsrs	r3, r3, #7
 80042de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80042e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80042e4:	d8f0      	bhi.n	80042c8 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80042e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042e8:	1c5a      	adds	r2, r3, #1
 80042ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	701a      	strb	r2, [r3, #0]
 80042f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fa:	4b34      	ldr	r3, [pc, #208]	@ (80043cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	623b      	str	r3, [r7, #32]
 8004300:	e00b      	b.n	800431a <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8004302:	6a3b      	ldr	r3, [r7, #32]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004308:	1c59      	adds	r1, r3, #1
 800430a:	6279      	str	r1, [r7, #36]	@ 0x24
 800430c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	6a3b      	ldr	r3, [r7, #32]
 8004316:	09db      	lsrs	r3, r3, #7
 8004318:	623b      	str	r3, [r7, #32]
 800431a:	6a3b      	ldr	r3, [r7, #32]
 800431c:	2b7f      	cmp	r3, #127	@ 0x7f
 800431e:	d8f0      	bhi.n	8004302 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8004320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	627a      	str	r2, [r7, #36]	@ 0x24
 8004326:	6a3a      	ldr	r2, [r7, #32]
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800432e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	61fb      	str	r3, [r7, #28]
 8004334:	4b25      	ldr	r3, [pc, #148]	@ (80043cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e00b      	b.n	8004354 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	b2da      	uxtb	r2, r3
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	1c59      	adds	r1, r3, #1
 8004344:	61f9      	str	r1, [r7, #28]
 8004346:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800434a:	b2d2      	uxtb	r2, r2
 800434c:	701a      	strb	r2, [r3, #0]
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	09db      	lsrs	r3, r3, #7
 8004352:	61bb      	str	r3, [r7, #24]
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b7f      	cmp	r3, #127	@ 0x7f
 8004358:	d8f0      	bhi.n	800433c <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	61fa      	str	r2, [r7, #28]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	b2d2      	uxtb	r2, r2
 8004364:	701a      	strb	r2, [r3, #0]
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	2300      	movs	r3, #0
 8004370:	613b      	str	r3, [r7, #16]
 8004372:	e00b      	b.n	800438c <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	b2da      	uxtb	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	1c59      	adds	r1, r3, #1
 800437c:	6179      	str	r1, [r7, #20]
 800437e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	09db      	lsrs	r3, r3, #7
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004390:	d8f0      	bhi.n	8004374 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	1c5a      	adds	r2, r3, #1
 8004396:	617a      	str	r2, [r7, #20]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	b2d2      	uxtb	r2, r2
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80043a2:	2218      	movs	r2, #24
 80043a4:	6879      	ldr	r1, [r7, #4]
 80043a6:	68b8      	ldr	r0, [r7, #8]
 80043a8:	f7ff fb92 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80043b2:	4b06      	ldr	r3, [pc, #24]	@ (80043cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80043b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d002      	beq.n	80043c0 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80043ba:	4b04      	ldr	r3, [pc, #16]	@ (80043cc <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	4798      	blx	r3
  }
}
 80043c0:	bf00      	nop
 80043c2:	3730      	adds	r7, #48	@ 0x30
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}
 80043c8:	20003668 	.word	0x20003668
 80043cc:	20003638 	.word	0x20003638

080043d0 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b092      	sub	sp, #72	@ 0x48
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80043d8:	f3ef 8311 	mrs	r3, BASEPRI
 80043dc:	f04f 0120 	mov.w	r1, #32
 80043e0:	f381 8811 	msr	BASEPRI, r1
 80043e4:	617b      	str	r3, [r7, #20]
 80043e6:	486a      	ldr	r0, [pc, #424]	@ (8004590 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80043e8:	f7ff fa87 	bl	80038fa <_PreparePacket>
 80043ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	4b66      	ldr	r3, [pc, #408]	@ (8004594 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	1ad3      	subs	r3, r2, r3
 8004400:	643b      	str	r3, [r7, #64]	@ 0x40
 8004402:	e00b      	b.n	800441c <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8004404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004406:	b2da      	uxtb	r2, r3
 8004408:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800440a:	1c59      	adds	r1, r3, #1
 800440c:	6479      	str	r1, [r7, #68]	@ 0x44
 800440e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]
 8004416:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004418:	09db      	lsrs	r3, r3, #7
 800441a:	643b      	str	r3, [r7, #64]	@ 0x40
 800441c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800441e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004420:	d8f0      	bhi.n	8004404 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8004422:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	647a      	str	r2, [r7, #68]	@ 0x44
 8004428:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800442a:	b2d2      	uxtb	r2, r2
 800442c:	701a      	strb	r2, [r3, #0]
 800442e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004430:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800443c:	e00b      	b.n	8004456 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800443e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004440:	b2da      	uxtb	r2, r3
 8004442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004444:	1c59      	adds	r1, r3, #1
 8004446:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004448:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800444c:	b2d2      	uxtb	r2, r2
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004452:	09db      	lsrs	r3, r3, #7
 8004454:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004458:	2b7f      	cmp	r3, #127	@ 0x7f
 800445a:	d8f0      	bhi.n	800443e <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800445c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004462:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800446a:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2220      	movs	r2, #32
 8004472:	4619      	mov	r1, r3
 8004474:	68f8      	ldr	r0, [r7, #12]
 8004476:	f7ff fa11 	bl	800389c <_EncodeStr>
 800447a:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800447c:	2209      	movs	r2, #9
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	6938      	ldr	r0, [r7, #16]
 8004482:	f7ff fb25 	bl	8003ad0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	637b      	str	r3, [r7, #52]	@ 0x34
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	4b40      	ldr	r3, [pc, #256]	@ (8004594 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	633b      	str	r3, [r7, #48]	@ 0x30
 800449a:	e00b      	b.n	80044b4 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800449c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044a2:	1c59      	adds	r1, r3, #1
 80044a4:	6379      	str	r1, [r7, #52]	@ 0x34
 80044a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b0:	09db      	lsrs	r3, r3, #7
 80044b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80044b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b6:	2b7f      	cmp	r3, #127	@ 0x7f
 80044b8:	d8f0      	bhi.n	800449c <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80044ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	637a      	str	r2, [r7, #52]	@ 0x34
 80044c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044c8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044d4:	e00b      	b.n	80044ee <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80044d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d8:	b2da      	uxtb	r2, r3
 80044da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044dc:	1c59      	adds	r1, r3, #1
 80044de:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80044e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]
 80044e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044ea:	09db      	lsrs	r3, r3, #7
 80044ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80044f2:	d8f0      	bhi.n	80044d6 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80044f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f6:	1c5a      	adds	r2, r3, #1
 80044f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80044fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]
 8004500:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004502:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	623b      	str	r3, [r7, #32]
 800450e:	e00b      	b.n	8004528 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8004510:	6a3b      	ldr	r3, [r7, #32]
 8004512:	b2da      	uxtb	r2, r3
 8004514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004516:	1c59      	adds	r1, r3, #1
 8004518:	6279      	str	r1, [r7, #36]	@ 0x24
 800451a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	701a      	strb	r2, [r3, #0]
 8004522:	6a3b      	ldr	r3, [r7, #32]
 8004524:	09db      	lsrs	r3, r3, #7
 8004526:	623b      	str	r3, [r7, #32]
 8004528:	6a3b      	ldr	r3, [r7, #32]
 800452a:	2b7f      	cmp	r3, #127	@ 0x7f
 800452c:	d8f0      	bhi.n	8004510 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800452e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	627a      	str	r2, [r7, #36]	@ 0x24
 8004534:	6a3a      	ldr	r2, [r7, #32]
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]
 800453a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800453c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	e00b      	b.n	8004560 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	b2da      	uxtb	r2, r3
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	1c59      	adds	r1, r3, #1
 8004550:	61f9      	str	r1, [r7, #28]
 8004552:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	09db      	lsrs	r3, r3, #7
 800455e:	61bb      	str	r3, [r7, #24]
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b7f      	cmp	r3, #127	@ 0x7f
 8004564:	d8f0      	bhi.n	8004548 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	61fa      	str	r2, [r7, #28]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004576:	2215      	movs	r2, #21
 8004578:	68f9      	ldr	r1, [r7, #12]
 800457a:	6938      	ldr	r0, [r7, #16]
 800457c:	f7ff faa8 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	f383 8811 	msr	BASEPRI, r3
}
 8004586:	bf00      	nop
 8004588:	3748      	adds	r7, #72	@ 0x48
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	20003668 	.word	0x20003668
 8004594:	20003638 	.word	0x20003638

08004598 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800459c:	4b07      	ldr	r3, [pc, #28]	@ (80045bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d008      	beq.n	80045b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80045a4:	4b05      	ldr	r3, [pc, #20]	@ (80045bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80045ae:	4b03      	ldr	r3, [pc, #12]	@ (80045bc <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	4798      	blx	r3
  }
}
 80045b6:	bf00      	nop
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	bf00      	nop
 80045bc:	20003638 	.word	0x20003638

080045c0 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80045c8:	f3ef 8311 	mrs	r3, BASEPRI
 80045cc:	f04f 0120 	mov.w	r1, #32
 80045d0:	f381 8811 	msr	BASEPRI, r1
 80045d4:	617b      	str	r3, [r7, #20]
 80045d6:	480b      	ldr	r0, [pc, #44]	@ (8004604 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80045d8:	f7ff f98f 	bl	80038fa <_PreparePacket>
 80045dc:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80045de:	2280      	movs	r2, #128	@ 0x80
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	6938      	ldr	r0, [r7, #16]
 80045e4:	f7ff f95a 	bl	800389c <_EncodeStr>
 80045e8:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80045ea:	220e      	movs	r2, #14
 80045ec:	68f9      	ldr	r1, [r7, #12]
 80045ee:	6938      	ldr	r0, [r7, #16]
 80045f0:	f7ff fa6e 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f383 8811 	msr	BASEPRI, r3
}
 80045fa:	bf00      	nop
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	20003668 	.word	0x20003668

08004608 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004608:	b590      	push	{r4, r7, lr}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800460e:	4b15      	ldr	r3, [pc, #84]	@ (8004664 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d01a      	beq.n	800464c <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004616:	4b13      	ldr	r3, [pc, #76]	@ (8004664 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d015      	beq.n	800464c <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8004620:	4b10      	ldr	r3, [pc, #64]	@ (8004664 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004622:	6a1b      	ldr	r3, [r3, #32]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4798      	blx	r3
 8004628:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800462c:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800462e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	f04f 0300 	mov.w	r3, #0
 800463a:	000a      	movs	r2, r1
 800463c:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800463e:	4613      	mov	r3, r2
 8004640:	461a      	mov	r2, r3
 8004642:	4621      	mov	r1, r4
 8004644:	200d      	movs	r0, #13
 8004646:	f7ff fc5d 	bl	8003f04 <SEGGER_SYSVIEW_RecordU32x2>
 800464a:	e006      	b.n	800465a <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800464c:	4b06      	ldr	r3, [pc, #24]	@ (8004668 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4619      	mov	r1, r3
 8004652:	200c      	movs	r0, #12
 8004654:	f7ff fc1a 	bl	8003e8c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004658:	bf00      	nop
 800465a:	bf00      	nop
 800465c:	370c      	adds	r7, #12
 800465e:	46bd      	mov	sp, r7
 8004660:	bd90      	pop	{r4, r7, pc}
 8004662:	bf00      	nop
 8004664:	20003638 	.word	0x20003638
 8004668:	e0001004 	.word	0xe0001004

0800466c <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b086      	sub	sp, #24
 8004670:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004672:	f3ef 8311 	mrs	r3, BASEPRI
 8004676:	f04f 0120 	mov.w	r1, #32
 800467a:	f381 8811 	msr	BASEPRI, r1
 800467e:	60fb      	str	r3, [r7, #12]
 8004680:	4819      	ldr	r0, [pc, #100]	@ (80046e8 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8004682:	f7ff f93a 	bl	80038fa <_PreparePacket>
 8004686:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 800468c:	4b17      	ldr	r3, [pc, #92]	@ (80046ec <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004694:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	613b      	str	r3, [r7, #16]
 800469e:	e00b      	b.n	80046b8 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	6179      	str	r1, [r7, #20]
 80046aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	701a      	strb	r2, [r3, #0]
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	09db      	lsrs	r3, r3, #7
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80046bc:	d8f0      	bhi.n	80046a0 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	617a      	str	r2, [r7, #20]
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80046ce:	2202      	movs	r2, #2
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	68b8      	ldr	r0, [r7, #8]
 80046d4:	f7ff f9fc 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f383 8811 	msr	BASEPRI, r3
}
 80046de:	bf00      	nop
 80046e0:	3718      	adds	r7, #24
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	20003668 	.word	0x20003668
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80046f6:	f3ef 8311 	mrs	r3, BASEPRI
 80046fa:	f04f 0120 	mov.w	r1, #32
 80046fe:	f381 8811 	msr	BASEPRI, r1
 8004702:	607b      	str	r3, [r7, #4]
 8004704:	4807      	ldr	r0, [pc, #28]	@ (8004724 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004706:	f7ff f8f8 	bl	80038fa <_PreparePacket>
 800470a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 800470c:	2203      	movs	r2, #3
 800470e:	6839      	ldr	r1, [r7, #0]
 8004710:	6838      	ldr	r0, [r7, #0]
 8004712:	f7ff f9dd 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f383 8811 	msr	BASEPRI, r3
}
 800471c:	bf00      	nop
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20003668 	.word	0x20003668

08004728 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800472e:	f3ef 8311 	mrs	r3, BASEPRI
 8004732:	f04f 0120 	mov.w	r1, #32
 8004736:	f381 8811 	msr	BASEPRI, r1
 800473a:	607b      	str	r3, [r7, #4]
 800473c:	4807      	ldr	r0, [pc, #28]	@ (800475c <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800473e:	f7ff f8dc 	bl	80038fa <_PreparePacket>
 8004742:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004744:	2212      	movs	r2, #18
 8004746:	6839      	ldr	r1, [r7, #0]
 8004748:	6838      	ldr	r0, [r7, #0]
 800474a:	f7ff f9c1 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f383 8811 	msr	BASEPRI, r3
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20003668 	.word	0x20003668

08004760 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004766:	f3ef 8311 	mrs	r3, BASEPRI
 800476a:	f04f 0120 	mov.w	r1, #32
 800476e:	f381 8811 	msr	BASEPRI, r1
 8004772:	607b      	str	r3, [r7, #4]
 8004774:	4807      	ldr	r0, [pc, #28]	@ (8004794 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004776:	f7ff f8c0 	bl	80038fa <_PreparePacket>
 800477a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800477c:	2211      	movs	r2, #17
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	6838      	ldr	r0, [r7, #0]
 8004782:	f7ff f9a5 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f383 8811 	msr	BASEPRI, r3
}
 800478c:	bf00      	nop
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}
 8004794:	20003668 	.word	0x20003668

08004798 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80047a0:	f3ef 8311 	mrs	r3, BASEPRI
 80047a4:	f04f 0120 	mov.w	r1, #32
 80047a8:	f381 8811 	msr	BASEPRI, r1
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	4819      	ldr	r0, [pc, #100]	@ (8004814 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80047b0:	f7ff f8a3 	bl	80038fa <_PreparePacket>
 80047b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80047ba:	4b17      	ldr	r3, [pc, #92]	@ (8004818 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	1ad3      	subs	r3, r2, r3
 80047c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	61fb      	str	r3, [r7, #28]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	61bb      	str	r3, [r7, #24]
 80047cc:	e00b      	b.n	80047e6 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	b2da      	uxtb	r2, r3
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	1c59      	adds	r1, r3, #1
 80047d6:	61f9      	str	r1, [r7, #28]
 80047d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80047dc:	b2d2      	uxtb	r2, r2
 80047de:	701a      	strb	r2, [r3, #0]
 80047e0:	69bb      	ldr	r3, [r7, #24]
 80047e2:	09db      	lsrs	r3, r3, #7
 80047e4:	61bb      	str	r3, [r7, #24]
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80047ea:	d8f0      	bhi.n	80047ce <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	1c5a      	adds	r2, r3, #1
 80047f0:	61fa      	str	r2, [r7, #28]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	b2d2      	uxtb	r2, r2
 80047f6:	701a      	strb	r2, [r3, #0]
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80047fc:	2208      	movs	r2, #8
 80047fe:	68f9      	ldr	r1, [r7, #12]
 8004800:	6938      	ldr	r0, [r7, #16]
 8004802:	f7ff f965 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	f383 8811 	msr	BASEPRI, r3
}
 800480c:	bf00      	nop
 800480e:	3720      	adds	r7, #32
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	20003668 	.word	0x20003668
 8004818:	20003638 	.word	0x20003638

0800481c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004824:	f3ef 8311 	mrs	r3, BASEPRI
 8004828:	f04f 0120 	mov.w	r1, #32
 800482c:	f381 8811 	msr	BASEPRI, r1
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	4819      	ldr	r0, [pc, #100]	@ (8004898 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004834:	f7ff f861 	bl	80038fa <_PreparePacket>
 8004838:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800483e:	4b17      	ldr	r3, [pc, #92]	@ (800489c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	61fb      	str	r3, [r7, #28]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	61bb      	str	r3, [r7, #24]
 8004850:	e00b      	b.n	800486a <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	b2da      	uxtb	r2, r3
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	1c59      	adds	r1, r3, #1
 800485a:	61f9      	str	r1, [r7, #28]
 800485c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	09db      	lsrs	r3, r3, #7
 8004868:	61bb      	str	r3, [r7, #24]
 800486a:	69bb      	ldr	r3, [r7, #24]
 800486c:	2b7f      	cmp	r3, #127	@ 0x7f
 800486e:	d8f0      	bhi.n	8004852 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	1c5a      	adds	r2, r3, #1
 8004874:	61fa      	str	r2, [r7, #28]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	b2d2      	uxtb	r2, r2
 800487a:	701a      	strb	r2, [r3, #0]
 800487c:	69fb      	ldr	r3, [r7, #28]
 800487e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8004880:	2204      	movs	r2, #4
 8004882:	68f9      	ldr	r1, [r7, #12]
 8004884:	6938      	ldr	r0, [r7, #16]
 8004886:	f7ff f923 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f383 8811 	msr	BASEPRI, r3
}
 8004890:	bf00      	nop
 8004892:	3720      	adds	r7, #32
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20003668 	.word	0x20003668
 800489c:	20003638 	.word	0x20003638

080048a0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80048a8:	f3ef 8311 	mrs	r3, BASEPRI
 80048ac:	f04f 0120 	mov.w	r1, #32
 80048b0:	f381 8811 	msr	BASEPRI, r1
 80048b4:	617b      	str	r3, [r7, #20]
 80048b6:	4819      	ldr	r0, [pc, #100]	@ (800491c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80048b8:	f7ff f81f 	bl	80038fa <_PreparePacket>
 80048bc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80048c2:	4b17      	ldr	r3, [pc, #92]	@ (8004920 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80048c4:	691b      	ldr	r3, [r3, #16]
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	61fb      	str	r3, [r7, #28]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	61bb      	str	r3, [r7, #24]
 80048d4:	e00b      	b.n	80048ee <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80048d6:	69bb      	ldr	r3, [r7, #24]
 80048d8:	b2da      	uxtb	r2, r3
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	1c59      	adds	r1, r3, #1
 80048de:	61f9      	str	r1, [r7, #28]
 80048e0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80048e4:	b2d2      	uxtb	r2, r2
 80048e6:	701a      	strb	r2, [r3, #0]
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	09db      	lsrs	r3, r3, #7
 80048ec:	61bb      	str	r3, [r7, #24]
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	2b7f      	cmp	r3, #127	@ 0x7f
 80048f2:	d8f0      	bhi.n	80048d6 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	61fa      	str	r2, [r7, #28]
 80048fa:	69ba      	ldr	r2, [r7, #24]
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004904:	2206      	movs	r2, #6
 8004906:	68f9      	ldr	r1, [r7, #12]
 8004908:	6938      	ldr	r0, [r7, #16]
 800490a:	f7ff f8e1 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f383 8811 	msr	BASEPRI, r3
}
 8004914:	bf00      	nop
 8004916:	3720      	adds	r7, #32
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	20003668 	.word	0x20003668
 8004920:	20003638 	.word	0x20003638

08004924 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	@ 0x28
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800492e:	f3ef 8311 	mrs	r3, BASEPRI
 8004932:	f04f 0120 	mov.w	r1, #32
 8004936:	f381 8811 	msr	BASEPRI, r1
 800493a:	617b      	str	r3, [r7, #20]
 800493c:	4827      	ldr	r0, [pc, #156]	@ (80049dc <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 800493e:	f7fe ffdc 	bl	80038fa <_PreparePacket>
 8004942:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004948:	4b25      	ldr	r3, [pc, #148]	@ (80049e0 <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	623b      	str	r3, [r7, #32]
 800495a:	e00b      	b.n	8004974 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 800495c:	6a3b      	ldr	r3, [r7, #32]
 800495e:	b2da      	uxtb	r2, r3
 8004960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004962:	1c59      	adds	r1, r3, #1
 8004964:	6279      	str	r1, [r7, #36]	@ 0x24
 8004966:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800496a:	b2d2      	uxtb	r2, r2
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	09db      	lsrs	r3, r3, #7
 8004972:	623b      	str	r3, [r7, #32]
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	2b7f      	cmp	r3, #127	@ 0x7f
 8004978:	d8f0      	bhi.n	800495c <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 800497a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	627a      	str	r2, [r7, #36]	@ 0x24
 8004980:	6a3a      	ldr	r2, [r7, #32]
 8004982:	b2d2      	uxtb	r2, r2
 8004984:	701a      	strb	r2, [r3, #0]
 8004986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004988:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	61fb      	str	r3, [r7, #28]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e00b      	b.n	80049ac <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	b2da      	uxtb	r2, r3
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	1c59      	adds	r1, r3, #1
 800499c:	61f9      	str	r1, [r7, #28]
 800499e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049a2:	b2d2      	uxtb	r2, r2
 80049a4:	701a      	strb	r2, [r3, #0]
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	09db      	lsrs	r3, r3, #7
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80049b0:	d8f0      	bhi.n	8004994 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	61fa      	str	r2, [r7, #28]
 80049b8:	69ba      	ldr	r2, [r7, #24]
 80049ba:	b2d2      	uxtb	r2, r2
 80049bc:	701a      	strb	r2, [r3, #0]
 80049be:	69fb      	ldr	r3, [r7, #28]
 80049c0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 80049c2:	2207      	movs	r2, #7
 80049c4:	68f9      	ldr	r1, [r7, #12]
 80049c6:	6938      	ldr	r0, [r7, #16]
 80049c8:	f7ff f882 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	f383 8811 	msr	BASEPRI, r3
}
 80049d2:	bf00      	nop
 80049d4:	3728      	adds	r7, #40	@ 0x28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20003668 	.word	0x20003668
 80049e0:	20003638 	.word	0x20003638

080049e4 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 80049ec:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	1ad3      	subs	r3, r2, r3
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	370c      	adds	r7, #12
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20003638 	.word	0x20003638

08004a04 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08c      	sub	sp, #48	@ 0x30
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8004a0e:	4b40      	ldr	r3, [pc, #256]	@ (8004b10 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d077      	beq.n	8004b06 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004a16:	4b3e      	ldr	r3, [pc, #248]	@ (8004b10 <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a20:	e008      	b.n	8004a34 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8004a22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d007      	beq.n	8004a3e <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8004a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a30:	3301      	adds	r3, #1
 8004a32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a34:	79fb      	ldrb	r3, [r7, #7]
 8004a36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d3f2      	bcc.n	8004a22 <SEGGER_SYSVIEW_SendModule+0x1e>
 8004a3c:	e000      	b.n	8004a40 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8004a3e:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8004a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d055      	beq.n	8004af2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004a46:	f3ef 8311 	mrs	r3, BASEPRI
 8004a4a:	f04f 0120 	mov.w	r1, #32
 8004a4e:	f381 8811 	msr	BASEPRI, r1
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	482f      	ldr	r0, [pc, #188]	@ (8004b14 <SEGGER_SYSVIEW_SendModule+0x110>)
 8004a56:	f7fe ff50 	bl	80038fa <_PreparePacket>
 8004a5a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a64:	79fb      	ldrb	r3, [r7, #7]
 8004a66:	623b      	str	r3, [r7, #32]
 8004a68:	e00b      	b.n	8004a82 <SEGGER_SYSVIEW_SendModule+0x7e>
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	1c59      	adds	r1, r3, #1
 8004a72:	6279      	str	r1, [r7, #36]	@ 0x24
 8004a74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a78:	b2d2      	uxtb	r2, r2
 8004a7a:	701a      	strb	r2, [r3, #0]
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	09db      	lsrs	r3, r3, #7
 8004a80:	623b      	str	r3, [r7, #32]
 8004a82:	6a3b      	ldr	r3, [r7, #32]
 8004a84:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a86:	d8f0      	bhi.n	8004a6a <SEGGER_SYSVIEW_SendModule+0x66>
 8004a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a8e:	6a3a      	ldr	r2, [r7, #32]
 8004a90:	b2d2      	uxtb	r2, r2
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a96:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	61fb      	str	r3, [r7, #28]
 8004a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	61bb      	str	r3, [r7, #24]
 8004aa2:	e00b      	b.n	8004abc <SEGGER_SYSVIEW_SendModule+0xb8>
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	1c59      	adds	r1, r3, #1
 8004aac:	61f9      	str	r1, [r7, #28]
 8004aae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004ab2:	b2d2      	uxtb	r2, r2
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	09db      	lsrs	r3, r3, #7
 8004aba:	61bb      	str	r3, [r7, #24]
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ac0:	d8f0      	bhi.n	8004aa4 <SEGGER_SYSVIEW_SendModule+0xa0>
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	61fa      	str	r2, [r7, #28]
 8004ac8:	69ba      	ldr	r2, [r7, #24]
 8004aca:	b2d2      	uxtb	r2, r2
 8004acc:	701a      	strb	r2, [r3, #0]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2280      	movs	r2, #128	@ 0x80
 8004ad8:	4619      	mov	r1, r3
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7fe fede 	bl	800389c <_EncodeStr>
 8004ae0:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8004ae2:	2216      	movs	r2, #22
 8004ae4:	68f9      	ldr	r1, [r7, #12]
 8004ae6:	6938      	ldr	r0, [r7, #16]
 8004ae8:	f7fe fff2 	bl	8003ad0 <_SendPacket>
      RECORD_END();
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 8004af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d006      	beq.n	8004b06 <SEGGER_SYSVIEW_SendModule+0x102>
 8004af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 8004b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	4798      	blx	r3
    }
  }
}
 8004b06:	bf00      	nop
 8004b08:	3730      	adds	r7, #48	@ 0x30
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	20003660 	.word	0x20003660
 8004b14:	20003668 	.word	0x20003668

08004b18 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b50 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00f      	beq.n	8004b46 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004b26:	4b0a      	ldr	r3, [pc, #40]	@ (8004b50 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	691b      	ldr	r3, [r3, #16]
 8004b3e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f2      	bne.n	8004b2c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	20003660 	.word	0x20003660

08004b54 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004b5a:	f3ef 8311 	mrs	r3, BASEPRI
 8004b5e:	f04f 0120 	mov.w	r1, #32
 8004b62:	f381 8811 	msr	BASEPRI, r1
 8004b66:	60fb      	str	r3, [r7, #12]
 8004b68:	4817      	ldr	r0, [pc, #92]	@ (8004bc8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004b6a:	f7fe fec6 	bl	80038fa <_PreparePacket>
 8004b6e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	4b14      	ldr	r3, [pc, #80]	@ (8004bcc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	613b      	str	r3, [r7, #16]
 8004b7e:	e00b      	b.n	8004b98 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	b2da      	uxtb	r2, r3
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	1c59      	adds	r1, r3, #1
 8004b88:	6179      	str	r1, [r7, #20]
 8004b8a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004b8e:	b2d2      	uxtb	r2, r2
 8004b90:	701a      	strb	r2, [r3, #0]
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	09db      	lsrs	r3, r3, #7
 8004b96:	613b      	str	r3, [r7, #16]
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b9c:	d8f0      	bhi.n	8004b80 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	617a      	str	r2, [r7, #20]
 8004ba4:	693a      	ldr	r2, [r7, #16]
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8004bae:	221b      	movs	r2, #27
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	68b8      	ldr	r0, [r7, #8]
 8004bb4:	f7fe ff8c 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f383 8811 	msr	BASEPRI, r3
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20003668 	.word	0x20003668
 8004bcc:	20003664 	.word	0x20003664

08004bd0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b08a      	sub	sp, #40	@ 0x28
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bd8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bdc:	f04f 0120 	mov.w	r1, #32
 8004be0:	f381 8811 	msr	BASEPRI, r1
 8004be4:	617b      	str	r3, [r7, #20]
 8004be6:	4827      	ldr	r0, [pc, #156]	@ (8004c84 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004be8:	f7fe fe87 	bl	80038fa <_PreparePacket>
 8004bec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004bee:	2280      	movs	r2, #128	@ 0x80
 8004bf0:	6879      	ldr	r1, [r7, #4]
 8004bf2:	6938      	ldr	r0, [r7, #16]
 8004bf4:	f7fe fe52 	bl	800389c <_EncodeStr>
 8004bf8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bfe:	2301      	movs	r3, #1
 8004c00:	623b      	str	r3, [r7, #32]
 8004c02:	e00b      	b.n	8004c1c <SEGGER_SYSVIEW_Warn+0x4c>
 8004c04:	6a3b      	ldr	r3, [r7, #32]
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0a:	1c59      	adds	r1, r3, #1
 8004c0c:	6279      	str	r1, [r7, #36]	@ 0x24
 8004c0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c12:	b2d2      	uxtb	r2, r2
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	6a3b      	ldr	r3, [r7, #32]
 8004c18:	09db      	lsrs	r3, r3, #7
 8004c1a:	623b      	str	r3, [r7, #32]
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c20:	d8f0      	bhi.n	8004c04 <SEGGER_SYSVIEW_Warn+0x34>
 8004c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c24:	1c5a      	adds	r2, r3, #1
 8004c26:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c28:	6a3a      	ldr	r2, [r7, #32]
 8004c2a:	b2d2      	uxtb	r2, r2
 8004c2c:	701a      	strb	r2, [r3, #0]
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	61fb      	str	r3, [r7, #28]
 8004c36:	2300      	movs	r3, #0
 8004c38:	61bb      	str	r3, [r7, #24]
 8004c3a:	e00b      	b.n	8004c54 <SEGGER_SYSVIEW_Warn+0x84>
 8004c3c:	69bb      	ldr	r3, [r7, #24]
 8004c3e:	b2da      	uxtb	r2, r3
 8004c40:	69fb      	ldr	r3, [r7, #28]
 8004c42:	1c59      	adds	r1, r3, #1
 8004c44:	61f9      	str	r1, [r7, #28]
 8004c46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004c4a:	b2d2      	uxtb	r2, r2
 8004c4c:	701a      	strb	r2, [r3, #0]
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	09db      	lsrs	r3, r3, #7
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2b7f      	cmp	r3, #127	@ 0x7f
 8004c58:	d8f0      	bhi.n	8004c3c <SEGGER_SYSVIEW_Warn+0x6c>
 8004c5a:	69fb      	ldr	r3, [r7, #28]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	61fa      	str	r2, [r7, #28]
 8004c60:	69ba      	ldr	r2, [r7, #24]
 8004c62:	b2d2      	uxtb	r2, r2
 8004c64:	701a      	strb	r2, [r3, #0]
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004c6a:	221a      	movs	r2, #26
 8004c6c:	68f9      	ldr	r1, [r7, #12]
 8004c6e:	6938      	ldr	r0, [r7, #16]
 8004c70:	f7fe ff2e 	bl	8003ad0 <_SendPacket>
  RECORD_END();
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	f383 8811 	msr	BASEPRI, r3
}
 8004c7a:	bf00      	nop
 8004c7c:	3728      	adds	r7, #40	@ 0x28
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	20003668 	.word	0x20003668

08004c88 <memcmp>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	3901      	subs	r1, #1
 8004c8c:	4402      	add	r2, r0
 8004c8e:	4290      	cmp	r0, r2
 8004c90:	d101      	bne.n	8004c96 <memcmp+0xe>
 8004c92:	2000      	movs	r0, #0
 8004c94:	e005      	b.n	8004ca2 <memcmp+0x1a>
 8004c96:	7803      	ldrb	r3, [r0, #0]
 8004c98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004c9c:	42a3      	cmp	r3, r4
 8004c9e:	d001      	beq.n	8004ca4 <memcmp+0x1c>
 8004ca0:	1b18      	subs	r0, r3, r4
 8004ca2:	bd10      	pop	{r4, pc}
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	e7f2      	b.n	8004c8e <memcmp+0x6>

08004ca8 <memset>:
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4402      	add	r2, r0
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d100      	bne.n	8004cb2 <memset+0xa>
 8004cb0:	4770      	bx	lr
 8004cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cb6:	e7f9      	b.n	8004cac <memset+0x4>

08004cb8 <__libc_init_array>:
 8004cb8:	b570      	push	{r4, r5, r6, lr}
 8004cba:	2600      	movs	r6, #0
 8004cbc:	4d0c      	ldr	r5, [pc, #48]	@ (8004cf0 <__libc_init_array+0x38>)
 8004cbe:	4c0d      	ldr	r4, [pc, #52]	@ (8004cf4 <__libc_init_array+0x3c>)
 8004cc0:	1b64      	subs	r4, r4, r5
 8004cc2:	10a4      	asrs	r4, r4, #2
 8004cc4:	42a6      	cmp	r6, r4
 8004cc6:	d109      	bne.n	8004cdc <__libc_init_array+0x24>
 8004cc8:	f000 f828 	bl	8004d1c <_init>
 8004ccc:	2600      	movs	r6, #0
 8004cce:	4d0a      	ldr	r5, [pc, #40]	@ (8004cf8 <__libc_init_array+0x40>)
 8004cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8004cfc <__libc_init_array+0x44>)
 8004cd2:	1b64      	subs	r4, r4, r5
 8004cd4:	10a4      	asrs	r4, r4, #2
 8004cd6:	42a6      	cmp	r6, r4
 8004cd8:	d105      	bne.n	8004ce6 <__libc_init_array+0x2e>
 8004cda:	bd70      	pop	{r4, r5, r6, pc}
 8004cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce0:	4798      	blx	r3
 8004ce2:	3601      	adds	r6, #1
 8004ce4:	e7ee      	b.n	8004cc4 <__libc_init_array+0xc>
 8004ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cea:	4798      	blx	r3
 8004cec:	3601      	adds	r6, #1
 8004cee:	e7f2      	b.n	8004cd6 <__libc_init_array+0x1e>
 8004cf0:	08004e5c 	.word	0x08004e5c
 8004cf4:	08004e5c 	.word	0x08004e5c
 8004cf8:	08004e5c 	.word	0x08004e5c
 8004cfc:	08004e60 	.word	0x08004e60

08004d00 <memcpy>:
 8004d00:	440a      	add	r2, r1
 8004d02:	4291      	cmp	r1, r2
 8004d04:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d08:	d100      	bne.n	8004d0c <memcpy+0xc>
 8004d0a:	4770      	bx	lr
 8004d0c:	b510      	push	{r4, lr}
 8004d0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d12:	4291      	cmp	r1, r2
 8004d14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d18:	d1f9      	bne.n	8004d0e <memcpy+0xe>
 8004d1a:	bd10      	pop	{r4, pc}

08004d1c <_init>:
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	bf00      	nop
 8004d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d22:	bc08      	pop	{r3}
 8004d24:	469e      	mov	lr, r3
 8004d26:	4770      	bx	lr

08004d28 <_fini>:
 8004d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d2a:	bf00      	nop
 8004d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d2e:	bc08      	pop	{r3}
 8004d30:	469e      	mov	lr, r3
 8004d32:	4770      	bx	lr
