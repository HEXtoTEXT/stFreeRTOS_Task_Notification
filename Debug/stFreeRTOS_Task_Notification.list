
stFreeRTOS_Task_Notification.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004570  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004680  08004680  00005680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047a8  080047a8  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080047a8  080047a8  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047a8  080047a8  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a8  080047a8  000057a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047ac  080047ac  000057ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080047b0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000373c  20000010  080047c0  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000374c  080047c0  0000674c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff72  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002650  00000000  00000000  00015fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00018600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc6  00000000  00000000  00019538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bc9  00000000  00000000  0001a0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001240e  00000000  00000000  00032cc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8cd  00000000  00000000  000450d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d49a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed0  00000000  00000000  000d49e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d88b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	08004668 	.word	0x08004668

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	08004668 	.word	0x08004668

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	f003 0307 	and.w	r3, r3, #7
 800018e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000190:	4b0c      	ldr	r3, [pc, #48]	@ (80001c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000192:	68db      	ldr	r3, [r3, #12]
 8000194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000196:	68ba      	ldr	r2, [r7, #8]
 8000198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800019c:	4013      	ands	r3, r2
 800019e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80001ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001b2:	4a04      	ldr	r2, [pc, #16]	@ (80001c4 <__NVIC_SetPriorityGrouping+0x44>)
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	60d3      	str	r3, [r2, #12]
}
 80001b8:	bf00      	nop
 80001ba:	3714      	adds	r7, #20
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	e000ed00 	.word	0xe000ed00

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  DWT->CTRL |= (1 << DWT_CTRL_CYCCNTENA_Pos); //TODO : It is for SEGGER Sysview.
 80001ce:	4b18      	ldr	r3, [pc, #96]	@ (8000230 <main+0x68>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a17      	ldr	r2, [pc, #92]	@ (8000230 <main+0x68>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fafd 	bl	80007d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f835 	bl	800024c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 80001e2:	f000 f879 	bl	80002d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001e6:	f000 f91d 	bl	8000424 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80001ea:	f000 f985 	bl	80004f8 <MX_SPI1_Init>
  MX_SPI2_Init();
 80001ee:	f000 f9eb 	bl	80005c8 <MX_SPI2_Init>
//  huart1.Instance->DR = 'A';

  NVIC_SetPriorityGrouping( 0 );
 80001f2:	2000      	movs	r0, #0
 80001f4:	f7ff ffc4 	bl	8000180 <__NVIC_SetPriorityGrouping>

  SEGGER_SYSVIEW_Conf();
 80001f8:	f002 fda6 	bl	8002d48 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80001fc:	f003 fc84 	bl	8003b08 <SEGGER_SYSVIEW_Start>

  xTaskCreate(taskUsart1, "USART1", configMINIMAL_STACK_SIZE, NULL, 2, &taskUsartHandle1);
 8000200:	4b0c      	ldr	r3, [pc, #48]	@ (8000234 <main+0x6c>)
 8000202:	9301      	str	r3, [sp, #4]
 8000204:	2302      	movs	r3, #2
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2300      	movs	r3, #0
 800020a:	2280      	movs	r2, #128	@ 0x80
 800020c:	490a      	ldr	r1, [pc, #40]	@ (8000238 <main+0x70>)
 800020e:	480b      	ldr	r0, [pc, #44]	@ (800023c <main+0x74>)
 8000210:	f001 fd1e 	bl	8001c50 <xTaskCreate>
  xTaskCreate(taskFunc2, "TASK2", configMINIMAL_STACK_SIZE, NULL, 2, &taskHandle2);
 8000214:	4b0a      	ldr	r3, [pc, #40]	@ (8000240 <main+0x78>)
 8000216:	9301      	str	r3, [sp, #4]
 8000218:	2302      	movs	r3, #2
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2300      	movs	r3, #0
 800021e:	2280      	movs	r2, #128	@ 0x80
 8000220:	4908      	ldr	r1, [pc, #32]	@ (8000244 <main+0x7c>)
 8000222:	4809      	ldr	r0, [pc, #36]	@ (8000248 <main+0x80>)
 8000224:	f001 fd14 	bl	8001c50 <xTaskCreate>

  vTaskStartScheduler();
 8000228:	f001 fe60 	bl	8001eec <vTaskStartScheduler>
  /* USER CODE END 2 */

  while (1)
 800022c:	bf00      	nop
 800022e:	e7fd      	b.n	800022c <main+0x64>
 8000230:	e0001000 	.word	0xe0001000
 8000234:	20000280 	.word	0x20000280
 8000238:	08004680 	.word	0x08004680
 800023c:	080003f9 	.word	0x080003f9
 8000240:	20000284 	.word	0x20000284
 8000244:	08004688 	.word	0x08004688
 8000248:	08000419 	.word	0x08000419

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	@ 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	@ 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f004 f9ca 	bl	80045f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026e:	2301      	movs	r3, #1
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000272:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	2302      	movs	r3, #2
 8000282:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000284:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000288:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800028e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fd81 	bl	8000d9c <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a0:	f000 fa08 	bl	80006b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f000 ffee 	bl	80012a0 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ca:	f000 f9f3 	bl	80006b4 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3740      	adds	r7, #64	@ 0x40
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ec:	4b3e      	ldr	r3, [pc, #248]	@ (80003e8 <MX_GPIO_Init+0x110>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a3d      	ldr	r2, [pc, #244]	@ (80003e8 <MX_GPIO_Init+0x110>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b3b      	ldr	r3, [pc, #236]	@ (80003e8 <MX_GPIO_Init+0x110>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0310 	and.w	r3, r3, #16
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000304:	4b38      	ldr	r3, [pc, #224]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a37      	ldr	r2, [pc, #220]	@ (80003e8 <MX_GPIO_Init+0x110>)
 800030a:	f043 0320 	orr.w	r3, r3, #32
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b35      	ldr	r3, [pc, #212]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0320 	and.w	r3, r3, #32
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b32      	ldr	r3, [pc, #200]	@ (80003e8 <MX_GPIO_Init+0x110>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a31      	ldr	r2, [pc, #196]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b2f      	ldr	r3, [pc, #188]	@ (80003e8 <MX_GPIO_Init+0x110>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000334:	4b2c      	ldr	r3, [pc, #176]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a2b      	ldr	r2, [pc, #172]	@ (80003e8 <MX_GPIO_Init+0x110>)
 800033a:	f043 0308 	orr.w	r3, r3, #8
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b29      	ldr	r3, [pc, #164]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0308 	and.w	r3, r3, #8
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000352:	4826      	ldr	r0, [pc, #152]	@ (80003ec <MX_GPIO_Init+0x114>)
 8000354:	f000 fd0a 	bl	8000d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_DC_Pin|LCD_SSEL_Pin|LED_D0_Pin
 8000358:	2200      	movs	r2, #0
 800035a:	f649 0158 	movw	r1, #39000	@ 0x9858
 800035e:	4824      	ldr	r0, [pc, #144]	@ (80003f0 <MX_GPIO_Init+0x118>)
 8000360:	f000 fd04 	bl	8000d6c <HAL_GPIO_WritePin>
	                          |LED_D1_Pin|LED_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2108      	movs	r1, #8
 8000368:	4822      	ldr	r0, [pc, #136]	@ (80003f4 <MX_GPIO_Init+0x11c>)
 800036a:	f000 fcff 	bl	8000d6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 800036e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037c:	2302      	movs	r3, #2
 800037e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	4819      	ldr	r0, [pc, #100]	@ (80003ec <MX_GPIO_Init+0x114>)
 8000388:	f000 fb6c 	bl	8000a64 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin LCD_SSEL_Pin LED_D0_Pin
	                           LED_D1_Pin LED_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_SSEL_Pin|LED_D0_Pin
 800038c:	f649 0358 	movw	r3, #39000	@ 0x9858
 8000390:	613b      	str	r3, [r7, #16]
	                          |LED_D1_Pin|LED_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039a:	2302      	movs	r3, #2
 800039c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	4812      	ldr	r0, [pc, #72]	@ (80003f0 <MX_GPIO_Init+0x118>)
 80003a6:	f000 fb5d 	bl	8000a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_TOUCH_Pin */
  GPIO_InitStruct.Pin = KEY_TOUCH_Pin;
 80003aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_TOUCH_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	480c      	ldr	r0, [pc, #48]	@ (80003f0 <MX_GPIO_Init+0x118>)
 80003c0:	f000 fb50 	bl	8000a64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin;
 80003c4:	2308      	movs	r3, #8
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2302      	movs	r3, #2
 80003d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_D3_GPIO_Port, &GPIO_InitStruct);
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	4619      	mov	r1, r3
 80003da:	4806      	ldr	r0, [pc, #24]	@ (80003f4 <MX_GPIO_Init+0x11c>)
 80003dc:	f000 fb42 	bl	8000a64 <HAL_GPIO_Init>
}
 80003e0:	bf00      	nop
 80003e2:	3720      	adds	r7, #32
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40011000 	.word	0x40011000
 80003f0:	40010800 	.word	0x40010800
 80003f4:	40010c00 	.word	0x40010c00

080003f8 <taskUsart1>:

/* USER CODE BEGIN 4 */
void taskUsart1(void *param)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Receive(&huart1, &serialChar, 1, 10);
 8000400:	230a      	movs	r3, #10
 8000402:	2201      	movs	r2, #1
 8000404:	4902      	ldr	r1, [pc, #8]	@ (8000410 <taskUsart1+0x18>)
 8000406:	4803      	ldr	r0, [pc, #12]	@ (8000414 <taskUsart1+0x1c>)
 8000408:	f001 f9be 	bl	8001788 <HAL_UART_Receive>
 800040c:	e7f8      	b.n	8000400 <taskUsart1+0x8>
 800040e:	bf00      	nop
 8000410:	20000380 	.word	0x20000380
 8000414:	20000288 	.word	0x20000288

08000418 <taskFunc2>:

	taskYIELD();
}

void taskFunc2(void *param)
{
 8000418:	b480      	push	{r7}
 800041a:	b083      	sub	sp, #12
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	while(1)
 8000420:	bf00      	nop
 8000422:	e7fd      	b.n	8000420 <taskFunc2+0x8>

08000424 <MX_USART1_UART_Init>:
}

//////////////////////////////////////////////////////////////////////////////////////

static void MX_USART1_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b086      	sub	sp, #24
 8000428:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042a:	f107 0308 	add.w	r3, r7, #8
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
 8000432:	605a      	str	r2, [r3, #4]
 8000434:	609a      	str	r2, [r3, #8]
 8000436:	60da      	str	r2, [r3, #12]
  /* Peripheral clock enable */
  __HAL_RCC_USART1_CLK_ENABLE();
 8000438:	4b2b      	ldr	r3, [pc, #172]	@ (80004e8 <MX_USART1_UART_Init+0xc4>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	4a2a      	ldr	r2, [pc, #168]	@ (80004e8 <MX_USART1_UART_Init+0xc4>)
 800043e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000442:	6193      	str	r3, [r2, #24]
 8000444:	4b28      	ldr	r3, [pc, #160]	@ (80004e8 <MX_USART1_UART_Init+0xc4>)
 8000446:	699b      	ldr	r3, [r3, #24]
 8000448:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800044c:	607b      	str	r3, [r7, #4]
 800044e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000450:	4b25      	ldr	r3, [pc, #148]	@ (80004e8 <MX_USART1_UART_Init+0xc4>)
 8000452:	699b      	ldr	r3, [r3, #24]
 8000454:	4a24      	ldr	r2, [pc, #144]	@ (80004e8 <MX_USART1_UART_Init+0xc4>)
 8000456:	f043 0304 	orr.w	r3, r3, #4
 800045a:	6193      	str	r3, [r2, #24]
 800045c:	4b22      	ldr	r3, [pc, #136]	@ (80004e8 <MX_USART1_UART_Init+0xc4>)
 800045e:	699b      	ldr	r3, [r3, #24]
 8000460:	f003 0304 	and.w	r3, r3, #4
 8000464:	603b      	str	r3, [r7, #0]
 8000466:	683b      	ldr	r3, [r7, #0]
  /**USART1 GPIO Configuration
  PA9     ------> USART1_TX
  PA10     ------> USART1_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000468:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800046c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800046e:	2302      	movs	r3, #2
 8000470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000472:	2303      	movs	r3, #3
 8000474:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 0308 	add.w	r3, r7, #8
 800047a:	4619      	mov	r1, r3
 800047c:	481b      	ldr	r0, [pc, #108]	@ (80004ec <MX_USART1_UART_Init+0xc8>)
 800047e:	f000 faf1 	bl	8000a64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000482:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000486:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000488:	2300      	movs	r3, #0
 800048a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800048c:	2300      	movs	r3, #0
 800048e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000490:	f107 0308 	add.w	r3, r7, #8
 8000494:	4619      	mov	r1, r3
 8000496:	4815      	ldr	r0, [pc, #84]	@ (80004ec <MX_USART1_UART_Init+0xc8>)
 8000498:	f000 fae4 	bl	8000a64 <HAL_GPIO_Init>


  huart1.Instance = USART1;
 800049c:	4b14      	ldr	r3, [pc, #80]	@ (80004f0 <MX_USART1_UART_Init+0xcc>)
 800049e:	4a15      	ldr	r2, [pc, #84]	@ (80004f4 <MX_USART1_UART_Init+0xd0>)
 80004a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80004a2:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_USART1_UART_Init+0xcc>)
 80004a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80004a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80004aa:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_USART1_UART_Init+0xcc>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80004b0:	4b0f      	ldr	r3, [pc, #60]	@ (80004f0 <MX_USART1_UART_Init+0xcc>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80004b6:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_USART1_UART_Init+0xcc>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80004bc:	4b0c      	ldr	r3, [pc, #48]	@ (80004f0 <MX_USART1_UART_Init+0xcc>)
 80004be:	220c      	movs	r2, #12
 80004c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c2:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_USART1_UART_Init+0xcc>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c8:	4b09      	ldr	r3, [pc, #36]	@ (80004f0 <MX_USART1_UART_Init+0xcc>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80004ce:	4808      	ldr	r0, [pc, #32]	@ (80004f0 <MX_USART1_UART_Init+0xcc>)
 80004d0:	f001 f901 	bl	80016d6 <HAL_UART_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_USART1_UART_Init+0xba>
  {
    Error_Handler();
 80004da:	f000 f8eb 	bl	80006b4 <Error_Handler>
  }
}
 80004de:	bf00      	nop
 80004e0:	3718      	adds	r7, #24
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010800 	.word	0x40010800
 80004f0:	20000288 	.word	0x20000288
 80004f4:	40013800 	.word	0x40013800

080004f8 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004fe:	f107 0308 	add.w	r3, r7, #8
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
 8000506:	605a      	str	r2, [r3, #4]
 8000508:	609a      	str	r2, [r3, #8]
 800050a:	60da      	str	r2, [r3, #12]
  /* Peripheral clock enable */
  __HAL_RCC_SPI1_CLK_ENABLE();
 800050c:	4b2a      	ldr	r3, [pc, #168]	@ (80005b8 <MX_SPI1_Init+0xc0>)
 800050e:	699b      	ldr	r3, [r3, #24]
 8000510:	4a29      	ldr	r2, [pc, #164]	@ (80005b8 <MX_SPI1_Init+0xc0>)
 8000512:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000516:	6193      	str	r3, [r2, #24]
 8000518:	4b27      	ldr	r3, [pc, #156]	@ (80005b8 <MX_SPI1_Init+0xc0>)
 800051a:	699b      	ldr	r3, [r3, #24]
 800051c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000520:	607b      	str	r3, [r7, #4]
 8000522:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000524:	4b24      	ldr	r3, [pc, #144]	@ (80005b8 <MX_SPI1_Init+0xc0>)
 8000526:	699b      	ldr	r3, [r3, #24]
 8000528:	4a23      	ldr	r2, [pc, #140]	@ (80005b8 <MX_SPI1_Init+0xc0>)
 800052a:	f043 0304 	orr.w	r3, r3, #4
 800052e:	6193      	str	r3, [r2, #24]
 8000530:	4b21      	ldr	r3, [pc, #132]	@ (80005b8 <MX_SPI1_Init+0xc0>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	f003 0304 	and.w	r3, r3, #4
 8000538:	603b      	str	r3, [r7, #0]
 800053a:	683b      	ldr	r3, [r7, #0]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA7     ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 800053c:	23a0      	movs	r3, #160	@ 0xa0
 800053e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000540:	2302      	movs	r3, #2
 8000542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000544:	2303      	movs	r3, #3
 8000546:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000548:	f107 0308 	add.w	r3, r7, #8
 800054c:	4619      	mov	r1, r3
 800054e:	481b      	ldr	r0, [pc, #108]	@ (80005bc <MX_SPI1_Init+0xc4>)
 8000550:	f000 fa88 	bl	8000a64 <HAL_GPIO_Init>

  hspi1.Instance = SPI1;
 8000554:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 8000556:	4a1b      	ldr	r2, [pc, #108]	@ (80005c4 <MX_SPI1_Init+0xcc>)
 8000558:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800055a:	4b19      	ldr	r3, [pc, #100]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 800055c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000560:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000562:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000568:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800056e:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 8000570:	2200      	movs	r2, #0
 8000572:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 8000576:	2200      	movs	r2, #0
 8000578:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800057a:	4b11      	ldr	r3, [pc, #68]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 800057c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000580:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 8000584:	2220      	movs	r2, #32
 8000586:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000588:	4b0d      	ldr	r3, [pc, #52]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 800058a:	2200      	movs	r2, #0
 800058c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 8000590:	2200      	movs	r2, #0
 8000592:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000594:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 8000596:	2200      	movs	r2, #0
 8000598:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800059a:	4b09      	ldr	r3, [pc, #36]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 800059c:	220a      	movs	r2, #10
 800059e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80005a0:	4807      	ldr	r0, [pc, #28]	@ (80005c0 <MX_SPI1_Init+0xc8>)
 80005a2:	f001 f80b 	bl	80015bc <HAL_SPI_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d001      	beq.n	80005b0 <MX_SPI1_Init+0xb8>
  {
    Error_Handler();
 80005ac:	f000 f882 	bl	80006b4 <Error_Handler>
  }
}
 80005b0:	bf00      	nop
 80005b2:	3718      	adds	r7, #24
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010800 	.word	0x40010800
 80005c0:	200002d0 	.word	0x200002d0
 80005c4:	40013000 	.word	0x40013000

080005c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 0308 	add.w	r3, r7, #8
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
  /* Peripheral clock enable */
  __HAL_RCC_SPI2_CLK_ENABLE();
 80005dc:	4b31      	ldr	r3, [pc, #196]	@ (80006a4 <MX_SPI2_Init+0xdc>)
 80005de:	69db      	ldr	r3, [r3, #28]
 80005e0:	4a30      	ldr	r2, [pc, #192]	@ (80006a4 <MX_SPI2_Init+0xdc>)
 80005e2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005e6:	61d3      	str	r3, [r2, #28]
 80005e8:	4b2e      	ldr	r3, [pc, #184]	@ (80006a4 <MX_SPI2_Init+0xdc>)
 80005ea:	69db      	ldr	r3, [r3, #28]
 80005ec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005f0:	607b      	str	r3, [r7, #4]
 80005f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f4:	4b2b      	ldr	r3, [pc, #172]	@ (80006a4 <MX_SPI2_Init+0xdc>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	4a2a      	ldr	r2, [pc, #168]	@ (80006a4 <MX_SPI2_Init+0xdc>)
 80005fa:	f043 0308 	orr.w	r3, r3, #8
 80005fe:	6193      	str	r3, [r2, #24]
 8000600:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <MX_SPI2_Init+0xdc>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	f003 0308 	and.w	r3, r3, #8
 8000608:	603b      	str	r3, [r7, #0]
 800060a:	683b      	ldr	r3, [r7, #0]
  /**SPI2 GPIO Configuration
  PB13     ------> SPI2_SCK
  PB14     ------> SPI2_MISO
  PB15     ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800060c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000610:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000612:	2302      	movs	r3, #2
 8000614:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000616:	2303      	movs	r3, #3
 8000618:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800061a:	f107 0308 	add.w	r3, r7, #8
 800061e:	4619      	mov	r1, r3
 8000620:	4821      	ldr	r0, [pc, #132]	@ (80006a8 <MX_SPI2_Init+0xe0>)
 8000622:	f000 fa1f 	bl	8000a64 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000626:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800062a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800062c:	2300      	movs	r3, #0
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	4619      	mov	r1, r3
 800063a:	481b      	ldr	r0, [pc, #108]	@ (80006a8 <MX_SPI2_Init+0xe0>)
 800063c:	f000 fa12 	bl	8000a64 <HAL_GPIO_Init>

  hspi2.Instance = SPI2;
 8000640:	4b1a      	ldr	r3, [pc, #104]	@ (80006ac <MX_SPI2_Init+0xe4>)
 8000642:	4a1b      	ldr	r2, [pc, #108]	@ (80006b0 <MX_SPI2_Init+0xe8>)
 8000644:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <MX_SPI2_Init+0xe4>)
 8000648:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800064c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800064e:	4b17      	ldr	r3, [pc, #92]	@ (80006ac <MX_SPI2_Init+0xe4>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000654:	4b15      	ldr	r3, [pc, #84]	@ (80006ac <MX_SPI2_Init+0xe4>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800065a:	4b14      	ldr	r3, [pc, #80]	@ (80006ac <MX_SPI2_Init+0xe4>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000660:	4b12      	ldr	r3, [pc, #72]	@ (80006ac <MX_SPI2_Init+0xe4>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000666:	4b11      	ldr	r3, [pc, #68]	@ (80006ac <MX_SPI2_Init+0xe4>)
 8000668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800066c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800066e:	4b0f      	ldr	r3, [pc, #60]	@ (80006ac <MX_SPI2_Init+0xe4>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000674:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <MX_SPI2_Init+0xe4>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800067a:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <MX_SPI2_Init+0xe4>)
 800067c:	2200      	movs	r2, #0
 800067e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000680:	4b0a      	ldr	r3, [pc, #40]	@ (80006ac <MX_SPI2_Init+0xe4>)
 8000682:	2200      	movs	r2, #0
 8000684:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000686:	4b09      	ldr	r3, [pc, #36]	@ (80006ac <MX_SPI2_Init+0xe4>)
 8000688:	220a      	movs	r2, #10
 800068a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800068c:	4807      	ldr	r0, [pc, #28]	@ (80006ac <MX_SPI2_Init+0xe4>)
 800068e:	f000 ff95 	bl	80015bc <HAL_SPI_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_SPI2_Init+0xd4>
  {
    Error_Handler();
 8000698:	f000 f80c 	bl	80006b4 <Error_Handler>
  }
}
 800069c:	bf00      	nop
 800069e:	3718      	adds	r7, #24
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40010c00 	.word	0x40010c00
 80006ac:	20000328 	.word	0x20000328
 80006b0:	40003800 	.word	0x40003800

080006b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
}
 80006ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006bc:	bf00      	nop
 80006be:	e7fd      	b.n	80006bc <Error_Handler+0x8>

080006c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006c6:	4b18      	ldr	r3, [pc, #96]	@ (8000728 <HAL_MspInit+0x68>)
 80006c8:	699b      	ldr	r3, [r3, #24]
 80006ca:	4a17      	ldr	r2, [pc, #92]	@ (8000728 <HAL_MspInit+0x68>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6193      	str	r3, [r2, #24]
 80006d2:	4b15      	ldr	r3, [pc, #84]	@ (8000728 <HAL_MspInit+0x68>)
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006de:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_MspInit+0x68>)
 80006e0:	69db      	ldr	r3, [r3, #28]
 80006e2:	4a11      	ldr	r2, [pc, #68]	@ (8000728 <HAL_MspInit+0x68>)
 80006e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e8:	61d3      	str	r3, [r2, #28]
 80006ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <HAL_MspInit+0x68>)
 80006ec:	69db      	ldr	r3, [r3, #28]
 80006ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	210f      	movs	r1, #15
 80006fa:	f06f 0001 	mvn.w	r0, #1
 80006fe:	f000 f988 	bl	8000a12 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <HAL_MspInit+0x6c>)
 8000704:	685b      	ldr	r3, [r3, #4]
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	4a04      	ldr	r2, [pc, #16]	@ (800072c <HAL_MspInit+0x6c>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000
 800072c:	40010000 	.word	0x40010000

08000730 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <NMI_Handler+0x4>

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <HardFault_Handler+0x4>

08000740 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000744:	bf00      	nop
 8000746:	e7fd      	b.n	8000744 <MemManage_Handler+0x4>

08000748 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800074c:	bf00      	nop
 800074e:	e7fd      	b.n	800074c <BusFault_Handler+0x4>

08000750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000754:	bf00      	nop
 8000756:	e7fd      	b.n	8000754 <UsageFault_Handler+0x4>

08000758 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000768:	f000 f87c 	bl	8000864 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800076c:	f001 fee8 	bl	8002540 <xTaskGetSchedulerState>
 8000770:	4603      	mov	r3, r0
 8000772:	2b01      	cmp	r3, #1
 8000774:	d001      	beq.n	800077a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000776:	f002 f86f 	bl	8002858 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}

0800077e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	bc80      	pop	{r7}
 8000788:	4770      	bx	lr
	...

0800078c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800078c:	f7ff fff7 	bl	800077e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000790:	480b      	ldr	r0, [pc, #44]	@ (80007c0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000792:	490c      	ldr	r1, [pc, #48]	@ (80007c4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000794:	4a0c      	ldr	r2, [pc, #48]	@ (80007c8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000798:	e002      	b.n	80007a0 <LoopCopyDataInit>

0800079a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800079a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800079c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800079e:	3304      	adds	r3, #4

080007a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007a4:	d3f9      	bcc.n	800079a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007a6:	4a09      	ldr	r2, [pc, #36]	@ (80007cc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80007a8:	4c09      	ldr	r4, [pc, #36]	@ (80007d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007ac:	e001      	b.n	80007b2 <LoopFillZerobss>

080007ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007b0:	3204      	adds	r2, #4

080007b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007b4:	d3fb      	bcc.n	80007ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007b6:	f003 ff25 	bl	8004604 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ba:	f7ff fd05 	bl	80001c8 <main>
  bx lr
 80007be:	4770      	bx	lr
  ldr r0, =_sdata
 80007c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80007c8:	080047b0 	.word	0x080047b0
  ldr r2, =_sbss
 80007cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80007d0:	2000374c 	.word	0x2000374c

080007d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007d4:	e7fe      	b.n	80007d4 <ADC1_2_IRQHandler>
	...

080007d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007dc:	4b08      	ldr	r3, [pc, #32]	@ (8000800 <HAL_Init+0x28>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a07      	ldr	r2, [pc, #28]	@ (8000800 <HAL_Init+0x28>)
 80007e2:	f043 0310 	orr.w	r3, r3, #16
 80007e6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007e8:	2003      	movs	r0, #3
 80007ea:	f000 f907 	bl	80009fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ee:	200f      	movs	r0, #15
 80007f0:	f000 f808 	bl	8000804 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007f4:	f7ff ff64 	bl	80006c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40022000 	.word	0x40022000

08000804 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b082      	sub	sp, #8
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b12      	ldr	r3, [pc, #72]	@ (8000858 <HAL_InitTick+0x54>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b12      	ldr	r3, [pc, #72]	@ (800085c <HAL_InitTick+0x58>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	4619      	mov	r1, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081a:	fbb3 f3f1 	udiv	r3, r3, r1
 800081e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f000 f911 	bl	8000a4a <HAL_SYSTICK_Config>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800082e:	2301      	movs	r3, #1
 8000830:	e00e      	b.n	8000850 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	2b0f      	cmp	r3, #15
 8000836:	d80a      	bhi.n	800084e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	f04f 30ff 	mov.w	r0, #4294967295
 8000840:	f000 f8e7 	bl	8000a12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000844:	4a06      	ldr	r2, [pc, #24]	@ (8000860 <HAL_InitTick+0x5c>)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800084a:	2300      	movs	r3, #0
 800084c:	e000      	b.n	8000850 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
}
 8000850:	4618      	mov	r0, r3
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}
 8000858:	20000000 	.word	0x20000000
 800085c:	20000008 	.word	0x20000008
 8000860:	20000004 	.word	0x20000004

08000864 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <HAL_IncTick+0x1c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	461a      	mov	r2, r3
 800086e:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <HAL_IncTick+0x20>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4413      	add	r3, r2
 8000874:	4a03      	ldr	r2, [pc, #12]	@ (8000884 <HAL_IncTick+0x20>)
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bc80      	pop	{r7}
 800087e:	4770      	bx	lr
 8000880:	20000008 	.word	0x20000008
 8000884:	20000384 	.word	0x20000384

08000888 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  return uwTick;
 800088c:	4b02      	ldr	r3, [pc, #8]	@ (8000898 <HAL_GetTick+0x10>)
 800088e:	681b      	ldr	r3, [r3, #0]
}
 8000890:	4618      	mov	r0, r3
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	20000384 	.word	0x20000384

0800089c <__NVIC_SetPriorityGrouping>:
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	f003 0307 	and.w	r3, r3, #7
 80008aa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008ac:	4b0c      	ldr	r3, [pc, #48]	@ (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008b2:	68ba      	ldr	r2, [r7, #8]
 80008b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008b8:	4013      	ands	r3, r2
 80008ba:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008c0:	68bb      	ldr	r3, [r7, #8]
 80008c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008ce:	4a04      	ldr	r2, [pc, #16]	@ (80008e0 <__NVIC_SetPriorityGrouping+0x44>)
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	60d3      	str	r3, [r2, #12]
}
 80008d4:	bf00      	nop
 80008d6:	3714      	adds	r7, #20
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008e8:	4b04      	ldr	r3, [pc, #16]	@ (80008fc <__NVIC_GetPriorityGrouping+0x18>)
 80008ea:	68db      	ldr	r3, [r3, #12]
 80008ec:	0a1b      	lsrs	r3, r3, #8
 80008ee:	f003 0307 	and.w	r3, r3, #7
}
 80008f2:	4618      	mov	r0, r3
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	e000ed00 	.word	0xe000ed00

08000900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000900:	b480      	push	{r7}
 8000902:	b083      	sub	sp, #12
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	6039      	str	r1, [r7, #0]
 800090a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000910:	2b00      	cmp	r3, #0
 8000912:	db0a      	blt.n	800092a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	b2da      	uxtb	r2, r3
 8000918:	490c      	ldr	r1, [pc, #48]	@ (800094c <__NVIC_SetPriority+0x4c>)
 800091a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800091e:	0112      	lsls	r2, r2, #4
 8000920:	b2d2      	uxtb	r2, r2
 8000922:	440b      	add	r3, r1
 8000924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000928:	e00a      	b.n	8000940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4908      	ldr	r1, [pc, #32]	@ (8000950 <__NVIC_SetPriority+0x50>)
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	f003 030f 	and.w	r3, r3, #15
 8000936:	3b04      	subs	r3, #4
 8000938:	0112      	lsls	r2, r2, #4
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	440b      	add	r3, r1
 800093e:	761a      	strb	r2, [r3, #24]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	bc80      	pop	{r7}
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	e000e100 	.word	0xe000e100
 8000950:	e000ed00 	.word	0xe000ed00

08000954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000954:	b480      	push	{r7}
 8000956:	b089      	sub	sp, #36	@ 0x24
 8000958:	af00      	add	r7, sp, #0
 800095a:	60f8      	str	r0, [r7, #12]
 800095c:	60b9      	str	r1, [r7, #8]
 800095e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000968:	69fb      	ldr	r3, [r7, #28]
 800096a:	f1c3 0307 	rsb	r3, r3, #7
 800096e:	2b04      	cmp	r3, #4
 8000970:	bf28      	it	cs
 8000972:	2304      	movcs	r3, #4
 8000974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	3304      	adds	r3, #4
 800097a:	2b06      	cmp	r3, #6
 800097c:	d902      	bls.n	8000984 <NVIC_EncodePriority+0x30>
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	3b03      	subs	r3, #3
 8000982:	e000      	b.n	8000986 <NVIC_EncodePriority+0x32>
 8000984:	2300      	movs	r3, #0
 8000986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000988:	f04f 32ff 	mov.w	r2, #4294967295
 800098c:	69bb      	ldr	r3, [r7, #24]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43da      	mvns	r2, r3
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	401a      	ands	r2, r3
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800099c:	f04f 31ff 	mov.w	r1, #4294967295
 80009a0:	697b      	ldr	r3, [r7, #20]
 80009a2:	fa01 f303 	lsl.w	r3, r1, r3
 80009a6:	43d9      	mvns	r1, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	4313      	orrs	r3, r2
         );
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	3724      	adds	r7, #36	@ 0x24
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	3b01      	subs	r3, #1
 80009c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009c8:	d301      	bcc.n	80009ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009ca:	2301      	movs	r3, #1
 80009cc:	e00f      	b.n	80009ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ce:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <SysTick_Config+0x40>)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	3b01      	subs	r3, #1
 80009d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009d6:	210f      	movs	r1, #15
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	f7ff ff90 	bl	8000900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <SysTick_Config+0x40>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009e6:	4b04      	ldr	r3, [pc, #16]	@ (80009f8 <SysTick_Config+0x40>)
 80009e8:	2207      	movs	r2, #7
 80009ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	e000e010 	.word	0xe000e010

080009fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ff49 	bl	800089c <__NVIC_SetPriorityGrouping>
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b086      	sub	sp, #24
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	4603      	mov	r3, r0
 8000a1a:	60b9      	str	r1, [r7, #8]
 8000a1c:	607a      	str	r2, [r7, #4]
 8000a1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a24:	f7ff ff5e 	bl	80008e4 <__NVIC_GetPriorityGrouping>
 8000a28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a2a:	687a      	ldr	r2, [r7, #4]
 8000a2c:	68b9      	ldr	r1, [r7, #8]
 8000a2e:	6978      	ldr	r0, [r7, #20]
 8000a30:	f7ff ff90 	bl	8000954 <NVIC_EncodePriority>
 8000a34:	4602      	mov	r2, r0
 8000a36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a3a:	4611      	mov	r1, r2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f7ff ff5f 	bl	8000900 <__NVIC_SetPriority>
}
 8000a42:	bf00      	nop
 8000a44:	3718      	adds	r7, #24
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a52:	6878      	ldr	r0, [r7, #4]
 8000a54:	f7ff ffb0 	bl	80009b8 <SysTick_Config>
 8000a58:	4603      	mov	r3, r0
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3708      	adds	r7, #8
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
	...

08000a64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b08b      	sub	sp, #44	@ 0x2c
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a76:	e169      	b.n	8000d4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a78:	2201      	movs	r2, #1
 8000a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	69fa      	ldr	r2, [r7, #28]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a8c:	69ba      	ldr	r2, [r7, #24]
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	429a      	cmp	r2, r3
 8000a92:	f040 8158 	bne.w	8000d46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	4a9a      	ldr	r2, [pc, #616]	@ (8000d04 <HAL_GPIO_Init+0x2a0>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	d05e      	beq.n	8000b5e <HAL_GPIO_Init+0xfa>
 8000aa0:	4a98      	ldr	r2, [pc, #608]	@ (8000d04 <HAL_GPIO_Init+0x2a0>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d875      	bhi.n	8000b92 <HAL_GPIO_Init+0x12e>
 8000aa6:	4a98      	ldr	r2, [pc, #608]	@ (8000d08 <HAL_GPIO_Init+0x2a4>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d058      	beq.n	8000b5e <HAL_GPIO_Init+0xfa>
 8000aac:	4a96      	ldr	r2, [pc, #600]	@ (8000d08 <HAL_GPIO_Init+0x2a4>)
 8000aae:	4293      	cmp	r3, r2
 8000ab0:	d86f      	bhi.n	8000b92 <HAL_GPIO_Init+0x12e>
 8000ab2:	4a96      	ldr	r2, [pc, #600]	@ (8000d0c <HAL_GPIO_Init+0x2a8>)
 8000ab4:	4293      	cmp	r3, r2
 8000ab6:	d052      	beq.n	8000b5e <HAL_GPIO_Init+0xfa>
 8000ab8:	4a94      	ldr	r2, [pc, #592]	@ (8000d0c <HAL_GPIO_Init+0x2a8>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d869      	bhi.n	8000b92 <HAL_GPIO_Init+0x12e>
 8000abe:	4a94      	ldr	r2, [pc, #592]	@ (8000d10 <HAL_GPIO_Init+0x2ac>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d04c      	beq.n	8000b5e <HAL_GPIO_Init+0xfa>
 8000ac4:	4a92      	ldr	r2, [pc, #584]	@ (8000d10 <HAL_GPIO_Init+0x2ac>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d863      	bhi.n	8000b92 <HAL_GPIO_Init+0x12e>
 8000aca:	4a92      	ldr	r2, [pc, #584]	@ (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d046      	beq.n	8000b5e <HAL_GPIO_Init+0xfa>
 8000ad0:	4a90      	ldr	r2, [pc, #576]	@ (8000d14 <HAL_GPIO_Init+0x2b0>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d85d      	bhi.n	8000b92 <HAL_GPIO_Init+0x12e>
 8000ad6:	2b12      	cmp	r3, #18
 8000ad8:	d82a      	bhi.n	8000b30 <HAL_GPIO_Init+0xcc>
 8000ada:	2b12      	cmp	r3, #18
 8000adc:	d859      	bhi.n	8000b92 <HAL_GPIO_Init+0x12e>
 8000ade:	a201      	add	r2, pc, #4	@ (adr r2, 8000ae4 <HAL_GPIO_Init+0x80>)
 8000ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ae4:	08000b5f 	.word	0x08000b5f
 8000ae8:	08000b39 	.word	0x08000b39
 8000aec:	08000b4b 	.word	0x08000b4b
 8000af0:	08000b8d 	.word	0x08000b8d
 8000af4:	08000b93 	.word	0x08000b93
 8000af8:	08000b93 	.word	0x08000b93
 8000afc:	08000b93 	.word	0x08000b93
 8000b00:	08000b93 	.word	0x08000b93
 8000b04:	08000b93 	.word	0x08000b93
 8000b08:	08000b93 	.word	0x08000b93
 8000b0c:	08000b93 	.word	0x08000b93
 8000b10:	08000b93 	.word	0x08000b93
 8000b14:	08000b93 	.word	0x08000b93
 8000b18:	08000b93 	.word	0x08000b93
 8000b1c:	08000b93 	.word	0x08000b93
 8000b20:	08000b93 	.word	0x08000b93
 8000b24:	08000b93 	.word	0x08000b93
 8000b28:	08000b41 	.word	0x08000b41
 8000b2c:	08000b55 	.word	0x08000b55
 8000b30:	4a79      	ldr	r2, [pc, #484]	@ (8000d18 <HAL_GPIO_Init+0x2b4>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d013      	beq.n	8000b5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b36:	e02c      	b.n	8000b92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	623b      	str	r3, [r7, #32]
          break;
 8000b3e:	e029      	b.n	8000b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	3304      	adds	r3, #4
 8000b46:	623b      	str	r3, [r7, #32]
          break;
 8000b48:	e024      	b.n	8000b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	3308      	adds	r3, #8
 8000b50:	623b      	str	r3, [r7, #32]
          break;
 8000b52:	e01f      	b.n	8000b94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	68db      	ldr	r3, [r3, #12]
 8000b58:	330c      	adds	r3, #12
 8000b5a:	623b      	str	r3, [r7, #32]
          break;
 8000b5c:	e01a      	b.n	8000b94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	689b      	ldr	r3, [r3, #8]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d102      	bne.n	8000b6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b66:	2304      	movs	r3, #4
 8000b68:	623b      	str	r3, [r7, #32]
          break;
 8000b6a:	e013      	b.n	8000b94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	689b      	ldr	r3, [r3, #8]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d105      	bne.n	8000b80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b74:	2308      	movs	r3, #8
 8000b76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	69fa      	ldr	r2, [r7, #28]
 8000b7c:	611a      	str	r2, [r3, #16]
          break;
 8000b7e:	e009      	b.n	8000b94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b80:	2308      	movs	r3, #8
 8000b82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	69fa      	ldr	r2, [r7, #28]
 8000b88:	615a      	str	r2, [r3, #20]
          break;
 8000b8a:	e003      	b.n	8000b94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	623b      	str	r3, [r7, #32]
          break;
 8000b90:	e000      	b.n	8000b94 <HAL_GPIO_Init+0x130>
          break;
 8000b92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	2bff      	cmp	r3, #255	@ 0xff
 8000b98:	d801      	bhi.n	8000b9e <HAL_GPIO_Init+0x13a>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	e001      	b.n	8000ba2 <HAL_GPIO_Init+0x13e>
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	3304      	adds	r3, #4
 8000ba2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	2bff      	cmp	r3, #255	@ 0xff
 8000ba8:	d802      	bhi.n	8000bb0 <HAL_GPIO_Init+0x14c>
 8000baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	e002      	b.n	8000bb6 <HAL_GPIO_Init+0x152>
 8000bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb2:	3b08      	subs	r3, #8
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000bb8:	697b      	ldr	r3, [r7, #20]
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	210f      	movs	r1, #15
 8000bbe:	693b      	ldr	r3, [r7, #16]
 8000bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bc4:	43db      	mvns	r3, r3
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	6a39      	ldr	r1, [r7, #32]
 8000bca:	693b      	ldr	r3, [r7, #16]
 8000bcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 80b1 	beq.w	8000d46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000be4:	4b4d      	ldr	r3, [pc, #308]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	4a4c      	ldr	r2, [pc, #304]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000bea:	f043 0301 	orr.w	r3, r3, #1
 8000bee:	6193      	str	r3, [r2, #24]
 8000bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8000d1c <HAL_GPIO_Init+0x2b8>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	f003 0301 	and.w	r3, r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000bfc:	4a48      	ldr	r2, [pc, #288]	@ (8000d20 <HAL_GPIO_Init+0x2bc>)
 8000bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c00:	089b      	lsrs	r3, r3, #2
 8000c02:	3302      	adds	r3, #2
 8000c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	009b      	lsls	r3, r3, #2
 8000c12:	220f      	movs	r2, #15
 8000c14:	fa02 f303 	lsl.w	r3, r2, r3
 8000c18:	43db      	mvns	r3, r3
 8000c1a:	68fa      	ldr	r2, [r7, #12]
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	4a40      	ldr	r2, [pc, #256]	@ (8000d24 <HAL_GPIO_Init+0x2c0>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d013      	beq.n	8000c50 <HAL_GPIO_Init+0x1ec>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d28 <HAL_GPIO_Init+0x2c4>)
 8000c2c:	4293      	cmp	r3, r2
 8000c2e:	d00d      	beq.n	8000c4c <HAL_GPIO_Init+0x1e8>
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a3e      	ldr	r2, [pc, #248]	@ (8000d2c <HAL_GPIO_Init+0x2c8>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d007      	beq.n	8000c48 <HAL_GPIO_Init+0x1e4>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4a3d      	ldr	r2, [pc, #244]	@ (8000d30 <HAL_GPIO_Init+0x2cc>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d101      	bne.n	8000c44 <HAL_GPIO_Init+0x1e0>
 8000c40:	2303      	movs	r3, #3
 8000c42:	e006      	b.n	8000c52 <HAL_GPIO_Init+0x1ee>
 8000c44:	2304      	movs	r3, #4
 8000c46:	e004      	b.n	8000c52 <HAL_GPIO_Init+0x1ee>
 8000c48:	2302      	movs	r3, #2
 8000c4a:	e002      	b.n	8000c52 <HAL_GPIO_Init+0x1ee>
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	e000      	b.n	8000c52 <HAL_GPIO_Init+0x1ee>
 8000c50:	2300      	movs	r3, #0
 8000c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c54:	f002 0203 	and.w	r2, r2, #3
 8000c58:	0092      	lsls	r2, r2, #2
 8000c5a:	4093      	lsls	r3, r2
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c62:	492f      	ldr	r1, [pc, #188]	@ (8000d20 <HAL_GPIO_Init+0x2bc>)
 8000c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c66:	089b      	lsrs	r3, r3, #2
 8000c68:	3302      	adds	r3, #2
 8000c6a:	68fa      	ldr	r2, [r7, #12]
 8000c6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d006      	beq.n	8000c8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c7c:	4b2d      	ldr	r3, [pc, #180]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000c7e:	689a      	ldr	r2, [r3, #8]
 8000c80:	492c      	ldr	r1, [pc, #176]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000c82:	69bb      	ldr	r3, [r7, #24]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	608b      	str	r3, [r1, #8]
 8000c88:	e006      	b.n	8000c98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	69bb      	ldr	r3, [r7, #24]
 8000c90:	43db      	mvns	r3, r3
 8000c92:	4928      	ldr	r1, [pc, #160]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000c94:	4013      	ands	r3, r2
 8000c96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d006      	beq.n	8000cb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ca4:	4b23      	ldr	r3, [pc, #140]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000ca6:	68da      	ldr	r2, [r3, #12]
 8000ca8:	4922      	ldr	r1, [pc, #136]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	60cb      	str	r3, [r1, #12]
 8000cb0:	e006      	b.n	8000cc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cb2:	4b20      	ldr	r3, [pc, #128]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	491e      	ldr	r1, [pc, #120]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d006      	beq.n	8000cda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ccc:	4b19      	ldr	r3, [pc, #100]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	4918      	ldr	r1, [pc, #96]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	604b      	str	r3, [r1, #4]
 8000cd8:	e006      	b.n	8000ce8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000cda:	4b16      	ldr	r3, [pc, #88]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	4914      	ldr	r1, [pc, #80]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d021      	beq.n	8000d38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	490e      	ldr	r1, [pc, #56]	@ (8000d34 <HAL_GPIO_Init+0x2d0>)
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	600b      	str	r3, [r1, #0]
 8000d00:	e021      	b.n	8000d46 <HAL_GPIO_Init+0x2e2>
 8000d02:	bf00      	nop
 8000d04:	10320000 	.word	0x10320000
 8000d08:	10310000 	.word	0x10310000
 8000d0c:	10220000 	.word	0x10220000
 8000d10:	10210000 	.word	0x10210000
 8000d14:	10120000 	.word	0x10120000
 8000d18:	10110000 	.word	0x10110000
 8000d1c:	40021000 	.word	0x40021000
 8000d20:	40010000 	.word	0x40010000
 8000d24:	40010800 	.word	0x40010800
 8000d28:	40010c00 	.word	0x40010c00
 8000d2c:	40011000 	.word	0x40011000
 8000d30:	40011400 	.word	0x40011400
 8000d34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d38:	4b0b      	ldr	r3, [pc, #44]	@ (8000d68 <HAL_GPIO_Init+0x304>)
 8000d3a:	681a      	ldr	r2, [r3, #0]
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	43db      	mvns	r3, r3
 8000d40:	4909      	ldr	r1, [pc, #36]	@ (8000d68 <HAL_GPIO_Init+0x304>)
 8000d42:	4013      	ands	r3, r2
 8000d44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d48:	3301      	adds	r3, #1
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d52:	fa22 f303 	lsr.w	r3, r2, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	f47f ae8e 	bne.w	8000a78 <HAL_GPIO_Init+0x14>
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	372c      	adds	r7, #44	@ 0x2c
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	40010400 	.word	0x40010400

08000d6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	460b      	mov	r3, r1
 8000d76:	807b      	strh	r3, [r7, #2]
 8000d78:	4613      	mov	r3, r2
 8000d7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d7c:	787b      	ldrb	r3, [r7, #1]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d003      	beq.n	8000d8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d82:	887a      	ldrh	r2, [r7, #2]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d88:	e003      	b.n	8000d92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d8a:	887b      	ldrh	r3, [r7, #2]
 8000d8c:	041a      	lsls	r2, r3, #16
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	611a      	str	r2, [r3, #16]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d101      	bne.n	8000dae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000daa:	2301      	movs	r3, #1
 8000dac:	e272      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 8087 	beq.w	8000eca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000dbc:	4b92      	ldr	r3, [pc, #584]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	f003 030c 	and.w	r3, r3, #12
 8000dc4:	2b04      	cmp	r3, #4
 8000dc6:	d00c      	beq.n	8000de2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dc8:	4b8f      	ldr	r3, [pc, #572]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	f003 030c 	and.w	r3, r3, #12
 8000dd0:	2b08      	cmp	r3, #8
 8000dd2:	d112      	bne.n	8000dfa <HAL_RCC_OscConfig+0x5e>
 8000dd4:	4b8c      	ldr	r3, [pc, #560]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ddc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000de0:	d10b      	bne.n	8000dfa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000de2:	4b89      	ldr	r3, [pc, #548]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d06c      	beq.n	8000ec8 <HAL_RCC_OscConfig+0x12c>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d168      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e24c      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e02:	d106      	bne.n	8000e12 <HAL_RCC_OscConfig+0x76>
 8000e04:	4b80      	ldr	r3, [pc, #512]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a7f      	ldr	r2, [pc, #508]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	e02e      	b.n	8000e70 <HAL_RCC_OscConfig+0xd4>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d10c      	bne.n	8000e34 <HAL_RCC_OscConfig+0x98>
 8000e1a:	4b7b      	ldr	r3, [pc, #492]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	4a7a      	ldr	r2, [pc, #488]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	4b78      	ldr	r3, [pc, #480]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	4a77      	ldr	r2, [pc, #476]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e30:	6013      	str	r3, [r2, #0]
 8000e32:	e01d      	b.n	8000e70 <HAL_RCC_OscConfig+0xd4>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0xbc>
 8000e3e:	4b72      	ldr	r3, [pc, #456]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a71      	ldr	r2, [pc, #452]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e00b      	b.n	8000e70 <HAL_RCC_OscConfig+0xd4>
 8000e58:	4b6b      	ldr	r3, [pc, #428]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a6a      	ldr	r2, [pc, #424]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b68      	ldr	r3, [pc, #416]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a67      	ldr	r2, [pc, #412]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e6e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d013      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e78:	f7ff fd06 	bl	8000888 <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e7e:	e008      	b.n	8000e92 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e80:	f7ff fd02 	bl	8000888 <HAL_GetTick>
 8000e84:	4602      	mov	r2, r0
 8000e86:	693b      	ldr	r3, [r7, #16]
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	2b64      	cmp	r3, #100	@ 0x64
 8000e8c:	d901      	bls.n	8000e92 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	e200      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e92:	4b5d      	ldr	r3, [pc, #372]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f0      	beq.n	8000e80 <HAL_RCC_OscConfig+0xe4>
 8000e9e:	e014      	b.n	8000eca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea0:	f7ff fcf2 	bl	8000888 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ea6:	e008      	b.n	8000eba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fcee 	bl	8000888 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	2b64      	cmp	r3, #100	@ 0x64
 8000eb4:	d901      	bls.n	8000eba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	e1ec      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eba:	4b53      	ldr	r3, [pc, #332]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d1f0      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x10c>
 8000ec6:	e000      	b.n	8000eca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d063      	beq.n	8000f9e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ed6:	4b4c      	ldr	r3, [pc, #304]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 030c 	and.w	r3, r3, #12
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d00b      	beq.n	8000efa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000ee2:	4b49      	ldr	r3, [pc, #292]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	685b      	ldr	r3, [r3, #4]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b08      	cmp	r3, #8
 8000eec:	d11c      	bne.n	8000f28 <HAL_RCC_OscConfig+0x18c>
 8000eee:	4b46      	ldr	r3, [pc, #280]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d116      	bne.n	8000f28 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000efa:	4b43      	ldr	r3, [pc, #268]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0302 	and.w	r3, r3, #2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d005      	beq.n	8000f12 <HAL_RCC_OscConfig+0x176>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	691b      	ldr	r3, [r3, #16]
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d001      	beq.n	8000f12 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e1c0      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f12:	4b3d      	ldr	r3, [pc, #244]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	695b      	ldr	r3, [r3, #20]
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	4939      	ldr	r1, [pc, #228]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000f22:	4313      	orrs	r3, r2
 8000f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f26:	e03a      	b.n	8000f9e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d020      	beq.n	8000f72 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f30:	4b36      	ldr	r3, [pc, #216]	@ (800100c <HAL_RCC_OscConfig+0x270>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f36:	f7ff fca7 	bl	8000888 <HAL_GetTick>
 8000f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f3c:	e008      	b.n	8000f50 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f3e:	f7ff fca3 	bl	8000888 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	1ad3      	subs	r3, r2, r3
 8000f48:	2b02      	cmp	r3, #2
 8000f4a:	d901      	bls.n	8000f50 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	e1a1      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f50:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f003 0302 	and.w	r3, r3, #2
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d0f0      	beq.n	8000f3e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	4927      	ldr	r1, [pc, #156]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	600b      	str	r3, [r1, #0]
 8000f70:	e015      	b.n	8000f9e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f72:	4b26      	ldr	r3, [pc, #152]	@ (800100c <HAL_RCC_OscConfig+0x270>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f78:	f7ff fc86 	bl	8000888 <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f7e:	e008      	b.n	8000f92 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f80:	f7ff fc82 	bl	8000888 <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	d901      	bls.n	8000f92 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e180      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f92:	4b1d      	ldr	r3, [pc, #116]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d1f0      	bne.n	8000f80 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0308 	and.w	r3, r3, #8
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d03a      	beq.n	8001020 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d019      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <HAL_RCC_OscConfig+0x274>)
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fb8:	f7ff fc66 	bl	8000888 <HAL_GetTick>
 8000fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fbe:	e008      	b.n	8000fd2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000fc0:	f7ff fc62 	bl	8000888 <HAL_GetTick>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	693b      	ldr	r3, [r7, #16]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d901      	bls.n	8000fd2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e160      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <HAL_RCC_OscConfig+0x26c>)
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fd6:	f003 0302 	and.w	r3, r3, #2
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d0f0      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f000 face 	bl	8001580 <RCC_Delay>
 8000fe4:	e01c      	b.n	8001020 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	@ (8001010 <HAL_RCC_OscConfig+0x274>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fec:	f7ff fc4c 	bl	8000888 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ff2:	e00f      	b.n	8001014 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ff4:	f7ff fc48 	bl	8000888 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d908      	bls.n	8001014 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e146      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	42420000 	.word	0x42420000
 8001010:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001014:	4b92      	ldr	r3, [pc, #584]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001018:	f003 0302 	and.w	r3, r3, #2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d1e9      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0304 	and.w	r3, r3, #4
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80a6 	beq.w	800117a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001032:	4b8b      	ldr	r3, [pc, #556]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	69db      	ldr	r3, [r3, #28]
 8001036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d10d      	bne.n	800105a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800103e:	4b88      	ldr	r3, [pc, #544]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	69db      	ldr	r3, [r3, #28]
 8001042:	4a87      	ldr	r2, [pc, #540]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001048:	61d3      	str	r3, [r2, #28]
 800104a:	4b85      	ldr	r3, [pc, #532]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001056:	2301      	movs	r3, #1
 8001058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105a:	4b82      	ldr	r3, [pc, #520]	@ (8001264 <HAL_RCC_OscConfig+0x4c8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001062:	2b00      	cmp	r3, #0
 8001064:	d118      	bne.n	8001098 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001066:	4b7f      	ldr	r3, [pc, #508]	@ (8001264 <HAL_RCC_OscConfig+0x4c8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a7e      	ldr	r2, [pc, #504]	@ (8001264 <HAL_RCC_OscConfig+0x4c8>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001072:	f7ff fc09 	bl	8000888 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001078:	e008      	b.n	800108c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800107a:	f7ff fc05 	bl	8000888 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	2b64      	cmp	r3, #100	@ 0x64
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e103      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800108c:	4b75      	ldr	r3, [pc, #468]	@ (8001264 <HAL_RCC_OscConfig+0x4c8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0f0      	beq.n	800107a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	2b01      	cmp	r3, #1
 800109e:	d106      	bne.n	80010ae <HAL_RCC_OscConfig+0x312>
 80010a0:	4b6f      	ldr	r3, [pc, #444]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	4a6e      	ldr	r2, [pc, #440]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	f043 0301 	orr.w	r3, r3, #1
 80010aa:	6213      	str	r3, [r2, #32]
 80010ac:	e02d      	b.n	800110a <HAL_RCC_OscConfig+0x36e>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	68db      	ldr	r3, [r3, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d10c      	bne.n	80010d0 <HAL_RCC_OscConfig+0x334>
 80010b6:	4b6a      	ldr	r3, [pc, #424]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	6a1b      	ldr	r3, [r3, #32]
 80010ba:	4a69      	ldr	r2, [pc, #420]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	f023 0301 	bic.w	r3, r3, #1
 80010c0:	6213      	str	r3, [r2, #32]
 80010c2:	4b67      	ldr	r3, [pc, #412]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80010c4:	6a1b      	ldr	r3, [r3, #32]
 80010c6:	4a66      	ldr	r2, [pc, #408]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80010c8:	f023 0304 	bic.w	r3, r3, #4
 80010cc:	6213      	str	r3, [r2, #32]
 80010ce:	e01c      	b.n	800110a <HAL_RCC_OscConfig+0x36e>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	2b05      	cmp	r3, #5
 80010d6:	d10c      	bne.n	80010f2 <HAL_RCC_OscConfig+0x356>
 80010d8:	4b61      	ldr	r3, [pc, #388]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	4a60      	ldr	r2, [pc, #384]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6213      	str	r3, [r2, #32]
 80010e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80010e6:	6a1b      	ldr	r3, [r3, #32]
 80010e8:	4a5d      	ldr	r2, [pc, #372]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80010ea:	f043 0301 	orr.w	r3, r3, #1
 80010ee:	6213      	str	r3, [r2, #32]
 80010f0:	e00b      	b.n	800110a <HAL_RCC_OscConfig+0x36e>
 80010f2:	4b5b      	ldr	r3, [pc, #364]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80010f4:	6a1b      	ldr	r3, [r3, #32]
 80010f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6213      	str	r3, [r2, #32]
 80010fe:	4b58      	ldr	r3, [pc, #352]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 8001100:	6a1b      	ldr	r3, [r3, #32]
 8001102:	4a57      	ldr	r2, [pc, #348]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	f023 0304 	bic.w	r3, r3, #4
 8001108:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d015      	beq.n	800113e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001112:	f7ff fbb9 	bl	8000888 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001118:	e00a      	b.n	8001130 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111a:	f7ff fbb5 	bl	8000888 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001128:	4293      	cmp	r3, r2
 800112a:	d901      	bls.n	8001130 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800112c:	2303      	movs	r3, #3
 800112e:	e0b1      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001130:	4b4b      	ldr	r3, [pc, #300]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 8001132:	6a1b      	ldr	r3, [r3, #32]
 8001134:	f003 0302 	and.w	r3, r3, #2
 8001138:	2b00      	cmp	r3, #0
 800113a:	d0ee      	beq.n	800111a <HAL_RCC_OscConfig+0x37e>
 800113c:	e014      	b.n	8001168 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113e:	f7ff fba3 	bl	8000888 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001144:	e00a      	b.n	800115c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001146:	f7ff fb9f 	bl	8000888 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e09b      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800115c:	4b40      	ldr	r3, [pc, #256]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 800115e:	6a1b      	ldr	r3, [r3, #32]
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d1ee      	bne.n	8001146 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001168:	7dfb      	ldrb	r3, [r7, #23]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d105      	bne.n	800117a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800116e:	4b3c      	ldr	r3, [pc, #240]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	4a3b      	ldr	r2, [pc, #236]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 8001174:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001178:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	69db      	ldr	r3, [r3, #28]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 8087 	beq.w	8001292 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001184:	4b36      	ldr	r3, [pc, #216]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	2b08      	cmp	r3, #8
 800118e:	d061      	beq.n	8001254 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d146      	bne.n	8001226 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001198:	4b33      	ldr	r3, [pc, #204]	@ (8001268 <HAL_RCC_OscConfig+0x4cc>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119e:	f7ff fb73 	bl	8000888 <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011a6:	f7ff fb6f 	bl	8000888 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e06d      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011b8:	4b29      	ldr	r3, [pc, #164]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f0      	bne.n	80011a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6a1b      	ldr	r3, [r3, #32]
 80011c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80011cc:	d108      	bne.n	80011e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011ce:	4b24      	ldr	r3, [pc, #144]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	4921      	ldr	r1, [pc, #132]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011e0:	4b1f      	ldr	r3, [pc, #124]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a19      	ldr	r1, [r3, #32]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011f0:	430b      	orrs	r3, r1
 80011f2:	491b      	ldr	r1, [pc, #108]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001268 <HAL_RCC_OscConfig+0x4cc>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fe:	f7ff fb43 	bl	8000888 <HAL_GetTick>
 8001202:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001206:	f7ff fb3f 	bl	8000888 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b02      	cmp	r3, #2
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e03d      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x46a>
 8001224:	e035      	b.n	8001292 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001226:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <HAL_RCC_OscConfig+0x4cc>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fb2c 	bl	8000888 <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001234:	f7ff fb28 	bl	8000888 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b02      	cmp	r3, #2
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e026      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_RCC_OscConfig+0x4c4>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x498>
 8001252:	e01e      	b.n	8001292 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	69db      	ldr	r3, [r3, #28]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d107      	bne.n	800126c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e019      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
 8001260:	40021000 	.word	0x40021000
 8001264:	40007000 	.word	0x40007000
 8001268:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800126c:	4b0b      	ldr	r3, [pc, #44]	@ (800129c <HAL_RCC_OscConfig+0x500>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	429a      	cmp	r2, r3
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128a:	429a      	cmp	r2, r3
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000

080012a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e0d0      	b.n	8001456 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80012b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001460 <HAL_RCC_ClockConfig+0x1c0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 0307 	and.w	r3, r3, #7
 80012bc:	683a      	ldr	r2, [r7, #0]
 80012be:	429a      	cmp	r2, r3
 80012c0:	d910      	bls.n	80012e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c2:	4b67      	ldr	r3, [pc, #412]	@ (8001460 <HAL_RCC_ClockConfig+0x1c0>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f023 0207 	bic.w	r2, r3, #7
 80012ca:	4965      	ldr	r1, [pc, #404]	@ (8001460 <HAL_RCC_ClockConfig+0x1c0>)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012d2:	4b63      	ldr	r3, [pc, #396]	@ (8001460 <HAL_RCC_ClockConfig+0x1c0>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	683a      	ldr	r2, [r7, #0]
 80012dc:	429a      	cmp	r2, r3
 80012de:	d001      	beq.n	80012e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e0b8      	b.n	8001456 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d020      	beq.n	8001332 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012fc:	4b59      	ldr	r3, [pc, #356]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	4a58      	ldr	r2, [pc, #352]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 8001302:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001306:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0308 	and.w	r3, r3, #8
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001314:	4b53      	ldr	r3, [pc, #332]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	4a52      	ldr	r2, [pc, #328]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 800131a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800131e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001320:	4b50      	ldr	r3, [pc, #320]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	494d      	ldr	r1, [pc, #308]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 800132e:	4313      	orrs	r3, r2
 8001330:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	d040      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d107      	bne.n	8001356 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001346:	4b47      	ldr	r3, [pc, #284]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d115      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e07f      	b.n	8001456 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b02      	cmp	r3, #2
 800135c:	d107      	bne.n	800136e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800135e:	4b41      	ldr	r3, [pc, #260]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d109      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e073      	b.n	8001456 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136e:	4b3d      	ldr	r3, [pc, #244]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e06b      	b.n	8001456 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800137e:	4b39      	ldr	r3, [pc, #228]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f023 0203 	bic.w	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	4936      	ldr	r1, [pc, #216]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001390:	f7ff fa7a 	bl	8000888 <HAL_GetTick>
 8001394:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001396:	e00a      	b.n	80013ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001398:	f7ff fa76 	bl	8000888 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d901      	bls.n	80013ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013aa:	2303      	movs	r3, #3
 80013ac:	e053      	b.n	8001456 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ae:	4b2d      	ldr	r3, [pc, #180]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 020c 	and.w	r2, r3, #12
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	009b      	lsls	r3, r3, #2
 80013bc:	429a      	cmp	r2, r3
 80013be:	d1eb      	bne.n	8001398 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80013c0:	4b27      	ldr	r3, [pc, #156]	@ (8001460 <HAL_RCC_ClockConfig+0x1c0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0307 	and.w	r3, r3, #7
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d210      	bcs.n	80013f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ce:	4b24      	ldr	r3, [pc, #144]	@ (8001460 <HAL_RCC_ClockConfig+0x1c0>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f023 0207 	bic.w	r2, r3, #7
 80013d6:	4922      	ldr	r1, [pc, #136]	@ (8001460 <HAL_RCC_ClockConfig+0x1c0>)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	4313      	orrs	r3, r2
 80013dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013de:	4b20      	ldr	r3, [pc, #128]	@ (8001460 <HAL_RCC_ClockConfig+0x1c0>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d001      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e032      	b.n	8001456 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d008      	beq.n	800140e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013fc:	4b19      	ldr	r3, [pc, #100]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	4916      	ldr	r1, [pc, #88]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	4313      	orrs	r3, r2
 800140c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0308 	and.w	r3, r3, #8
 8001416:	2b00      	cmp	r3, #0
 8001418:	d009      	beq.n	800142e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800141a:	4b12      	ldr	r3, [pc, #72]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	00db      	lsls	r3, r3, #3
 8001428:	490e      	ldr	r1, [pc, #56]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	4313      	orrs	r3, r2
 800142c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800142e:	f000 f821 	bl	8001474 <HAL_RCC_GetSysClockFreq>
 8001432:	4602      	mov	r2, r0
 8001434:	4b0b      	ldr	r3, [pc, #44]	@ (8001464 <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	490a      	ldr	r1, [pc, #40]	@ (8001468 <HAL_RCC_ClockConfig+0x1c8>)
 8001440:	5ccb      	ldrb	r3, [r1, r3]
 8001442:	fa22 f303 	lsr.w	r3, r2, r3
 8001446:	4a09      	ldr	r2, [pc, #36]	@ (800146c <HAL_RCC_ClockConfig+0x1cc>)
 8001448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800144a:	4b09      	ldr	r3, [pc, #36]	@ (8001470 <HAL_RCC_ClockConfig+0x1d0>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f9d8 	bl	8000804 <HAL_InitTick>

  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	40022000 	.word	0x40022000
 8001464:	40021000 	.word	0x40021000
 8001468:	08004754 	.word	0x08004754
 800146c:	20000000 	.word	0x20000000
 8001470:	20000004 	.word	0x20000004

08001474 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001474:	b480      	push	{r7}
 8001476:	b087      	sub	sp, #28
 8001478:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	2300      	movs	r3, #0
 8001480:	60bb      	str	r3, [r7, #8]
 8001482:	2300      	movs	r3, #0
 8001484:	617b      	str	r3, [r7, #20]
 8001486:	2300      	movs	r3, #0
 8001488:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800148a:	2300      	movs	r3, #0
 800148c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800148e:	4b1e      	ldr	r3, [pc, #120]	@ (8001508 <HAL_RCC_GetSysClockFreq+0x94>)
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b04      	cmp	r3, #4
 800149c:	d002      	beq.n	80014a4 <HAL_RCC_GetSysClockFreq+0x30>
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d003      	beq.n	80014aa <HAL_RCC_GetSysClockFreq+0x36>
 80014a2:	e027      	b.n	80014f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <HAL_RCC_GetSysClockFreq+0x98>)
 80014a6:	613b      	str	r3, [r7, #16]
      break;
 80014a8:	e027      	b.n	80014fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	0c9b      	lsrs	r3, r3, #18
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	4a17      	ldr	r2, [pc, #92]	@ (8001510 <HAL_RCC_GetSysClockFreq+0x9c>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d010      	beq.n	80014e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80014c2:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <HAL_RCC_GetSysClockFreq+0x94>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	0c5b      	lsrs	r3, r3, #17
 80014c8:	f003 0301 	and.w	r3, r3, #1
 80014cc:	4a11      	ldr	r2, [pc, #68]	@ (8001514 <HAL_RCC_GetSysClockFreq+0xa0>)
 80014ce:	5cd3      	ldrb	r3, [r2, r3]
 80014d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <HAL_RCC_GetSysClockFreq+0x98>)
 80014d6:	fb03 f202 	mul.w	r2, r3, r2
 80014da:	68bb      	ldr	r3, [r7, #8]
 80014dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e004      	b.n	80014ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a0c      	ldr	r2, [pc, #48]	@ (8001518 <HAL_RCC_GetSysClockFreq+0xa4>)
 80014e8:	fb02 f303 	mul.w	r3, r2, r3
 80014ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	613b      	str	r3, [r7, #16]
      break;
 80014f2:	e002      	b.n	80014fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80014f4:	4b05      	ldr	r3, [pc, #20]	@ (800150c <HAL_RCC_GetSysClockFreq+0x98>)
 80014f6:	613b      	str	r3, [r7, #16]
      break;
 80014f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014fa:	693b      	ldr	r3, [r7, #16]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	371c      	adds	r7, #28
 8001500:	46bd      	mov	sp, r7
 8001502:	bc80      	pop	{r7}
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40021000 	.word	0x40021000
 800150c:	007a1200 	.word	0x007a1200
 8001510:	0800476c 	.word	0x0800476c
 8001514:	0800477c 	.word	0x0800477c
 8001518:	003d0900 	.word	0x003d0900

0800151c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001520:	4b02      	ldr	r3, [pc, #8]	@ (800152c <HAL_RCC_GetHCLKFreq+0x10>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	20000000 	.word	0x20000000

08001530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001534:	f7ff fff2 	bl	800151c <HAL_RCC_GetHCLKFreq>
 8001538:	4602      	mov	r2, r0
 800153a:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <HAL_RCC_GetPCLK1Freq+0x20>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	4903      	ldr	r1, [pc, #12]	@ (8001554 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001546:	5ccb      	ldrb	r3, [r1, r3]
 8001548:	fa22 f303 	lsr.w	r3, r2, r3
}
 800154c:	4618      	mov	r0, r3
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40021000 	.word	0x40021000
 8001554:	08004764 	.word	0x08004764

08001558 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800155c:	f7ff ffde 	bl	800151c <HAL_RCC_GetHCLKFreq>
 8001560:	4602      	mov	r2, r0
 8001562:	4b05      	ldr	r3, [pc, #20]	@ (8001578 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	0adb      	lsrs	r3, r3, #11
 8001568:	f003 0307 	and.w	r3, r3, #7
 800156c:	4903      	ldr	r1, [pc, #12]	@ (800157c <HAL_RCC_GetPCLK2Freq+0x24>)
 800156e:	5ccb      	ldrb	r3, [r1, r3]
 8001570:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001574:	4618      	mov	r0, r3
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40021000 	.word	0x40021000
 800157c:	08004764 	.word	0x08004764

08001580 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001588:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <RCC_Delay+0x34>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <RCC_Delay+0x38>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0a5b      	lsrs	r3, r3, #9
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	fb02 f303 	mul.w	r3, r2, r3
 800159a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800159c:	bf00      	nop
  }
  while (Delay --);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	1e5a      	subs	r2, r3, #1
 80015a2:	60fa      	str	r2, [r7, #12]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1f9      	bne.n	800159c <RCC_Delay+0x1c>
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	20000000 	.word	0x20000000
 80015b8:	10624dd3 	.word	0x10624dd3

080015bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e076      	b.n	80016bc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d108      	bne.n	80015e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80015de:	d009      	beq.n	80015f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
 80015e6:	e005      	b.n	80015f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2200      	movs	r2, #0
 80015f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d106      	bne.n	8001614 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2200      	movs	r2, #0
 800160a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f000 f858 	bl	80016c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2202      	movs	r2, #2
 8001618:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800162a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800163c:	431a      	orrs	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	691b      	ldr	r3, [r3, #16]
 800164c:	f003 0302 	and.w	r3, r3, #2
 8001650:	431a      	orrs	r2, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	431a      	orrs	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	699b      	ldr	r3, [r3, #24]
 8001660:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001664:	431a      	orrs	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6a1b      	ldr	r3, [r3, #32]
 8001674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001678:	ea42 0103 	orr.w	r1, r2, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001680:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	430a      	orrs	r2, r1
 800168a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	0c1a      	lsrs	r2, r3, #16
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f002 0204 	and.w	r2, r2, #4
 800169a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80016ba:	2300      	movs	r3, #0
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bc80      	pop	{r7}
 80016d4:	4770      	bx	lr

080016d6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d101      	bne.n	80016e8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e042      	b.n	800176e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d106      	bne.n	8001702 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f000 f83a 	bl	8001776 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2224      	movs	r2, #36	@ 0x24
 8001706:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68da      	ldr	r2, [r3, #12]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001718:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f000 f934 	bl	8001988 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	691a      	ldr	r2, [r3, #16]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800172e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	695a      	ldr	r2, [r3, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800173e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68da      	ldr	r2, [r3, #12]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800174e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2220      	movs	r2, #32
 800175a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2220      	movs	r2, #32
 8001762:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800176c:	2300      	movs	r3, #0
}
 800176e:	4618      	mov	r0, r3
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001776:	b480      	push	{r7}
 8001778:	b083      	sub	sp, #12
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	bc80      	pop	{r7}
 8001786:	4770      	bx	lr

08001788 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	@ 0x28
 800178c:	af02      	add	r7, sp, #8
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	4613      	mov	r3, r2
 8001796:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b20      	cmp	r3, #32
 80017a6:	d17c      	bne.n	80018a2 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d002      	beq.n	80017b4 <HAL_UART_Receive+0x2c>
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e075      	b.n	80018a4 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	2222      	movs	r2, #34	@ 0x22
 80017c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	2200      	movs	r2, #0
 80017ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80017cc:	f7ff f85c 	bl	8000888 <HAL_GetTick>
 80017d0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	88fa      	ldrh	r2, [r7, #6]
 80017d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	88fa      	ldrh	r2, [r7, #6]
 80017dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017e6:	d108      	bne.n	80017fa <HAL_UART_Receive+0x72>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d104      	bne.n	80017fa <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	61bb      	str	r3, [r7, #24]
 80017f8:	e003      	b.n	8001802 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001802:	e043      	b.n	800188c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	9300      	str	r3, [sp, #0]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	2200      	movs	r2, #0
 800180c:	2120      	movs	r1, #32
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f000 f84c 	bl	80018ac <UART_WaitOnFlagUntilTimeout>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e042      	b.n	80018a4 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10c      	bne.n	800183e <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	b29b      	uxth	r3, r3
 800182c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001830:	b29a      	uxth	r2, r3
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001836:	69bb      	ldr	r3, [r7, #24]
 8001838:	3302      	adds	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
 800183c:	e01f      	b.n	800187e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001846:	d007      	beq.n	8001858 <HAL_UART_Receive+0xd0>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10a      	bne.n	8001866 <HAL_UART_Receive+0xde>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d106      	bne.n	8001866 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	b2da      	uxtb	r2, r3
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e008      	b.n	8001878 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	b2db      	uxtb	r3, r3
 800186e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001872:	b2da      	uxtb	r2, r3
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	3301      	adds	r3, #1
 800187c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	b29a      	uxth	r2, r3
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001890:	b29b      	uxth	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d1b6      	bne.n	8001804 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2220      	movs	r2, #32
 800189a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80018a2:	2302      	movs	r3, #2
  }
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b090      	sub	sp, #64	@ 0x40
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	603b      	str	r3, [r7, #0]
 80018b8:	4613      	mov	r3, r2
 80018ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80018bc:	e050      	b.n	8001960 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c4:	d04c      	beq.n	8001960 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d007      	beq.n	80018dc <UART_WaitOnFlagUntilTimeout+0x30>
 80018cc:	f7fe ffdc 	bl	8000888 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80018d8:	429a      	cmp	r2, r3
 80018da:	d241      	bcs.n	8001960 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	330c      	adds	r3, #12
 80018e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80018e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018e6:	e853 3f00 	ldrex	r3, [r3]
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80018ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ee:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80018f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	330c      	adds	r3, #12
 80018fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80018fc:	637a      	str	r2, [r7, #52]	@ 0x34
 80018fe:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001900:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001902:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001904:	e841 2300 	strex	r3, r2, [r1]
 8001908:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800190a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1e5      	bne.n	80018dc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	3314      	adds	r3, #20
 8001916:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	e853 3f00 	ldrex	r3, [r3]
 800191e:	613b      	str	r3, [r7, #16]
   return(result);
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	f023 0301 	bic.w	r3, r3, #1
 8001926:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	3314      	adds	r3, #20
 800192e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8001930:	623a      	str	r2, [r7, #32]
 8001932:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001934:	69f9      	ldr	r1, [r7, #28]
 8001936:	6a3a      	ldr	r2, [r7, #32]
 8001938:	e841 2300 	strex	r3, r2, [r1]
 800193c:	61bb      	str	r3, [r7, #24]
   return(result);
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1e5      	bne.n	8001910 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	2220      	movs	r2, #32
 8001948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e00f      	b.n	8001980 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	4013      	ands	r3, r2
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	429a      	cmp	r2, r3
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	461a      	mov	r2, r3
 8001978:	79fb      	ldrb	r3, [r7, #7]
 800197a:	429a      	cmp	r2, r3
 800197c:	d09f      	beq.n	80018be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3740      	adds	r7, #64	@ 0x40
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	691b      	ldr	r3, [r3, #16]
 8001996:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689a      	ldr	r2, [r3, #8]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	431a      	orrs	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	695b      	ldr	r3, [r3, #20]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80019c2:	f023 030c 	bic.w	r3, r3, #12
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	6812      	ldr	r2, [r2, #0]
 80019ca:	68b9      	ldr	r1, [r7, #8]
 80019cc:	430b      	orrs	r3, r1
 80019ce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	695b      	ldr	r3, [r3, #20]
 80019d6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	699a      	ldr	r2, [r3, #24]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a2c      	ldr	r2, [pc, #176]	@ (8001a9c <UART_SetConfig+0x114>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d103      	bne.n	80019f8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80019f0:	f7ff fdb2 	bl	8001558 <HAL_RCC_GetPCLK2Freq>
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	e002      	b.n	80019fe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80019f8:	f7ff fd9a 	bl	8001530 <HAL_RCC_GetPCLK1Freq>
 80019fc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	4613      	mov	r3, r2
 8001a02:	009b      	lsls	r3, r3, #2
 8001a04:	4413      	add	r3, r2
 8001a06:	009a      	lsls	r2, r3, #2
 8001a08:	441a      	add	r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a14:	4a22      	ldr	r2, [pc, #136]	@ (8001aa0 <UART_SetConfig+0x118>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	095b      	lsrs	r3, r3, #5
 8001a1c:	0119      	lsls	r1, r3, #4
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	009a      	lsls	r2, r3, #2
 8001a28:	441a      	add	r2, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a34:	4b1a      	ldr	r3, [pc, #104]	@ (8001aa0 <UART_SetConfig+0x118>)
 8001a36:	fba3 0302 	umull	r0, r3, r3, r2
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2064      	movs	r0, #100	@ 0x64
 8001a3e:	fb00 f303 	mul.w	r3, r0, r3
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	011b      	lsls	r3, r3, #4
 8001a46:	3332      	adds	r3, #50	@ 0x32
 8001a48:	4a15      	ldr	r2, [pc, #84]	@ (8001aa0 <UART_SetConfig+0x118>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a54:	4419      	add	r1, r3
 8001a56:	68fa      	ldr	r2, [r7, #12]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009a      	lsls	r2, r3, #2
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa0 <UART_SetConfig+0x118>)
 8001a6e:	fba3 0302 	umull	r0, r3, r3, r2
 8001a72:	095b      	lsrs	r3, r3, #5
 8001a74:	2064      	movs	r0, #100	@ 0x64
 8001a76:	fb00 f303 	mul.w	r3, r0, r3
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	011b      	lsls	r3, r3, #4
 8001a7e:	3332      	adds	r3, #50	@ 0x32
 8001a80:	4a07      	ldr	r2, [pc, #28]	@ (8001aa0 <UART_SetConfig+0x118>)
 8001a82:	fba2 2303 	umull	r2, r3, r2, r3
 8001a86:	095b      	lsrs	r3, r3, #5
 8001a88:	f003 020f 	and.w	r2, r3, #15
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	440a      	add	r2, r1
 8001a92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001a94:	bf00      	nop
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40013800 	.word	0x40013800
 8001aa0:	51eb851f 	.word	0x51eb851f

08001aa4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f103 0208 	add.w	r2, r3, #8
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8001abc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f103 0208 	add.w	r2, r3, #8
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f103 0208 	add.w	r2, r3, #8
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001ad8:	bf00      	nop
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr

08001afa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	683a      	ldr	r2, [r7, #0]
 8001b1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	683a      	ldr	r2, [r7, #0]
 8001b24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	1c5a      	adds	r2, r3, #1
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	601a      	str	r2, [r3, #0]
}
 8001b36:	bf00      	nop
 8001b38:	3714      	adds	r7, #20
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bc80      	pop	{r7}
 8001b3e:	4770      	bx	lr

08001b40 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	691b      	ldr	r3, [r3, #16]
 8001b4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6892      	ldr	r2, [r2, #8]
 8001b56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6852      	ldr	r2, [r2, #4]
 8001b60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d103      	bne.n	8001b74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	1e5a      	subs	r2, r3, #1
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bc80      	pop	{r7}
 8001b90:	4770      	bx	lr

08001b92 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b08e      	sub	sp, #56	@ 0x38
 8001b96:	af04      	add	r7, sp, #16
 8001b98:	60f8      	str	r0, [r7, #12]
 8001b9a:	60b9      	str	r1, [r7, #8]
 8001b9c:	607a      	str	r2, [r7, #4]
 8001b9e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10b      	bne.n	8001bbe <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001baa:	f383 8811 	msr	BASEPRI, r3
 8001bae:	f3bf 8f6f 	isb	sy
 8001bb2:	f3bf 8f4f 	dsb	sy
 8001bb6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	e7fd      	b.n	8001bba <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d10b      	bne.n	8001bdc <xTaskCreateStatic+0x4a>
	__asm volatile
 8001bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bc8:	f383 8811 	msr	BASEPRI, r3
 8001bcc:	f3bf 8f6f 	isb	sy
 8001bd0:	f3bf 8f4f 	dsb	sy
 8001bd4:	61fb      	str	r3, [r7, #28]
}
 8001bd6:	bf00      	nop
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001bdc:	2354      	movs	r3, #84	@ 0x54
 8001bde:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	2b54      	cmp	r3, #84	@ 0x54
 8001be4:	d00b      	beq.n	8001bfe <xTaskCreateStatic+0x6c>
	__asm volatile
 8001be6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001bea:	f383 8811 	msr	BASEPRI, r3
 8001bee:	f3bf 8f6f 	isb	sy
 8001bf2:	f3bf 8f4f 	dsb	sy
 8001bf6:	61bb      	str	r3, [r7, #24]
}
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop
 8001bfc:	e7fd      	b.n	8001bfa <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d01e      	beq.n	8001c42 <xTaskCreateStatic+0xb0>
 8001c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d01b      	beq.n	8001c42 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	2202      	movs	r2, #2
 8001c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9303      	str	r3, [sp, #12]
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	9302      	str	r3, [sp, #8]
 8001c24:	f107 0314 	add.w	r3, r7, #20
 8001c28:	9301      	str	r3, [sp, #4]
 8001c2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001c2c:	9300      	str	r3, [sp, #0]
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	68b9      	ldr	r1, [r7, #8]
 8001c34:	68f8      	ldr	r0, [r7, #12]
 8001c36:	f000 f850 	bl	8001cda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001c3c:	f000 f8ce 	bl	8001ddc <prvAddNewTaskToReadyList>
 8001c40:	e001      	b.n	8001c46 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001c46:	697b      	ldr	r3, [r7, #20]
	}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3728      	adds	r7, #40	@ 0x28
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08c      	sub	sp, #48	@ 0x30
 8001c54:	af04      	add	r7, sp, #16
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001c60:	88fb      	ldrh	r3, [r7, #6]
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4618      	mov	r0, r3
 8001c66:	f000 fe83 	bl	8002970 <pvPortMalloc>
 8001c6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00e      	beq.n	8001c90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001c72:	2054      	movs	r0, #84	@ 0x54
 8001c74:	f000 fe7c 	bl	8002970 <pvPortMalloc>
 8001c78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	631a      	str	r2, [r3, #48]	@ 0x30
 8001c86:	e005      	b.n	8001c94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001c88:	6978      	ldr	r0, [r7, #20]
 8001c8a:	f000 ff39 	bl	8002b00 <vPortFree>
 8001c8e:	e001      	b.n	8001c94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d017      	beq.n	8001cca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001ca2:	88fa      	ldrh	r2, [r7, #6]
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	9303      	str	r3, [sp, #12]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	9302      	str	r3, [sp, #8]
 8001cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cae:	9301      	str	r3, [sp, #4]
 8001cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	68b9      	ldr	r1, [r7, #8]
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 f80e 	bl	8001cda <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001cbe:	69f8      	ldr	r0, [r7, #28]
 8001cc0:	f000 f88c 	bl	8001ddc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	e002      	b.n	8001cd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001cca:	f04f 33ff 	mov.w	r3, #4294967295
 8001cce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001cd0:	69bb      	ldr	r3, [r7, #24]
	}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3720      	adds	r7, #32
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b088      	sub	sp, #32
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	4413      	add	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f023 0307 	bic.w	r3, r3, #7
 8001d00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d00b      	beq.n	8001d24 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d10:	f383 8811 	msr	BASEPRI, r3
 8001d14:	f3bf 8f6f 	isb	sy
 8001d18:	f3bf 8f4f 	dsb	sy
 8001d1c:	617b      	str	r3, [r7, #20]
}
 8001d1e:	bf00      	nop
 8001d20:	bf00      	nop
 8001d22:	e7fd      	b.n	8001d20 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
 8001d28:	e012      	b.n	8001d50 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	4413      	add	r3, r2
 8001d30:	7819      	ldrb	r1, [r3, #0]
 8001d32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	4413      	add	r3, r2
 8001d38:	3334      	adds	r3, #52	@ 0x34
 8001d3a:	460a      	mov	r2, r1
 8001d3c:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	4413      	add	r3, r2
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d006      	beq.n	8001d58 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d4a:	69fb      	ldr	r3, [r7, #28]
 8001d4c:	3301      	adds	r3, #1
 8001d4e:	61fb      	str	r3, [r7, #28]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	d9e9      	bls.n	8001d2a <prvInitialiseNewTask+0x50>
 8001d56:	e000      	b.n	8001d5a <prvInitialiseNewTask+0x80>
		{
			break;
 8001d58:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d64:	2b06      	cmp	r3, #6
 8001d66:	d901      	bls.n	8001d6c <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d68:	2306      	movs	r3, #6
 8001d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d70:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d74:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001d76:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d80:	3304      	adds	r3, #4
 8001d82:	4618      	mov	r0, r3
 8001d84:	f7ff fead 	bl	8001ae2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8a:	3318      	adds	r3, #24
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f7ff fea8 	bl	8001ae2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001d96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d9a:	f1c3 0207 	rsb	r2, r3, #7
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001da6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001daa:	2200      	movs	r2, #0
 8001dac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	68f9      	ldr	r1, [r7, #12]
 8001dba:	69b8      	ldr	r0, [r7, #24]
 8001dbc:	f000 fbde 	bl	800257c <pxPortInitialiseStack>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dc4:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001dd2:	bf00      	nop
 8001dd4:	3720      	adds	r7, #32
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
	...

08001ddc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001ddc:	b5b0      	push	{r4, r5, r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001de4:	f000 fcba 	bl	800275c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001de8:	4b39      	ldr	r3, [pc, #228]	@ (8001ed0 <prvAddNewTaskToReadyList+0xf4>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	3301      	adds	r3, #1
 8001dee:	4a38      	ldr	r2, [pc, #224]	@ (8001ed0 <prvAddNewTaskToReadyList+0xf4>)
 8001df0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001df2:	4b38      	ldr	r3, [pc, #224]	@ (8001ed4 <prvAddNewTaskToReadyList+0xf8>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001dfa:	4a36      	ldr	r2, [pc, #216]	@ (8001ed4 <prvAddNewTaskToReadyList+0xf8>)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001e00:	4b33      	ldr	r3, [pc, #204]	@ (8001ed0 <prvAddNewTaskToReadyList+0xf4>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d110      	bne.n	8001e2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001e08:	f000 fad8 	bl	80023bc <prvInitialiseTaskLists>
 8001e0c:	e00d      	b.n	8001e2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001e0e:	4b32      	ldr	r3, [pc, #200]	@ (8001ed8 <prvAddNewTaskToReadyList+0xfc>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d109      	bne.n	8001e2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001e16:	4b2f      	ldr	r3, [pc, #188]	@ (8001ed4 <prvAddNewTaskToReadyList+0xf8>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d802      	bhi.n	8001e2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001e24:	4a2b      	ldr	r2, [pc, #172]	@ (8001ed4 <prvAddNewTaskToReadyList+0xf8>)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8001edc <prvAddNewTaskToReadyList+0x100>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	4a2a      	ldr	r2, [pc, #168]	@ (8001edc <prvAddNewTaskToReadyList+0x100>)
 8001e32:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d016      	beq.n	8001e68 <prvAddNewTaskToReadyList+0x8c>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f002 f9c1 	bl	80041c4 <SEGGER_SYSVIEW_OnTaskCreate>
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	461d      	mov	r5, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	461c      	mov	r4, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	1ae3      	subs	r3, r4, r3
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	462b      	mov	r3, r5
 8001e64:	f001 f812 	bl	8002e8c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f002 fa2e 	bl	80042cc <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e74:	2201      	movs	r2, #1
 8001e76:	409a      	lsls	r2, r3
 8001e78:	4b19      	ldr	r3, [pc, #100]	@ (8001ee0 <prvAddNewTaskToReadyList+0x104>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	4a18      	ldr	r2, [pc, #96]	@ (8001ee0 <prvAddNewTaskToReadyList+0x104>)
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001e86:	4613      	mov	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	4413      	add	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4a15      	ldr	r2, [pc, #84]	@ (8001ee4 <prvAddNewTaskToReadyList+0x108>)
 8001e90:	441a      	add	r2, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	3304      	adds	r3, #4
 8001e96:	4619      	mov	r1, r3
 8001e98:	4610      	mov	r0, r2
 8001e9a:	f7ff fe2e 	bl	8001afa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001e9e:	f000 fc8d 	bl	80027bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <prvAddNewTaskToReadyList+0xfc>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00e      	beq.n	8001ec8 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed4 <prvAddNewTaskToReadyList+0xf8>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d207      	bcs.n	8001ec8 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001eb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ee8 <prvAddNewTaskToReadyList+0x10c>)
 8001eba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	f3bf 8f4f 	dsb	sy
 8001ec4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001ec8:	bf00      	nop
 8001eca:	3708      	adds	r7, #8
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bdb0      	pop	{r4, r5, r7, pc}
 8001ed0:	20000488 	.word	0x20000488
 8001ed4:	20000388 	.word	0x20000388
 8001ed8:	20000494 	.word	0x20000494
 8001edc:	200004a4 	.word	0x200004a4
 8001ee0:	20000490 	.word	0x20000490
 8001ee4:	2000038c 	.word	0x2000038c
 8001ee8:	e000ed04 	.word	0xe000ed04

08001eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b08a      	sub	sp, #40	@ 0x28
 8001ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001efa:	463a      	mov	r2, r7
 8001efc:	1d39      	adds	r1, r7, #4
 8001efe:	f107 0308 	add.w	r3, r7, #8
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe f924 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001f08:	6839      	ldr	r1, [r7, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	68ba      	ldr	r2, [r7, #8]
 8001f0e:	9202      	str	r2, [sp, #8]
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	2300      	movs	r3, #0
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	460a      	mov	r2, r1
 8001f1a:	491f      	ldr	r1, [pc, #124]	@ (8001f98 <vTaskStartScheduler+0xac>)
 8001f1c:	481f      	ldr	r0, [pc, #124]	@ (8001f9c <vTaskStartScheduler+0xb0>)
 8001f1e:	f7ff fe38 	bl	8001b92 <xTaskCreateStatic>
 8001f22:	4603      	mov	r3, r0
 8001f24:	4a1e      	ldr	r2, [pc, #120]	@ (8001fa0 <vTaskStartScheduler+0xb4>)
 8001f26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001f28:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <vTaskStartScheduler+0xb4>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d002      	beq.n	8001f36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001f30:	2301      	movs	r3, #1
 8001f32:	617b      	str	r3, [r7, #20]
 8001f34:	e001      	b.n	8001f3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001f36:	2300      	movs	r3, #0
 8001f38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d116      	bne.n	8001f6e <vTaskStartScheduler+0x82>
	__asm volatile
 8001f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f44:	f383 8811 	msr	BASEPRI, r3
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	613b      	str	r3, [r7, #16]
}
 8001f52:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001f54:	4b13      	ldr	r3, [pc, #76]	@ (8001fa4 <vTaskStartScheduler+0xb8>)
 8001f56:	f04f 32ff 	mov.w	r2, #4294967295
 8001f5a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001f5c:	4b12      	ldr	r3, [pc, #72]	@ (8001fa8 <vTaskStartScheduler+0xbc>)
 8001f5e:	2201      	movs	r2, #1
 8001f60:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8001f62:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <vTaskStartScheduler+0xc0>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001f68:	f000 fb86 	bl	8002678 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001f6c:	e00f      	b.n	8001f8e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f74:	d10b      	bne.n	8001f8e <vTaskStartScheduler+0xa2>
	__asm volatile
 8001f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f7a:	f383 8811 	msr	BASEPRI, r3
 8001f7e:	f3bf 8f6f 	isb	sy
 8001f82:	f3bf 8f4f 	dsb	sy
 8001f86:	60fb      	str	r3, [r7, #12]
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	e7fd      	b.n	8001f8a <vTaskStartScheduler+0x9e>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	08004690 	.word	0x08004690
 8001f9c:	0800238d 	.word	0x0800238d
 8001fa0:	200004ac 	.word	0x200004ac
 8001fa4:	200004a8 	.word	0x200004a8
 8001fa8:	20000494 	.word	0x20000494
 8001fac:	2000048c 	.word	0x2000048c

08001fb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8001fb4:	4b04      	ldr	r3, [pc, #16]	@ (8001fc8 <vTaskSuspendAll+0x18>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	4a03      	ldr	r2, [pc, #12]	@ (8001fc8 <vTaskSuspendAll+0x18>)
 8001fbc:	6013      	str	r3, [r2, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	200004b0 	.word	0x200004b0

08001fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001fda:	4b44      	ldr	r3, [pc, #272]	@ (80020ec <xTaskResumeAll+0x120>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10b      	bne.n	8001ffa <xTaskResumeAll+0x2e>
	__asm volatile
 8001fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fe6:	f383 8811 	msr	BASEPRI, r3
 8001fea:	f3bf 8f6f 	isb	sy
 8001fee:	f3bf 8f4f 	dsb	sy
 8001ff2:	603b      	str	r3, [r7, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	e7fd      	b.n	8001ff6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001ffa:	f000 fbaf 	bl	800275c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80020ec <xTaskResumeAll+0x120>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	3b01      	subs	r3, #1
 8002004:	4a39      	ldr	r2, [pc, #228]	@ (80020ec <xTaskResumeAll+0x120>)
 8002006:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002008:	4b38      	ldr	r3, [pc, #224]	@ (80020ec <xTaskResumeAll+0x120>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d165      	bne.n	80020dc <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002010:	4b37      	ldr	r3, [pc, #220]	@ (80020f0 <xTaskResumeAll+0x124>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d061      	beq.n	80020dc <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002018:	e032      	b.n	8002080 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800201a:	4b36      	ldr	r3, [pc, #216]	@ (80020f4 <xTaskResumeAll+0x128>)
 800201c:	68db      	ldr	r3, [r3, #12]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3318      	adds	r3, #24
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fd8a 	bl	8001b40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	3304      	adds	r3, #4
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fd85 	bl	8001b40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	4618      	mov	r0, r3
 800203a:	f002 f947 	bl	80042cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002042:	2201      	movs	r2, #1
 8002044:	409a      	lsls	r2, r3
 8002046:	4b2c      	ldr	r3, [pc, #176]	@ (80020f8 <xTaskResumeAll+0x12c>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4313      	orrs	r3, r2
 800204c:	4a2a      	ldr	r2, [pc, #168]	@ (80020f8 <xTaskResumeAll+0x12c>)
 800204e:	6013      	str	r3, [r2, #0]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002054:	4613      	mov	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	4a27      	ldr	r2, [pc, #156]	@ (80020fc <xTaskResumeAll+0x130>)
 800205e:	441a      	add	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3304      	adds	r3, #4
 8002064:	4619      	mov	r1, r3
 8002066:	4610      	mov	r0, r2
 8002068:	f7ff fd47 	bl	8001afa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002070:	4b23      	ldr	r3, [pc, #140]	@ (8002100 <xTaskResumeAll+0x134>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002076:	429a      	cmp	r2, r3
 8002078:	d302      	bcc.n	8002080 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 800207a:	4b22      	ldr	r3, [pc, #136]	@ (8002104 <xTaskResumeAll+0x138>)
 800207c:	2201      	movs	r2, #1
 800207e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002080:	4b1c      	ldr	r3, [pc, #112]	@ (80020f4 <xTaskResumeAll+0x128>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d1c8      	bne.n	800201a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800208e:	f000 fa33 	bl	80024f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002092:	4b1d      	ldr	r3, [pc, #116]	@ (8002108 <xTaskResumeAll+0x13c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d010      	beq.n	80020c0 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800209e:	f000 f849 	bl	8002134 <xTaskIncrementTick>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d002      	beq.n	80020ae <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 80020a8:	4b16      	ldr	r3, [pc, #88]	@ (8002104 <xTaskResumeAll+0x138>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f1      	bne.n	800209e <xTaskResumeAll+0xd2>

						uxPendedTicks = 0;
 80020ba:	4b13      	ldr	r3, [pc, #76]	@ (8002108 <xTaskResumeAll+0x13c>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80020c0:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <xTaskResumeAll+0x138>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d009      	beq.n	80020dc <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80020c8:	2301      	movs	r3, #1
 80020ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80020cc:	4b0f      	ldr	r3, [pc, #60]	@ (800210c <xTaskResumeAll+0x140>)
 80020ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020d2:	601a      	str	r2, [r3, #0]
 80020d4:	f3bf 8f4f 	dsb	sy
 80020d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80020dc:	f000 fb6e 	bl	80027bc <vPortExitCritical>

	return xAlreadyYielded;
 80020e0:	68bb      	ldr	r3, [r7, #8]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3710      	adds	r7, #16
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	200004b0 	.word	0x200004b0
 80020f0:	20000488 	.word	0x20000488
 80020f4:	20000448 	.word	0x20000448
 80020f8:	20000490 	.word	0x20000490
 80020fc:	2000038c 	.word	0x2000038c
 8002100:	20000388 	.word	0x20000388
 8002104:	2000049c 	.word	0x2000049c
 8002108:	20000498 	.word	0x20000498
 800210c:	e000ed04 	.word	0xe000ed04

08002110 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002116:	f000 fbeb 	bl	80028f0 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800211a:	2300      	movs	r3, #0
 800211c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800211e:	4b04      	ldr	r3, [pc, #16]	@ (8002130 <xTaskGetTickCountFromISR+0x20>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002124:	683b      	ldr	r3, [r7, #0]
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	2000048c 	.word	0x2000048c

08002134 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800213e:	4b53      	ldr	r3, [pc, #332]	@ (800228c <xTaskIncrementTick+0x158>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2b00      	cmp	r3, #0
 8002144:	f040 8092 	bne.w	800226c <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002148:	4b51      	ldr	r3, [pc, #324]	@ (8002290 <xTaskIncrementTick+0x15c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3301      	adds	r3, #1
 800214e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002150:	4a4f      	ldr	r2, [pc, #316]	@ (8002290 <xTaskIncrementTick+0x15c>)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d121      	bne.n	80021a0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800215c:	4b4d      	ldr	r3, [pc, #308]	@ (8002294 <xTaskIncrementTick+0x160>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00b      	beq.n	800217e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800216a:	f383 8811 	msr	BASEPRI, r3
 800216e:	f3bf 8f6f 	isb	sy
 8002172:	f3bf 8f4f 	dsb	sy
 8002176:	603b      	str	r3, [r7, #0]
}
 8002178:	bf00      	nop
 800217a:	bf00      	nop
 800217c:	e7fd      	b.n	800217a <xTaskIncrementTick+0x46>
 800217e:	4b45      	ldr	r3, [pc, #276]	@ (8002294 <xTaskIncrementTick+0x160>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	60fb      	str	r3, [r7, #12]
 8002184:	4b44      	ldr	r3, [pc, #272]	@ (8002298 <xTaskIncrementTick+0x164>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a42      	ldr	r2, [pc, #264]	@ (8002294 <xTaskIncrementTick+0x160>)
 800218a:	6013      	str	r3, [r2, #0]
 800218c:	4a42      	ldr	r2, [pc, #264]	@ (8002298 <xTaskIncrementTick+0x164>)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b42      	ldr	r3, [pc, #264]	@ (800229c <xTaskIncrementTick+0x168>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	4a40      	ldr	r2, [pc, #256]	@ (800229c <xTaskIncrementTick+0x168>)
 800219a:	6013      	str	r3, [r2, #0]
 800219c:	f000 f9ac 	bl	80024f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80021a0:	4b3f      	ldr	r3, [pc, #252]	@ (80022a0 <xTaskIncrementTick+0x16c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d351      	bcc.n	800224e <xTaskIncrementTick+0x11a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80021aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002294 <xTaskIncrementTick+0x160>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d101      	bne.n	80021b8 <xTaskIncrementTick+0x84>
 80021b4:	2301      	movs	r3, #1
 80021b6:	e000      	b.n	80021ba <xTaskIncrementTick+0x86>
 80021b8:	2300      	movs	r3, #0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d004      	beq.n	80021c8 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80021be:	4b38      	ldr	r3, [pc, #224]	@ (80022a0 <xTaskIncrementTick+0x16c>)
 80021c0:	f04f 32ff 	mov.w	r2, #4294967295
 80021c4:	601a      	str	r2, [r3, #0]
					break;
 80021c6:	e042      	b.n	800224e <xTaskIncrementTick+0x11a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80021c8:	4b32      	ldr	r3, [pc, #200]	@ (8002294 <xTaskIncrementTick+0x160>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d203      	bcs.n	80021e8 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80021e0:	4a2f      	ldr	r2, [pc, #188]	@ (80022a0 <xTaskIncrementTick+0x16c>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6013      	str	r3, [r2, #0]
						break;
 80021e6:	e032      	b.n	800224e <xTaskIncrementTick+0x11a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	3304      	adds	r3, #4
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fca7 	bl	8001b40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d004      	beq.n	8002204 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	3318      	adds	r3, #24
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fc9e 	bl	8001b40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	4618      	mov	r0, r3
 8002208:	f002 f860 	bl	80042cc <SEGGER_SYSVIEW_OnTaskStartReady>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002210:	2201      	movs	r2, #1
 8002212:	409a      	lsls	r2, r3
 8002214:	4b23      	ldr	r3, [pc, #140]	@ (80022a4 <xTaskIncrementTick+0x170>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4313      	orrs	r3, r2
 800221a:	4a22      	ldr	r2, [pc, #136]	@ (80022a4 <xTaskIncrementTick+0x170>)
 800221c:	6013      	str	r3, [r2, #0]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002222:	4613      	mov	r3, r2
 8002224:	009b      	lsls	r3, r3, #2
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4a1f      	ldr	r2, [pc, #124]	@ (80022a8 <xTaskIncrementTick+0x174>)
 800222c:	441a      	add	r2, r3
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	3304      	adds	r3, #4
 8002232:	4619      	mov	r1, r3
 8002234:	4610      	mov	r0, r2
 8002236:	f7ff fc60 	bl	8001afa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800223e:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <xTaskIncrementTick+0x178>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002244:	429a      	cmp	r2, r3
 8002246:	d3b0      	bcc.n	80021aa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002248:	2301      	movs	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800224c:	e7ad      	b.n	80021aa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800224e:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <xTaskIncrementTick+0x178>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002254:	4914      	ldr	r1, [pc, #80]	@ (80022a8 <xTaskIncrementTick+0x174>)
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	440b      	add	r3, r1
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d907      	bls.n	8002276 <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 8002266:	2301      	movs	r3, #1
 8002268:	617b      	str	r3, [r7, #20]
 800226a:	e004      	b.n	8002276 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800226c:	4b10      	ldr	r3, [pc, #64]	@ (80022b0 <xTaskIncrementTick+0x17c>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	4a0f      	ldr	r2, [pc, #60]	@ (80022b0 <xTaskIncrementTick+0x17c>)
 8002274:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002276:	4b0f      	ldr	r3, [pc, #60]	@ (80022b4 <xTaskIncrementTick+0x180>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 800227e:	2301      	movs	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002282:	697b      	ldr	r3, [r7, #20]
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	200004b0 	.word	0x200004b0
 8002290:	2000048c 	.word	0x2000048c
 8002294:	20000440 	.word	0x20000440
 8002298:	20000444 	.word	0x20000444
 800229c:	200004a0 	.word	0x200004a0
 80022a0:	200004a8 	.word	0x200004a8
 80022a4:	20000490 	.word	0x20000490
 80022a8:	2000038c 	.word	0x2000038c
 80022ac:	20000388 	.word	0x20000388
 80022b0:	20000498 	.word	0x20000498
 80022b4:	2000049c 	.word	0x2000049c

080022b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b086      	sub	sp, #24
 80022bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80022be:	4b2d      	ldr	r3, [pc, #180]	@ (8002374 <vTaskSwitchContext+0xbc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80022c6:	4b2c      	ldr	r3, [pc, #176]	@ (8002378 <vTaskSwitchContext+0xc0>)
 80022c8:	2201      	movs	r2, #1
 80022ca:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80022cc:	e04e      	b.n	800236c <vTaskSwitchContext+0xb4>
		xYieldPending = pdFALSE;
 80022ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002378 <vTaskSwitchContext+0xc0>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80022d4:	4b29      	ldr	r3, [pc, #164]	@ (800237c <vTaskSwitchContext+0xc4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	fab3 f383 	clz	r3, r3
 80022e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80022e2:	7afb      	ldrb	r3, [r7, #11]
 80022e4:	f1c3 031f 	rsb	r3, r3, #31
 80022e8:	617b      	str	r3, [r7, #20]
 80022ea:	4925      	ldr	r1, [pc, #148]	@ (8002380 <vTaskSwitchContext+0xc8>)
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	4613      	mov	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4413      	add	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10b      	bne.n	8002316 <vTaskSwitchContext+0x5e>
	__asm volatile
 80022fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002302:	f383 8811 	msr	BASEPRI, r3
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	607b      	str	r3, [r7, #4]
}
 8002310:	bf00      	nop
 8002312:	bf00      	nop
 8002314:	e7fd      	b.n	8002312 <vTaskSwitchContext+0x5a>
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4a17      	ldr	r2, [pc, #92]	@ (8002380 <vTaskSwitchContext+0xc8>)
 8002322:	4413      	add	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	685a      	ldr	r2, [r3, #4]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	605a      	str	r2, [r3, #4]
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	3308      	adds	r3, #8
 8002338:	429a      	cmp	r2, r3
 800233a:	d104      	bne.n	8002346 <vTaskSwitchContext+0x8e>
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4a0d      	ldr	r2, [pc, #52]	@ (8002384 <vTaskSwitchContext+0xcc>)
 800234e:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8002350:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <vTaskSwitchContext+0xcc>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <vTaskSwitchContext+0xd0>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	d102      	bne.n	8002362 <vTaskSwitchContext+0xaa>
 800235c:	f001 ff16 	bl	800418c <SEGGER_SYSVIEW_OnIdle>
}
 8002360:	e004      	b.n	800236c <vTaskSwitchContext+0xb4>
		traceTASK_SWITCHED_IN();
 8002362:	4b08      	ldr	r3, [pc, #32]	@ (8002384 <vTaskSwitchContext+0xcc>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f001 ff6e 	bl	8004248 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800236c:	bf00      	nop
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200004b0 	.word	0x200004b0
 8002378:	2000049c 	.word	0x2000049c
 800237c:	20000490 	.word	0x20000490
 8002380:	2000038c 	.word	0x2000038c
 8002384:	20000388 	.word	0x20000388
 8002388:	200004ac 	.word	0x200004ac

0800238c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002394:	f000 f852 	bl	800243c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002398:	4b06      	ldr	r3, [pc, #24]	@ (80023b4 <prvIdleTask+0x28>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d9f9      	bls.n	8002394 <prvIdleTask+0x8>
			{
				taskYIELD();
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <prvIdleTask+0x2c>)
 80023a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	f3bf 8f4f 	dsb	sy
 80023ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80023b0:	e7f0      	b.n	8002394 <prvIdleTask+0x8>
 80023b2:	bf00      	nop
 80023b4:	2000038c 	.word	0x2000038c
 80023b8:	e000ed04 	.word	0xe000ed04

080023bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023c2:	2300      	movs	r3, #0
 80023c4:	607b      	str	r3, [r7, #4]
 80023c6:	e00c      	b.n	80023e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4a12      	ldr	r2, [pc, #72]	@ (800241c <prvInitialiseTaskLists+0x60>)
 80023d4:	4413      	add	r3, r2
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fb64 	bl	8001aa4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3301      	adds	r3, #1
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b06      	cmp	r3, #6
 80023e6:	d9ef      	bls.n	80023c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80023e8:	480d      	ldr	r0, [pc, #52]	@ (8002420 <prvInitialiseTaskLists+0x64>)
 80023ea:	f7ff fb5b 	bl	8001aa4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80023ee:	480d      	ldr	r0, [pc, #52]	@ (8002424 <prvInitialiseTaskLists+0x68>)
 80023f0:	f7ff fb58 	bl	8001aa4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80023f4:	480c      	ldr	r0, [pc, #48]	@ (8002428 <prvInitialiseTaskLists+0x6c>)
 80023f6:	f7ff fb55 	bl	8001aa4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80023fa:	480c      	ldr	r0, [pc, #48]	@ (800242c <prvInitialiseTaskLists+0x70>)
 80023fc:	f7ff fb52 	bl	8001aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002400:	480b      	ldr	r0, [pc, #44]	@ (8002430 <prvInitialiseTaskLists+0x74>)
 8002402:	f7ff fb4f 	bl	8001aa4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002406:	4b0b      	ldr	r3, [pc, #44]	@ (8002434 <prvInitialiseTaskLists+0x78>)
 8002408:	4a05      	ldr	r2, [pc, #20]	@ (8002420 <prvInitialiseTaskLists+0x64>)
 800240a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <prvInitialiseTaskLists+0x7c>)
 800240e:	4a05      	ldr	r2, [pc, #20]	@ (8002424 <prvInitialiseTaskLists+0x68>)
 8002410:	601a      	str	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	2000038c 	.word	0x2000038c
 8002420:	20000418 	.word	0x20000418
 8002424:	2000042c 	.word	0x2000042c
 8002428:	20000448 	.word	0x20000448
 800242c:	2000045c 	.word	0x2000045c
 8002430:	20000474 	.word	0x20000474
 8002434:	20000440 	.word	0x20000440
 8002438:	20000444 	.word	0x20000444

0800243c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002442:	e019      	b.n	8002478 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002444:	f000 f98a 	bl	800275c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002448:	4b10      	ldr	r3, [pc, #64]	@ (800248c <prvCheckTasksWaitingTermination+0x50>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3304      	adds	r3, #4
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fb73 	bl	8001b40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800245a:	4b0d      	ldr	r3, [pc, #52]	@ (8002490 <prvCheckTasksWaitingTermination+0x54>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	3b01      	subs	r3, #1
 8002460:	4a0b      	ldr	r2, [pc, #44]	@ (8002490 <prvCheckTasksWaitingTermination+0x54>)
 8002462:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002464:	4b0b      	ldr	r3, [pc, #44]	@ (8002494 <prvCheckTasksWaitingTermination+0x58>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	3b01      	subs	r3, #1
 800246a:	4a0a      	ldr	r2, [pc, #40]	@ (8002494 <prvCheckTasksWaitingTermination+0x58>)
 800246c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800246e:	f000 f9a5 	bl	80027bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f810 	bl	8002498 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002478:	4b06      	ldr	r3, [pc, #24]	@ (8002494 <prvCheckTasksWaitingTermination+0x58>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d1e1      	bne.n	8002444 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002480:	bf00      	nop
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	2000045c 	.word	0x2000045c
 8002490:	20000488 	.word	0x20000488
 8002494:	20000470 	.word	0x20000470

08002498 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 fb26 	bl	8002b00 <vPortFree>
				vPortFree( pxTCB );
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f000 fb23 	bl	8002b00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80024ba:	e019      	b.n	80024f0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d103      	bne.n	80024ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fb1a 	bl	8002b00 <vPortFree>
	}
 80024cc:	e010      	b.n	80024f0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d00b      	beq.n	80024f0 <prvDeleteTCB+0x58>
	__asm volatile
 80024d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024dc:	f383 8811 	msr	BASEPRI, r3
 80024e0:	f3bf 8f6f 	isb	sy
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	60fb      	str	r3, [r7, #12]
}
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	e7fd      	b.n	80024ec <prvDeleteTCB+0x54>
	}
 80024f0:	bf00      	nop
 80024f2:	3710      	adds	r7, #16
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002538 <prvResetNextTaskUnblockTime+0x40>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <prvResetNextTaskUnblockTime+0x14>
 8002508:	2301      	movs	r3, #1
 800250a:	e000      	b.n	800250e <prvResetNextTaskUnblockTime+0x16>
 800250c:	2300      	movs	r3, #0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d004      	beq.n	800251c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002512:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <prvResetNextTaskUnblockTime+0x44>)
 8002514:	f04f 32ff 	mov.w	r2, #4294967295
 8002518:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800251a:	e008      	b.n	800252e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800251c:	4b06      	ldr	r3, [pc, #24]	@ (8002538 <prvResetNextTaskUnblockTime+0x40>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	4a04      	ldr	r2, [pc, #16]	@ (800253c <prvResetNextTaskUnblockTime+0x44>)
 800252c:	6013      	str	r3, [r2, #0]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	bc80      	pop	{r7}
 8002536:	4770      	bx	lr
 8002538:	20000440 	.word	0x20000440
 800253c:	200004a8 	.word	0x200004a8

08002540 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8002546:	4b0b      	ldr	r3, [pc, #44]	@ (8002574 <xTaskGetSchedulerState+0x34>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800254e:	2301      	movs	r3, #1
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	e008      	b.n	8002566 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002554:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <xTaskGetSchedulerState+0x38>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d102      	bne.n	8002562 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800255c:	2302      	movs	r3, #2
 800255e:	607b      	str	r3, [r7, #4]
 8002560:	e001      	b.n	8002566 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002566:	687b      	ldr	r3, [r7, #4]
	}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	20000494 	.word	0x20000494
 8002578:	200004b0 	.word	0x200004b0

0800257c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800257c:	b480      	push	{r7}
 800257e:	b085      	sub	sp, #20
 8002580:	af00      	add	r7, sp, #0
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	60b9      	str	r1, [r7, #8]
 8002586:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	3b04      	subs	r3, #4
 800258c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002594:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	3b04      	subs	r3, #4
 800259a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	f023 0201 	bic.w	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3b04      	subs	r3, #4
 80025aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80025ac:	4a08      	ldr	r2, [pc, #32]	@ (80025d0 <pxPortInitialiseStack+0x54>)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3b14      	subs	r3, #20
 80025b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	3b20      	subs	r3, #32
 80025c2:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80025c4:	68fb      	ldr	r3, [r7, #12]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3714      	adds	r7, #20
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	080025d5 	.word	0x080025d5

080025d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80025de:	4b12      	ldr	r3, [pc, #72]	@ (8002628 <prvTaskExitError+0x54>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e6:	d00b      	beq.n	8002600 <prvTaskExitError+0x2c>
	__asm volatile
 80025e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ec:	f383 8811 	msr	BASEPRI, r3
 80025f0:	f3bf 8f6f 	isb	sy
 80025f4:	f3bf 8f4f 	dsb	sy
 80025f8:	60fb      	str	r3, [r7, #12]
}
 80025fa:	bf00      	nop
 80025fc:	bf00      	nop
 80025fe:	e7fd      	b.n	80025fc <prvTaskExitError+0x28>
	__asm volatile
 8002600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002604:	f383 8811 	msr	BASEPRI, r3
 8002608:	f3bf 8f6f 	isb	sy
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	60bb      	str	r3, [r7, #8]
}
 8002612:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002614:	bf00      	nop
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0fc      	beq.n	8002616 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800261c:	bf00      	nop
 800261e:	bf00      	nop
 8002620:	3714      	adds	r7, #20
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	2000000c 	.word	0x2000000c
 800262c:	00000000 	.word	0x00000000

08002630 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002630:	4b07      	ldr	r3, [pc, #28]	@ (8002650 <pxCurrentTCBConst2>)
 8002632:	6819      	ldr	r1, [r3, #0]
 8002634:	6808      	ldr	r0, [r1, #0]
 8002636:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800263a:	f380 8809 	msr	PSP, r0
 800263e:	f3bf 8f6f 	isb	sy
 8002642:	f04f 0000 	mov.w	r0, #0
 8002646:	f380 8811 	msr	BASEPRI, r0
 800264a:	f04e 0e0d 	orr.w	lr, lr, #13
 800264e:	4770      	bx	lr

08002650 <pxCurrentTCBConst2>:
 8002650:	20000388 	.word	0x20000388
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002654:	bf00      	nop
 8002656:	bf00      	nop

08002658 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8002658:	4806      	ldr	r0, [pc, #24]	@ (8002674 <prvPortStartFirstTask+0x1c>)
 800265a:	6800      	ldr	r0, [r0, #0]
 800265c:	6800      	ldr	r0, [r0, #0]
 800265e:	f380 8808 	msr	MSP, r0
 8002662:	b662      	cpsie	i
 8002664:	b661      	cpsie	f
 8002666:	f3bf 8f4f 	dsb	sy
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	df00      	svc	0
 8002670:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002672:	bf00      	nop
 8002674:	e000ed08 	.word	0xe000ed08

08002678 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800267e:	4b32      	ldr	r3, [pc, #200]	@ (8002748 <xPortStartScheduler+0xd0>)
 8002680:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	b2db      	uxtb	r3, r3
 8002688:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	22ff      	movs	r2, #255	@ 0xff
 800268e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	b2db      	uxtb	r3, r3
 8002696:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002698:	78fb      	ldrb	r3, [r7, #3]
 800269a:	b2db      	uxtb	r3, r3
 800269c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	4b2a      	ldr	r3, [pc, #168]	@ (800274c <xPortStartScheduler+0xd4>)
 80026a4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80026a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002750 <xPortStartScheduler+0xd8>)
 80026a8:	2207      	movs	r2, #7
 80026aa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026ac:	e009      	b.n	80026c2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80026ae:	4b28      	ldr	r3, [pc, #160]	@ (8002750 <xPortStartScheduler+0xd8>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	4a26      	ldr	r2, [pc, #152]	@ (8002750 <xPortStartScheduler+0xd8>)
 80026b6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80026b8:	78fb      	ldrb	r3, [r7, #3]
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80026c2:	78fb      	ldrb	r3, [r7, #3]
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026ca:	2b80      	cmp	r3, #128	@ 0x80
 80026cc:	d0ef      	beq.n	80026ae <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80026ce:	4b20      	ldr	r3, [pc, #128]	@ (8002750 <xPortStartScheduler+0xd8>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f1c3 0307 	rsb	r3, r3, #7
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d00b      	beq.n	80026f2 <xPortStartScheduler+0x7a>
	__asm volatile
 80026da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026de:	f383 8811 	msr	BASEPRI, r3
 80026e2:	f3bf 8f6f 	isb	sy
 80026e6:	f3bf 8f4f 	dsb	sy
 80026ea:	60bb      	str	r3, [r7, #8]
}
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	e7fd      	b.n	80026ee <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80026f2:	4b17      	ldr	r3, [pc, #92]	@ (8002750 <xPortStartScheduler+0xd8>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	021b      	lsls	r3, r3, #8
 80026f8:	4a15      	ldr	r2, [pc, #84]	@ (8002750 <xPortStartScheduler+0xd8>)
 80026fa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80026fc:	4b14      	ldr	r3, [pc, #80]	@ (8002750 <xPortStartScheduler+0xd8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002704:	4a12      	ldr	r2, [pc, #72]	@ (8002750 <xPortStartScheduler+0xd8>)
 8002706:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	b2da      	uxtb	r2, r3
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002710:	4b10      	ldr	r3, [pc, #64]	@ (8002754 <xPortStartScheduler+0xdc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0f      	ldr	r2, [pc, #60]	@ (8002754 <xPortStartScheduler+0xdc>)
 8002716:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800271a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800271c:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <xPortStartScheduler+0xdc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a0c      	ldr	r2, [pc, #48]	@ (8002754 <xPortStartScheduler+0xdc>)
 8002722:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8002726:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002728:	f000 f8c0 	bl	80028ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800272c:	4b0a      	ldr	r3, [pc, #40]	@ (8002758 <xPortStartScheduler+0xe0>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002732:	f7ff ff91 	bl	8002658 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002736:	f7ff fdbf 	bl	80022b8 <vTaskSwitchContext>
	prvTaskExitError();
 800273a:	f7ff ff4b 	bl	80025d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	3710      	adds	r7, #16
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}
 8002748:	e000e400 	.word	0xe000e400
 800274c:	200004b4 	.word	0x200004b4
 8002750:	200004b8 	.word	0x200004b8
 8002754:	e000ed20 	.word	0xe000ed20
 8002758:	2000000c 	.word	0x2000000c

0800275c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
	__asm volatile
 8002762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002766:	f383 8811 	msr	BASEPRI, r3
 800276a:	f3bf 8f6f 	isb	sy
 800276e:	f3bf 8f4f 	dsb	sy
 8002772:	607b      	str	r3, [r7, #4]
}
 8002774:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002776:	4b0f      	ldr	r3, [pc, #60]	@ (80027b4 <vPortEnterCritical+0x58>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	3301      	adds	r3, #1
 800277c:	4a0d      	ldr	r2, [pc, #52]	@ (80027b4 <vPortEnterCritical+0x58>)
 800277e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002780:	4b0c      	ldr	r3, [pc, #48]	@ (80027b4 <vPortEnterCritical+0x58>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d110      	bne.n	80027aa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <vPortEnterCritical+0x5c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00b      	beq.n	80027aa <vPortEnterCritical+0x4e>
	__asm volatile
 8002792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002796:	f383 8811 	msr	BASEPRI, r3
 800279a:	f3bf 8f6f 	isb	sy
 800279e:	f3bf 8f4f 	dsb	sy
 80027a2:	603b      	str	r3, [r7, #0]
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	e7fd      	b.n	80027a6 <vPortEnterCritical+0x4a>
	}
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bc80      	pop	{r7}
 80027b2:	4770      	bx	lr
 80027b4:	2000000c 	.word	0x2000000c
 80027b8:	e000ed04 	.word	0xe000ed04

080027bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80027bc:	b480      	push	{r7}
 80027be:	b083      	sub	sp, #12
 80027c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80027c2:	4b12      	ldr	r3, [pc, #72]	@ (800280c <vPortExitCritical+0x50>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10b      	bne.n	80027e2 <vPortExitCritical+0x26>
	__asm volatile
 80027ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027ce:	f383 8811 	msr	BASEPRI, r3
 80027d2:	f3bf 8f6f 	isb	sy
 80027d6:	f3bf 8f4f 	dsb	sy
 80027da:	607b      	str	r3, [r7, #4]
}
 80027dc:	bf00      	nop
 80027de:	bf00      	nop
 80027e0:	e7fd      	b.n	80027de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80027e2:	4b0a      	ldr	r3, [pc, #40]	@ (800280c <vPortExitCritical+0x50>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	4a08      	ldr	r2, [pc, #32]	@ (800280c <vPortExitCritical+0x50>)
 80027ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80027ec:	4b07      	ldr	r3, [pc, #28]	@ (800280c <vPortExitCritical+0x50>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d105      	bne.n	8002800 <vPortExitCritical+0x44>
 80027f4:	2300      	movs	r3, #0
 80027f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	bc80      	pop	{r7}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	2000000c 	.word	0x2000000c

08002810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002810:	f3ef 8009 	mrs	r0, PSP
 8002814:	f3bf 8f6f 	isb	sy
 8002818:	4b0d      	ldr	r3, [pc, #52]	@ (8002850 <pxCurrentTCBConst>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002820:	6010      	str	r0, [r2, #0]
 8002822:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002826:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800282a:	f380 8811 	msr	BASEPRI, r0
 800282e:	f7ff fd43 	bl	80022b8 <vTaskSwitchContext>
 8002832:	f04f 0000 	mov.w	r0, #0
 8002836:	f380 8811 	msr	BASEPRI, r0
 800283a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800283e:	6819      	ldr	r1, [r3, #0]
 8002840:	6808      	ldr	r0, [r1, #0]
 8002842:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002846:	f380 8809 	msr	PSP, r0
 800284a:	f3bf 8f6f 	isb	sy
 800284e:	4770      	bx	lr

08002850 <pxCurrentTCBConst>:
 8002850:	20000388 	.word	0x20000388
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002854:	bf00      	nop
 8002856:	bf00      	nop

08002858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
	__asm volatile
 800285e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002862:	f383 8811 	msr	BASEPRI, r3
 8002866:	f3bf 8f6f 	isb	sy
 800286a:	f3bf 8f4f 	dsb	sy
 800286e:	607b      	str	r3, [r7, #4]
}
 8002870:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8002872:	f001 fc11 	bl	8004098 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002876:	f7ff fc5d 	bl	8002134 <xTaskIncrementTick>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d006      	beq.n	800288e <xPortSysTickHandler+0x36>
		{
      traceISR_EXIT_TO_SCHEDULER();
 8002880:	f001 fc68 	bl	8004154 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002884:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <xPortSysTickHandler+0x50>)
 8002886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	e001      	b.n	8002892 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 800288e:	f001 fc45 	bl	800411c <SEGGER_SYSVIEW_RecordExitISR>
 8002892:	2300      	movs	r3, #0
 8002894:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	f383 8811 	msr	BASEPRI, r3
}
 800289c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800289e:	bf00      	nop
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	e000ed04 	.word	0xe000ed04

080028ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80028b0:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <vPortSetupTimerInterrupt+0x30>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80028b6:	4b0a      	ldr	r3, [pc, #40]	@ (80028e0 <vPortSetupTimerInterrupt+0x34>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80028bc:	4b09      	ldr	r3, [pc, #36]	@ (80028e4 <vPortSetupTimerInterrupt+0x38>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a09      	ldr	r2, [pc, #36]	@ (80028e8 <vPortSetupTimerInterrupt+0x3c>)
 80028c2:	fba2 2303 	umull	r2, r3, r2, r3
 80028c6:	099b      	lsrs	r3, r3, #6
 80028c8:	4a08      	ldr	r2, [pc, #32]	@ (80028ec <vPortSetupTimerInterrupt+0x40>)
 80028ca:	3b01      	subs	r3, #1
 80028cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80028ce:	4b03      	ldr	r3, [pc, #12]	@ (80028dc <vPortSetupTimerInterrupt+0x30>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	601a      	str	r2, [r3, #0]
}
 80028d4:	bf00      	nop
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr
 80028dc:	e000e010 	.word	0xe000e010
 80028e0:	e000e018 	.word	0xe000e018
 80028e4:	20000000 	.word	0x20000000
 80028e8:	10624dd3 	.word	0x10624dd3
 80028ec:	e000e014 	.word	0xe000e014

080028f0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80028f6:	f3ef 8305 	mrs	r3, IPSR
 80028fa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2b0f      	cmp	r3, #15
 8002900:	d915      	bls.n	800292e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8002902:	4a17      	ldr	r2, [pc, #92]	@ (8002960 <vPortValidateInterruptPriority+0x70>)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4413      	add	r3, r2
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800290c:	4b15      	ldr	r3, [pc, #84]	@ (8002964 <vPortValidateInterruptPriority+0x74>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	7afa      	ldrb	r2, [r7, #11]
 8002912:	429a      	cmp	r2, r3
 8002914:	d20b      	bcs.n	800292e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8002916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800291a:	f383 8811 	msr	BASEPRI, r3
 800291e:	f3bf 8f6f 	isb	sy
 8002922:	f3bf 8f4f 	dsb	sy
 8002926:	607b      	str	r3, [r7, #4]
}
 8002928:	bf00      	nop
 800292a:	bf00      	nop
 800292c:	e7fd      	b.n	800292a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800292e:	4b0e      	ldr	r3, [pc, #56]	@ (8002968 <vPortValidateInterruptPriority+0x78>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002936:	4b0d      	ldr	r3, [pc, #52]	@ (800296c <vPortValidateInterruptPriority+0x7c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	429a      	cmp	r2, r3
 800293c:	d90b      	bls.n	8002956 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	603b      	str	r3, [r7, #0]
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	e7fd      	b.n	8002952 <vPortValidateInterruptPriority+0x62>
	}
 8002956:	bf00      	nop
 8002958:	3714      	adds	r7, #20
 800295a:	46bd      	mov	sp, r7
 800295c:	bc80      	pop	{r7}
 800295e:	4770      	bx	lr
 8002960:	e000e3f0 	.word	0xe000e3f0
 8002964:	200004b4 	.word	0x200004b4
 8002968:	e000ed0c 	.word	0xe000ed0c
 800296c:	200004b8 	.word	0x200004b8

08002970 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	@ 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800297c:	f7ff fb18 	bl	8001fb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002980:	4b5a      	ldr	r3, [pc, #360]	@ (8002aec <pvPortMalloc+0x17c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002988:	f000 f916 	bl	8002bb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800298c:	4b58      	ldr	r3, [pc, #352]	@ (8002af0 <pvPortMalloc+0x180>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4013      	ands	r3, r2
 8002994:	2b00      	cmp	r3, #0
 8002996:	f040 8090 	bne.w	8002aba <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01e      	beq.n	80029de <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80029a0:	2208      	movs	r2, #8
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	4413      	add	r3, r2
 80029a6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d015      	beq.n	80029de <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f023 0307 	bic.w	r3, r3, #7
 80029b8:	3308      	adds	r3, #8
 80029ba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	f003 0307 	and.w	r3, r3, #7
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <pvPortMalloc+0x6e>
	__asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	617b      	str	r3, [r7, #20]
}
 80029d8:	bf00      	nop
 80029da:	bf00      	nop
 80029dc:	e7fd      	b.n	80029da <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d06a      	beq.n	8002aba <pvPortMalloc+0x14a>
 80029e4:	4b43      	ldr	r3, [pc, #268]	@ (8002af4 <pvPortMalloc+0x184>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d865      	bhi.n	8002aba <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80029ee:	4b42      	ldr	r3, [pc, #264]	@ (8002af8 <pvPortMalloc+0x188>)
 80029f0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80029f2:	4b41      	ldr	r3, [pc, #260]	@ (8002af8 <pvPortMalloc+0x188>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029f8:	e004      	b.n	8002a04 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80029fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d903      	bls.n	8002a16 <pvPortMalloc+0xa6>
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d1f1      	bne.n	80029fa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002a16:	4b35      	ldr	r3, [pc, #212]	@ (8002aec <pvPortMalloc+0x17c>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d04c      	beq.n	8002aba <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2208      	movs	r2, #8
 8002a26:	4413      	add	r3, r2
 8002a28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002a32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	1ad2      	subs	r2, r2, r3
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d920      	bls.n	8002a84 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <pvPortMalloc+0xfc>
	__asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a58:	f383 8811 	msr	BASEPRI, r3
 8002a5c:	f3bf 8f6f 	isb	sy
 8002a60:	f3bf 8f4f 	dsb	sy
 8002a64:	613b      	str	r3, [r7, #16]
}
 8002a66:	bf00      	nop
 8002a68:	bf00      	nop
 8002a6a:	e7fd      	b.n	8002a68 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a6e:	685a      	ldr	r2, [r3, #4]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	1ad2      	subs	r2, r2, r3
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a7e:	69b8      	ldr	r0, [r7, #24]
 8002a80:	f000 f8fc 	bl	8002c7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a84:	4b1b      	ldr	r3, [pc, #108]	@ (8002af4 <pvPortMalloc+0x184>)
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	1ad3      	subs	r3, r2, r3
 8002a8e:	4a19      	ldr	r2, [pc, #100]	@ (8002af4 <pvPortMalloc+0x184>)
 8002a90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a92:	4b18      	ldr	r3, [pc, #96]	@ (8002af4 <pvPortMalloc+0x184>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b19      	ldr	r3, [pc, #100]	@ (8002afc <pvPortMalloc+0x18c>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d203      	bcs.n	8002aa6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a9e:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <pvPortMalloc+0x184>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a16      	ldr	r2, [pc, #88]	@ (8002afc <pvPortMalloc+0x18c>)
 8002aa4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa8:	685a      	ldr	r2, [r3, #4]
 8002aaa:	4b11      	ldr	r3, [pc, #68]	@ (8002af0 <pvPortMalloc+0x180>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	431a      	orrs	r2, r3
 8002ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002aba:	f7ff fa87 	bl	8001fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00b      	beq.n	8002ae0 <pvPortMalloc+0x170>
	__asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	60fb      	str	r3, [r7, #12]
}
 8002ada:	bf00      	nop
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <pvPortMalloc+0x16c>
	return pvReturn;
 8002ae0:	69fb      	ldr	r3, [r7, #28]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3728      	adds	r7, #40	@ 0x28
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	200010c4 	.word	0x200010c4
 8002af0:	200010d0 	.word	0x200010d0
 8002af4:	200010c8 	.word	0x200010c8
 8002af8:	200010bc 	.word	0x200010bc
 8002afc:	200010cc 	.word	0x200010cc

08002b00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b086      	sub	sp, #24
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d04a      	beq.n	8002ba8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002b12:	2308      	movs	r3, #8
 8002b14:	425b      	negs	r3, r3
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4413      	add	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	685a      	ldr	r2, [r3, #4]
 8002b24:	4b22      	ldr	r3, [pc, #136]	@ (8002bb0 <vPortFree+0xb0>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <vPortFree+0x46>
	__asm volatile
 8002b2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b32:	f383 8811 	msr	BASEPRI, r3
 8002b36:	f3bf 8f6f 	isb	sy
 8002b3a:	f3bf 8f4f 	dsb	sy
 8002b3e:	60fb      	str	r3, [r7, #12]
}
 8002b40:	bf00      	nop
 8002b42:	bf00      	nop
 8002b44:	e7fd      	b.n	8002b42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00b      	beq.n	8002b66 <vPortFree+0x66>
	__asm volatile
 8002b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b52:	f383 8811 	msr	BASEPRI, r3
 8002b56:	f3bf 8f6f 	isb	sy
 8002b5a:	f3bf 8f4f 	dsb	sy
 8002b5e:	60bb      	str	r3, [r7, #8]
}
 8002b60:	bf00      	nop
 8002b62:	bf00      	nop
 8002b64:	e7fd      	b.n	8002b62 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <vPortFree+0xb0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d019      	beq.n	8002ba8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d115      	bne.n	8002ba8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	685a      	ldr	r2, [r3, #4]
 8002b80:	4b0b      	ldr	r3, [pc, #44]	@ (8002bb0 <vPortFree+0xb0>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	43db      	mvns	r3, r3
 8002b86:	401a      	ands	r2, r3
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002b8c:	f7ff fa10 	bl	8001fb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	4b07      	ldr	r3, [pc, #28]	@ (8002bb4 <vPortFree+0xb4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4413      	add	r3, r2
 8002b9a:	4a06      	ldr	r2, [pc, #24]	@ (8002bb4 <vPortFree+0xb4>)
 8002b9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b9e:	6938      	ldr	r0, [r7, #16]
 8002ba0:	f000 f86c 	bl	8002c7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002ba4:	f7ff fa12 	bl	8001fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002ba8:	bf00      	nop
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	200010d0 	.word	0x200010d0
 8002bb4:	200010c8 	.word	0x200010c8

08002bb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002bbe:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002bc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002bc4:	4b27      	ldr	r3, [pc, #156]	@ (8002c64 <prvHeapInit+0xac>)
 8002bc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00c      	beq.n	8002bec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	3307      	adds	r3, #7
 8002bd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0307 	bic.w	r3, r3, #7
 8002bde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c64 <prvHeapInit+0xac>)
 8002be8:	4413      	add	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bf0:	4a1d      	ldr	r2, [pc, #116]	@ (8002c68 <prvHeapInit+0xb0>)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	@ (8002c68 <prvHeapInit+0xb0>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68ba      	ldr	r2, [r7, #8]
 8002c00:	4413      	add	r3, r2
 8002c02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002c04:	2208      	movs	r2, #8
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f023 0307 	bic.w	r3, r3, #7
 8002c12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4a15      	ldr	r2, [pc, #84]	@ (8002c6c <prvHeapInit+0xb4>)
 8002c18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002c1a:	4b14      	ldr	r3, [pc, #80]	@ (8002c6c <prvHeapInit+0xb4>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002c22:	4b12      	ldr	r3, [pc, #72]	@ (8002c6c <prvHeapInit+0xb4>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	68fa      	ldr	r2, [r7, #12]
 8002c32:	1ad2      	subs	r2, r2, r3
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c38:	4b0c      	ldr	r3, [pc, #48]	@ (8002c6c <prvHeapInit+0xb4>)
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	4a0a      	ldr	r2, [pc, #40]	@ (8002c70 <prvHeapInit+0xb8>)
 8002c46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	4a09      	ldr	r2, [pc, #36]	@ (8002c74 <prvHeapInit+0xbc>)
 8002c4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c50:	4b09      	ldr	r3, [pc, #36]	@ (8002c78 <prvHeapInit+0xc0>)
 8002c52:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002c56:	601a      	str	r2, [r3, #0]
}
 8002c58:	bf00      	nop
 8002c5a:	3714      	adds	r7, #20
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr
 8002c62:	bf00      	nop
 8002c64:	200004bc 	.word	0x200004bc
 8002c68:	200010bc 	.word	0x200010bc
 8002c6c:	200010c4 	.word	0x200010c4
 8002c70:	200010cc 	.word	0x200010cc
 8002c74:	200010c8 	.word	0x200010c8
 8002c78:	200010d0 	.word	0x200010d0

08002c7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b085      	sub	sp, #20
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c84:	4b27      	ldr	r3, [pc, #156]	@ (8002d24 <prvInsertBlockIntoFreeList+0xa8>)
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e002      	b.n	8002c90 <prvInsertBlockIntoFreeList+0x14>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d8f7      	bhi.n	8002c8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d108      	bne.n	8002cbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	441a      	add	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	441a      	add	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d118      	bne.n	8002d04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b14      	ldr	r3, [pc, #80]	@ (8002d28 <prvInsertBlockIntoFreeList+0xac>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d00d      	beq.n	8002cfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	441a      	add	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e008      	b.n	8002d0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <prvInsertBlockIntoFreeList+0xac>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]
 8002d02:	e003      	b.n	8002d0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002d0c:	68fa      	ldr	r2, [r7, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d002      	beq.n	8002d1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d1a:	bf00      	nop
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bc80      	pop	{r7}
 8002d22:	4770      	bx	lr
 8002d24:	200010bc 	.word	0x200010bc
 8002d28:	200010c4 	.word	0x200010c4

08002d2c <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002d30:	4803      	ldr	r0, [pc, #12]	@ (8002d40 <_cbSendSystemDesc+0x14>)
 8002d32:	f001 f95b 	bl	8003fec <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002d36:	4803      	ldr	r0, [pc, #12]	@ (8002d44 <_cbSendSystemDesc+0x18>)
 8002d38:	f001 f958 	bl	8003fec <SEGGER_SYSVIEW_SendSysDesc>
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	08004698 	.word	0x08004698
 8002d44:	080046d0 	.word	0x080046d0

08002d48 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002d4c:	4b06      	ldr	r3, [pc, #24]	@ (8002d68 <SEGGER_SYSVIEW_Conf+0x20>)
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	4b05      	ldr	r3, [pc, #20]	@ (8002d68 <SEGGER_SYSVIEW_Conf+0x20>)
 8002d52:	6819      	ldr	r1, [r3, #0]
 8002d54:	4b05      	ldr	r3, [pc, #20]	@ (8002d6c <SEGGER_SYSVIEW_Conf+0x24>)
 8002d56:	4a06      	ldr	r2, [pc, #24]	@ (8002d70 <SEGGER_SYSVIEW_Conf+0x28>)
 8002d58:	f000 fdd0 	bl	80038fc <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002d5c:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8002d60:	f000 fe10 	bl	8003984 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	20000000 	.word	0x20000000
 8002d6c:	08002d2d 	.word	0x08002d2d
 8002d70:	08004780 	.word	0x08004780

08002d74 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
 8002d7e:	e033      	b.n	8002de8 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002d80:	491e      	ldr	r1, [pc, #120]	@ (8002dfc <_cbSendTaskList+0x88>)
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	4613      	mov	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	4413      	add	r3, r2
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	491a      	ldr	r1, [pc, #104]	@ (8002dfc <_cbSendTaskList+0x88>)
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3304      	adds	r3, #4
 8002da0:	6819      	ldr	r1, [r3, #0]
 8002da2:	4c16      	ldr	r4, [pc, #88]	@ (8002dfc <_cbSendTaskList+0x88>)
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4423      	add	r3, r4
 8002db0:	3308      	adds	r3, #8
 8002db2:	681c      	ldr	r4, [r3, #0]
 8002db4:	4d11      	ldr	r5, [pc, #68]	@ (8002dfc <_cbSendTaskList+0x88>)
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	442b      	add	r3, r5
 8002dc2:	330c      	adds	r3, #12
 8002dc4:	681d      	ldr	r5, [r3, #0]
 8002dc6:	4e0d      	ldr	r6, [pc, #52]	@ (8002dfc <_cbSendTaskList+0x88>)
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	4433      	add	r3, r6
 8002dd4:	3310      	adds	r3, #16
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	462b      	mov	r3, r5
 8002ddc:	4622      	mov	r2, r4
 8002dde:	f000 f8bd 	bl	8002f5c <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3301      	adds	r3, #1
 8002de6:	607b      	str	r3, [r7, #4]
 8002de8:	4b05      	ldr	r3, [pc, #20]	@ (8002e00 <_cbSendTaskList+0x8c>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d3c6      	bcc.n	8002d80 <_cbSendTaskList+0xc>
  }
}
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dfc:	200010d4 	.word	0x200010d4
 8002e00:	20001174 	.word	0x20001174

08002e04 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e08:	b082      	sub	sp, #8
 8002e0a:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002e0c:	f7ff f980 	bl	8002110 <xTaskGetTickCountFromISR>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2200      	movs	r2, #0
 8002e14:	469a      	mov	sl, r3
 8002e16:	4693      	mov	fp, r2
 8002e18:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002e1c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e20:	4602      	mov	r2, r0
 8002e22:	460b      	mov	r3, r1
 8002e24:	f04f 0a00 	mov.w	sl, #0
 8002e28:	f04f 0b00 	mov.w	fp, #0
 8002e2c:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002e30:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002e34:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002e38:	4652      	mov	r2, sl
 8002e3a:	465b      	mov	r3, fp
 8002e3c:	1a14      	subs	r4, r2, r0
 8002e3e:	eb63 0501 	sbc.w	r5, r3, r1
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	00ab      	lsls	r3, r5, #2
 8002e4c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002e50:	00a2      	lsls	r2, r4, #2
 8002e52:	4614      	mov	r4, r2
 8002e54:	461d      	mov	r5, r3
 8002e56:	eb14 0800 	adds.w	r8, r4, r0
 8002e5a:	eb45 0901 	adc.w	r9, r5, r1
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e72:	4690      	mov	r8, r2
 8002e74:	4699      	mov	r9, r3
 8002e76:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002e7a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002e7e:	4610      	mov	r0, r2
 8002e80:	4619      	mov	r1, r3
 8002e82:	3708      	adds	r7, #8
 8002e84:	46bd      	mov	sp, r7
 8002e86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002e8c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002e9a:	2205      	movs	r2, #5
 8002e9c:	492b      	ldr	r1, [pc, #172]	@ (8002f4c <SYSVIEW_AddTask+0xc0>)
 8002e9e:	68b8      	ldr	r0, [r7, #8]
 8002ea0:	f001 fb98 	bl	80045d4 <memcmp>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d04b      	beq.n	8002f42 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002eaa:	4b29      	ldr	r3, [pc, #164]	@ (8002f50 <SYSVIEW_AddTask+0xc4>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b07      	cmp	r3, #7
 8002eb0:	d903      	bls.n	8002eba <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002eb2:	4828      	ldr	r0, [pc, #160]	@ (8002f54 <SYSVIEW_AddTask+0xc8>)
 8002eb4:	f001 fb32 	bl	800451c <SEGGER_SYSVIEW_Warn>
    return;
 8002eb8:	e044      	b.n	8002f44 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002eba:	4b25      	ldr	r3, [pc, #148]	@ (8002f50 <SYSVIEW_AddTask+0xc4>)
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	4926      	ldr	r1, [pc, #152]	@ (8002f58 <SYSVIEW_AddTask+0xcc>)
 8002ec0:	4613      	mov	r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	4413      	add	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	440b      	add	r3, r1
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002ece:	4b20      	ldr	r3, [pc, #128]	@ (8002f50 <SYSVIEW_AddTask+0xc4>)
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	4921      	ldr	r1, [pc, #132]	@ (8002f58 <SYSVIEW_AddTask+0xcc>)
 8002ed4:	4613      	mov	r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	4413      	add	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	3304      	adds	r3, #4
 8002ee0:	68ba      	ldr	r2, [r7, #8]
 8002ee2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <SYSVIEW_AddTask+0xc4>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	491b      	ldr	r1, [pc, #108]	@ (8002f58 <SYSVIEW_AddTask+0xcc>)
 8002eea:	4613      	mov	r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	440b      	add	r3, r1
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002efa:	4b15      	ldr	r3, [pc, #84]	@ (8002f50 <SYSVIEW_AddTask+0xc4>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4916      	ldr	r1, [pc, #88]	@ (8002f58 <SYSVIEW_AddTask+0xcc>)
 8002f00:	4613      	mov	r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	330c      	adds	r3, #12
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002f10:	4b0f      	ldr	r3, [pc, #60]	@ (8002f50 <SYSVIEW_AddTask+0xc4>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	4910      	ldr	r1, [pc, #64]	@ (8002f58 <SYSVIEW_AddTask+0xcc>)
 8002f16:	4613      	mov	r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	3310      	adds	r3, #16
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <SYSVIEW_AddTask+0xc4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	4a08      	ldr	r2, [pc, #32]	@ (8002f50 <SYSVIEW_AddTask+0xc4>)
 8002f2e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	9300      	str	r3, [sp, #0]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	68b9      	ldr	r1, [r7, #8]
 8002f3a:	68f8      	ldr	r0, [r7, #12]
 8002f3c:	f000 f80e 	bl	8002f5c <SYSVIEW_SendTaskInfo>
 8002f40:	e000      	b.n	8002f44 <SYSVIEW_AddTask+0xb8>
    return;
 8002f42:	bf00      	nop

}
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	080046e0 	.word	0x080046e0
 8002f50:	20001174 	.word	0x20001174
 8002f54:	080046e8 	.word	0x080046e8
 8002f58:	200010d4 	.word	0x200010d4

08002f5c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b08a      	sub	sp, #40	@ 0x28
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002f6a:	f107 0314 	add.w	r3, r7, #20
 8002f6e:	2214      	movs	r2, #20
 8002f70:	2100      	movs	r1, #0
 8002f72:	4618      	mov	r0, r3
 8002f74:	f001 fb3e 	bl	80045f4 <memset>
  TaskInfo.TaskID     = TaskID;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 ff33 	bl	8003dfc <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002f96:	bf00      	nop
 8002f98:	3728      	adds	r7, #40	@ 0x28
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002fa6:	4b25      	ldr	r3, [pc, #148]	@ (800303c <_DoInit+0x9c>)
 8002fa8:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 8002faa:	22a8      	movs	r2, #168	@ 0xa8
 8002fac:	2100      	movs	r1, #0
 8002fae:	6838      	ldr	r0, [r7, #0]
 8002fb0:	f001 fb20 	bl	80045f4 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	2203      	movs	r2, #3
 8002fb8:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003040 <_DoInit+0xa0>)
 8002fc4:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	4a1e      	ldr	r2, [pc, #120]	@ (8003044 <_DoInit+0xa4>)
 8002fca:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002fd2:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	4a15      	ldr	r2, [pc, #84]	@ (8003040 <_DoInit+0xa0>)
 8002fea:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	4a16      	ldr	r2, [pc, #88]	@ (8003048 <_DoInit+0xa8>)
 8002ff0:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2210      	movs	r2, #16
 8002ff6:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	2200      	movs	r2, #0
 8003002:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	2200      	movs	r2, #0
 8003008:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800300a:	2300      	movs	r3, #0
 800300c:	607b      	str	r3, [r7, #4]
 800300e:	e00c      	b.n	800302a <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f1c3 030f 	rsb	r3, r3, #15
 8003016:	4a0d      	ldr	r2, [pc, #52]	@ (800304c <_DoInit+0xac>)
 8003018:	5cd1      	ldrb	r1, [r2, r3]
 800301a:	683a      	ldr	r2, [r7, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4413      	add	r3, r2
 8003020:	460a      	mov	r2, r1
 8003022:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	3301      	adds	r3, #1
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b0f      	cmp	r3, #15
 800302e:	d9ef      	bls.n	8003010 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 8003030:	bf00      	nop
 8003032:	bf00      	nop
 8003034:	3708      	adds	r7, #8
 8003036:	46bd      	mov	sp, r7
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	20001178 	.word	0x20001178
 8003040:	08004738 	.word	0x08004738
 8003044:	20001220 	.word	0x20001220
 8003048:	20001620 	.word	0x20001620
 800304c:	08004788 	.word	0x08004788

08003050 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b08c      	sub	sp, #48	@ 0x30
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800305c:	4b3e      	ldr	r3, [pc, #248]	@ (8003158 <SEGGER_RTT_ReadNoLock+0x108>)
 800305e:	623b      	str	r3, [r7, #32]
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b53      	cmp	r3, #83	@ 0x53
 8003068:	d001      	beq.n	800306e <SEGGER_RTT_ReadNoLock+0x1e>
 800306a:	f7ff ff99 	bl	8002fa0 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	3360      	adds	r3, #96	@ 0x60
 800307a:	4a37      	ldr	r2, [pc, #220]	@ (8003158 <SEGGER_RTT_ReadNoLock+0x108>)
 800307c:	4413      	add	r3, r2
 800307e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003090:	2300      	movs	r3, #0
 8003092:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003094:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	429a      	cmp	r2, r3
 800309a:	d92b      	bls.n	80030f4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80030a6:	697a      	ldr	r2, [r7, #20]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	4293      	cmp	r3, r2
 80030ac:	bf28      	it	cs
 80030ae:	4613      	movcs	r3, r2
 80030b0:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b8:	4413      	add	r3, r2
 80030ba:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80030bc:	697a      	ldr	r2, [r7, #20]
 80030be:	6939      	ldr	r1, [r7, #16]
 80030c0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80030c2:	f001 fac3 	bl	800464c <memcpy>
    NumBytesRead += NumBytesRem;
 80030c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	4413      	add	r3, r2
 80030cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80030ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	4413      	add	r3, r2
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80030d6:	687a      	ldr	r2, [r7, #4]
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80030de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	4413      	add	r3, r2
 80030e4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d101      	bne.n	80030f4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80030f0:	2300      	movs	r3, #0
 80030f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4293      	cmp	r3, r2
 8003102:	bf28      	it	cs
 8003104:	4613      	movcs	r3, r2
 8003106:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d019      	beq.n	8003142 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003114:	4413      	add	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	6939      	ldr	r1, [r7, #16]
 800311c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800311e:	f001 fa95 	bl	800464c <memcpy>
    NumBytesRead += NumBytesRem;
 8003122:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	4413      	add	r3, r2
 8003128:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800312a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	4413      	add	r3, r2
 8003130:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	1ad3      	subs	r3, r2, r3
 8003138:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800313a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	4413      	add	r3, r2
 8003140:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8003142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003144:	2b00      	cmp	r3, #0
 8003146:	d002      	beq.n	800314e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800314c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800314e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8003150:	4618      	mov	r0, r3
 8003152:	3730      	adds	r7, #48	@ 0x30
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20001178 	.word	0x20001178

0800315c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b08c      	sub	sp, #48	@ 0x30
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
  //   4) RdOff >  WrOff => Space is sufficient
  //   5) RdOff >  WrOff => No space in buf
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1c5a      	adds	r2, r3, #1
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	4a35      	ldr	r2, [pc, #212]	@ (8003250 <SEGGER_RTT_WriteSkipNoLock+0xf4>)
 800317a:	4413      	add	r3, r2
 800317c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RdOff = pRing->RdOff;
 800317e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003180:	691b      	ldr	r3, [r3, #16]
 8003182:	627b      	str	r3, [r7, #36]	@ 0x24
  WrOff = pRing->WrOff;
 8003184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	623b      	str	r3, [r7, #32]
  pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800318a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	4413      	add	r3, r2
 8003192:	61fb      	str	r3, [r7, #28]
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 8003194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	429a      	cmp	r2, r3
 800319a:	d83e      	bhi.n	800321a <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800319c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	3b01      	subs	r3, #1
 80031a6:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 1)?
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d30b      	bcc.n	80031c8 <SEGGER_RTT_WriteSkipNoLock+0x6c>
      memcpy((void*)pDst, pData, NumBytes);
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031b4:	69f8      	ldr	r0, [r7, #28]
 80031b6:	f001 fa49 	bl	800464c <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
 80031ba:	6a3a      	ldr	r2, [r7, #32]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	441a      	add	r2, r3
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	60da      	str	r2, [r3, #12]
      return 1;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e03e      	b.n	8003246 <SEGGER_RTT_WriteSkipNoLock+0xea>
    }
    Avail += RdOff;                                     // Space incl. wrap-around
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031cc:	4413      	add	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 80031d0:	69ba      	ldr	r2, [r7, #24]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d335      	bcc.n	8003244 <SEGGER_RTT_WriteSkipNoLock+0xe8>
      Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 80031d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	6a3b      	ldr	r3, [r7, #32]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	617b      	str	r3, [r7, #20]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031e6:	69f8      	ldr	r0, [r7, #28]
 80031e8:	f001 fa30 	bl	800464c <memcpy>
      NumBytes -= Rem;
 80031ec:	687a      	ldr	r2, [r7, #4]
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	607b      	str	r3, [r7, #4]
      // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
      // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
      // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <SEGGER_RTT_WriteSkipNoLock+0xb4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80031fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	61fb      	str	r3, [r7, #28]
        memcpy((void*)pDst, pData + Rem, NumBytes);
 8003200:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	4413      	add	r3, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	4619      	mov	r1, r3
 800320a:	69f8      	ldr	r0, [r7, #28]
 800320c:	f001 fa1e 	bl	800464c <memcpy>
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
 8003210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	60da      	str	r2, [r3, #12]
      return 1;
 8003216:	2301      	movs	r3, #1
 8003218:	e015      	b.n	8003246 <SEGGER_RTT_WriteSkipNoLock+0xea>
    }
  } else {                                             // Potential case 4)
    Avail = RdOff - WrOff - 1u;
 800321a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800321c:	6a3b      	ldr	r3, [r7, #32]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 8003224:	69ba      	ldr	r2, [r7, #24]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	429a      	cmp	r2, r3
 800322a:	d30b      	bcc.n	8003244 <SEGGER_RTT_WriteSkipNoLock+0xe8>
      memcpy((void*)pDst, pData, NumBytes);
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003230:	69f8      	ldr	r0, [r7, #28]
 8003232:	f001 fa0b 	bl	800464c <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
 8003236:	6a3a      	ldr	r2, [r7, #32]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	441a      	add	r2, r3
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323e:	60da      	str	r2, [r3, #12]
      return 1;
 8003240:	2301      	movs	r3, #1
 8003242:	e000      	b.n	8003246 <SEGGER_RTT_WriteSkipNoLock+0xea>
    }
  }
  return 0;     // No space in buffer
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3730      	adds	r7, #48	@ 0x30
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20001178 	.word	0x20001178

08003254 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003254:	b580      	push	{r7, lr}
 8003256:	b088      	sub	sp, #32
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	607a      	str	r2, [r7, #4]
 8003260:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003262:	4b3c      	ldr	r3, [pc, #240]	@ (8003354 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8003264:	61bb      	str	r3, [r7, #24]
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b53      	cmp	r3, #83	@ 0x53
 800326e:	d001      	beq.n	8003274 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003270:	f7ff fe96 	bl	8002fa0 <_DoInit>
  SEGGER_RTT_LOCK();
 8003274:	f3ef 8311 	mrs	r3, BASEPRI
 8003278:	f04f 0120 	mov.w	r1, #32
 800327c:	f381 8811 	msr	BASEPRI, r1
 8003280:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003282:	4b34      	ldr	r3, [pc, #208]	@ (8003354 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8003284:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003286:	2300      	movs	r3, #0
 8003288:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800328a:	6939      	ldr	r1, [r7, #16]
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	4613      	mov	r3, r2
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	4413      	add	r3, r2
 8003296:	00db      	lsls	r3, r3, #3
 8003298:	440b      	add	r3, r1
 800329a:	3304      	adds	r3, #4
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d008      	beq.n	80032b4 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3301      	adds	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	691b      	ldr	r3, [r3, #16]
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	dbeb      	blt.n	800328a <SEGGER_RTT_AllocUpBuffer+0x36>
 80032b2:	e000      	b.n	80032b6 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 80032b4:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	69fa      	ldr	r2, [r7, #28]
 80032bc:	429a      	cmp	r2, r3
 80032be:	da3d      	bge.n	800333c <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 80032c0:	6939      	ldr	r1, [r7, #16]
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	4613      	mov	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80032d4:	6939      	ldr	r1, [r7, #16]
 80032d6:	69fb      	ldr	r3, [r7, #28]
 80032d8:	1c5a      	adds	r2, r3, #1
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	3304      	adds	r3, #4
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80032ea:	6939      	ldr	r1, [r7, #16]
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	440b      	add	r3, r1
 80032f8:	3320      	adds	r3, #32
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80032fe:	6939      	ldr	r1, [r7, #16]
 8003300:	69fa      	ldr	r2, [r7, #28]
 8003302:	4613      	mov	r3, r2
 8003304:	005b      	lsls	r3, r3, #1
 8003306:	4413      	add	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	440b      	add	r3, r1
 800330c:	3328      	adds	r3, #40	@ 0x28
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8003312:	6939      	ldr	r1, [r7, #16]
 8003314:	69fa      	ldr	r2, [r7, #28]
 8003316:	4613      	mov	r3, r2
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	4413      	add	r3, r2
 800331c:	00db      	lsls	r3, r3, #3
 800331e:	440b      	add	r3, r1
 8003320:	3324      	adds	r3, #36	@ 0x24
 8003322:	2200      	movs	r2, #0
 8003324:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8003326:	6939      	ldr	r1, [r7, #16]
 8003328:	69fa      	ldr	r2, [r7, #28]
 800332a:	4613      	mov	r3, r2
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	4413      	add	r3, r2
 8003330:	00db      	lsls	r3, r3, #3
 8003332:	440b      	add	r3, r1
 8003334:	332c      	adds	r3, #44	@ 0x2c
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e002      	b.n	8003342 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 800333c:	f04f 33ff 	mov.w	r3, #4294967295
 8003340:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8003348:	69fb      	ldr	r3, [r7, #28]
}
 800334a:	4618      	mov	r0, r3
 800334c:	3720      	adds	r7, #32
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	20001178 	.word	0x20001178

08003358 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b08a      	sub	sp, #40	@ 0x28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
 8003364:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003366:	4b20      	ldr	r3, [pc, #128]	@ (80033e8 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8003368:	623b      	str	r3, [r7, #32]
 800336a:	6a3b      	ldr	r3, [r7, #32]
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b53      	cmp	r3, #83	@ 0x53
 8003372:	d001      	beq.n	8003378 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003374:	f7ff fe14 	bl	8002fa0 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003378:	4b1b      	ldr	r3, [pc, #108]	@ (80033e8 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 800337a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d82a      	bhi.n	80033d8 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 8003382:	f3ef 8311 	mrs	r3, BASEPRI
 8003386:	f04f 0120 	mov.w	r1, #32
 800338a:	f381 8811 	msr	BASEPRI, r1
 800338e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003390:	68fa      	ldr	r2, [r7, #12]
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	00db      	lsls	r3, r3, #3
 800339a:	3360      	adds	r3, #96	@ 0x60
 800339c:	69fa      	ldr	r2, [r7, #28]
 800339e:	4413      	add	r3, r2
 80033a0:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00e      	beq.n	80033c6 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2200      	movs	r2, #0
 80033be:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	2200      	movs	r2, #0
 80033c4:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033ca:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d6:	e002      	b.n	80033de <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 80033d8:	f04f 33ff 	mov.w	r3, #4294967295
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3728      	adds	r7, #40	@ 0x28
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	20001178 	.word	0x20001178

080033ec <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80033ec:	b480      	push	{r7}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	60fa      	str	r2, [r7, #12]
 8003402:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2b80      	cmp	r3, #128	@ 0x80
 8003408:	d90a      	bls.n	8003420 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800340a:	2380      	movs	r3, #128	@ 0x80
 800340c:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800340e:	e007      	b.n	8003420 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	1c53      	adds	r3, r2, #1
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	1c59      	adds	r1, r3, #1
 800341a:	60f9      	str	r1, [r7, #12]
 800341c:	7812      	ldrb	r2, [r2, #0]
 800341e:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	1e5a      	subs	r2, r3, #1
 8003424:	607a      	str	r2, [r7, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <_EncodeStr+0x46>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ee      	bne.n	8003410 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8003432:	68ba      	ldr	r2, [r7, #8]
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	b2da      	uxtb	r2, r3
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800343e:	68fb      	ldr	r3, [r7, #12]
}
 8003440:	4618      	mov	r0, r3
 8003442:	371c      	adds	r7, #28
 8003444:	46bd      	mov	sp, r7
 8003446:	bc80      	pop	{r7}
 8003448:	4770      	bx	lr

0800344a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	3307      	adds	r3, #7
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	bc80      	pop	{r7}
 800345e:	4770      	bx	lr

08003460 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003466:	4b34      	ldr	r3, [pc, #208]	@ (8003538 <_HandleIncomingPacket+0xd8>)
 8003468:	7e1b      	ldrb	r3, [r3, #24]
 800346a:	4618      	mov	r0, r3
 800346c:	1cfb      	adds	r3, r7, #3
 800346e:	2201      	movs	r2, #1
 8003470:	4619      	mov	r1, r3
 8003472:	f7ff fded 	bl	8003050 <SEGGER_RTT_ReadNoLock>
 8003476:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d057      	beq.n	800352e <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	2b80      	cmp	r3, #128	@ 0x80
 8003482:	d031      	beq.n	80034e8 <_HandleIncomingPacket+0x88>
 8003484:	2b80      	cmp	r3, #128	@ 0x80
 8003486:	dc40      	bgt.n	800350a <_HandleIncomingPacket+0xaa>
 8003488:	2b07      	cmp	r3, #7
 800348a:	dc15      	bgt.n	80034b8 <_HandleIncomingPacket+0x58>
 800348c:	2b00      	cmp	r3, #0
 800348e:	dd3c      	ble.n	800350a <_HandleIncomingPacket+0xaa>
 8003490:	3b01      	subs	r3, #1
 8003492:	2b06      	cmp	r3, #6
 8003494:	d839      	bhi.n	800350a <_HandleIncomingPacket+0xaa>
 8003496:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <_HandleIncomingPacket+0x3c>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034bf 	.word	0x080034bf
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034cb 	.word	0x080034cb
 80034a8:	080034d1 	.word	0x080034d1
 80034ac:	080034d7 	.word	0x080034d7
 80034b0:	080034dd 	.word	0x080034dd
 80034b4:	080034e3 	.word	0x080034e3
 80034b8:	2b7f      	cmp	r3, #127	@ 0x7f
 80034ba:	d033      	beq.n	8003524 <_HandleIncomingPacket+0xc4>
 80034bc:	e025      	b.n	800350a <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80034be:	f000 fb23 	bl	8003b08 <SEGGER_SYSVIEW_Start>
      break;
 80034c2:	e034      	b.n	800352e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80034c4:	f000 fbda 	bl	8003c7c <SEGGER_SYSVIEW_Stop>
      break;
 80034c8:	e031      	b.n	800352e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80034ca:	f000 fdb3 	bl	8004034 <SEGGER_SYSVIEW_RecordSystime>
      break;
 80034ce:	e02e      	b.n	800352e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80034d0:	f000 fd78 	bl	8003fc4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 80034d4:	e02b      	b.n	800352e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80034d6:	f000 fbf7 	bl	8003cc8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80034da:	e028      	b.n	800352e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80034dc:	f000 ffe0 	bl	80044a0 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80034e0:	e025      	b.n	800352e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80034e2:	f000 ffbf 	bl	8004464 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80034e6:	e022      	b.n	800352e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80034e8:	4b13      	ldr	r3, [pc, #76]	@ (8003538 <_HandleIncomingPacket+0xd8>)
 80034ea:	7e1b      	ldrb	r3, [r3, #24]
 80034ec:	4618      	mov	r0, r3
 80034ee:	1cfb      	adds	r3, r7, #3
 80034f0:	2201      	movs	r2, #1
 80034f2:	4619      	mov	r1, r3
 80034f4:	f7ff fdac 	bl	8003050 <SEGGER_RTT_ReadNoLock>
 80034f8:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d013      	beq.n	8003528 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	4618      	mov	r0, r3
 8003504:	f000 ff24 	bl	8004350 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003508:	e00e      	b.n	8003528 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800350a:	78fb      	ldrb	r3, [r7, #3]
 800350c:	b25b      	sxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	da0c      	bge.n	800352c <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003512:	4b09      	ldr	r3, [pc, #36]	@ (8003538 <_HandleIncomingPacket+0xd8>)
 8003514:	7e1b      	ldrb	r3, [r3, #24]
 8003516:	4618      	mov	r0, r3
 8003518:	1cfb      	adds	r3, r7, #3
 800351a:	2201      	movs	r2, #1
 800351c:	4619      	mov	r1, r3
 800351e:	f7ff fd97 	bl	8003050 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003522:	e003      	b.n	800352c <_HandleIncomingPacket+0xcc>
      break;
 8003524:	bf00      	nop
 8003526:	e002      	b.n	800352e <_HandleIncomingPacket+0xce>
      break;
 8003528:	bf00      	nop
 800352a:	e000      	b.n	800352e <_HandleIncomingPacket+0xce>
      break;
 800352c:	bf00      	nop
    }
  }
}
 800352e:	bf00      	nop
 8003530:	3708      	adds	r7, #8
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20003638 	.word	0x20003638

0800353c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b08c      	sub	sp, #48	@ 0x30
 8003540:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8003542:	2301      	movs	r3, #1
 8003544:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8003546:	1d3b      	adds	r3, r7, #4
 8003548:	3301      	adds	r3, #1
 800354a:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003550:	4b31      	ldr	r3, [pc, #196]	@ (8003618 <_TrySendOverflowPacket+0xdc>)
 8003552:	695b      	ldr	r3, [r3, #20]
 8003554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003556:	e00b      	b.n	8003570 <_TrySendOverflowPacket+0x34>
 8003558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800355a:	b2da      	uxtb	r2, r3
 800355c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800355e:	1c59      	adds	r1, r3, #1
 8003560:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003562:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356c:	09db      	lsrs	r3, r3, #7
 800356e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003570:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003572:	2b7f      	cmp	r3, #127	@ 0x7f
 8003574:	d8f0      	bhi.n	8003558 <_TrySendOverflowPacket+0x1c>
 8003576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800357c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800357e:	b2d2      	uxtb	r2, r2
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003584:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003586:	4b25      	ldr	r3, [pc, #148]	@ (800361c <_TrySendOverflowPacket+0xe0>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800358c:	4b22      	ldr	r3, [pc, #136]	@ (8003618 <_TrySendOverflowPacket+0xdc>)
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	627b      	str	r3, [r7, #36]	@ 0x24
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	623b      	str	r3, [r7, #32]
 800359e:	e00b      	b.n	80035b8 <_TrySendOverflowPacket+0x7c>
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a6:	1c59      	adds	r1, r3, #1
 80035a8:	6279      	str	r1, [r7, #36]	@ 0x24
 80035aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	6a3b      	ldr	r3, [r7, #32]
 80035b4:	09db      	lsrs	r3, r3, #7
 80035b6:	623b      	str	r3, [r7, #32]
 80035b8:	6a3b      	ldr	r3, [r7, #32]
 80035ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80035bc:	d8f0      	bhi.n	80035a0 <_TrySendOverflowPacket+0x64>
 80035be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	627a      	str	r2, [r7, #36]	@ 0x24
 80035c4:	6a3a      	ldr	r2, [r7, #32]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 80035ce:	4b12      	ldr	r3, [pc, #72]	@ (8003618 <_TrySendOverflowPacket+0xdc>)
 80035d0:	785b      	ldrb	r3, [r3, #1]
 80035d2:	4618      	mov	r0, r3
 80035d4:	1d3b      	adds	r3, r7, #4
 80035d6:	69fa      	ldr	r2, [r7, #28]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	1d3b      	adds	r3, r7, #4
 80035de:	4619      	mov	r1, r3
 80035e0:	f7ff fdbc 	bl	800315c <SEGGER_RTT_WriteSkipNoLock>
 80035e4:	4603      	mov	r3, r0
 80035e6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80035ee:	4a0a      	ldr	r2, [pc, #40]	@ (8003618 <_TrySendOverflowPacket+0xdc>)
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 80035f4:	4b08      	ldr	r3, [pc, #32]	@ (8003618 <_TrySendOverflowPacket+0xdc>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	4b06      	ldr	r3, [pc, #24]	@ (8003618 <_TrySendOverflowPacket+0xdc>)
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	e004      	b.n	800360c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003602:	4b05      	ldr	r3, [pc, #20]	@ (8003618 <_TrySendOverflowPacket+0xdc>)
 8003604:	695b      	ldr	r3, [r3, #20]
 8003606:	3301      	adds	r3, #1
 8003608:	4a03      	ldr	r2, [pc, #12]	@ (8003618 <_TrySendOverflowPacket+0xdc>)
 800360a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800360c:	693b      	ldr	r3, [r7, #16]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3730      	adds	r7, #48	@ 0x30
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20003638 	.word	0x20003638
 800361c:	e0001004 	.word	0xe0001004

08003620 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b08a      	sub	sp, #40	@ 0x28
 8003624:	af00      	add	r7, sp, #0
 8003626:	60f8      	str	r0, [r7, #12]
 8003628:	60b9      	str	r1, [r7, #8]
 800362a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800362c:	4b98      	ldr	r3, [pc, #608]	@ (8003890 <_SendPacket+0x270>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d010      	beq.n	8003656 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003634:	4b96      	ldr	r3, [pc, #600]	@ (8003890 <_SendPacket+0x270>)
 8003636:	781b      	ldrb	r3, [r3, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	f000 812d 	beq.w	8003898 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800363e:	4b94      	ldr	r3, [pc, #592]	@ (8003890 <_SendPacket+0x270>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b02      	cmp	r3, #2
 8003644:	d109      	bne.n	800365a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8003646:	f7ff ff79 	bl	800353c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800364a:	4b91      	ldr	r3, [pc, #580]	@ (8003890 <_SendPacket+0x270>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b01      	cmp	r3, #1
 8003650:	f040 8124 	bne.w	800389c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 8003654:	e001      	b.n	800365a <_SendPacket+0x3a>
    goto Send;
 8003656:	bf00      	nop
 8003658:	e000      	b.n	800365c <_SendPacket+0x3c>
Send:
 800365a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b1f      	cmp	r3, #31
 8003660:	d809      	bhi.n	8003676 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003662:	4b8b      	ldr	r3, [pc, #556]	@ (8003890 <_SendPacket+0x270>)
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	fa22 f303 	lsr.w	r3, r2, r3
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	2b00      	cmp	r3, #0
 8003672:	f040 8115 	bne.w	80038a0 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b17      	cmp	r3, #23
 800367a:	d807      	bhi.n	800368c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	3b01      	subs	r3, #1
 8003680:	60fb      	str	r3, [r7, #12]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	701a      	strb	r2, [r3, #0]
 800368a:	e0c4      	b.n	8003816 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	2b7f      	cmp	r3, #127	@ 0x7f
 8003698:	d912      	bls.n	80036c0 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	09da      	lsrs	r2, r3, #7
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	3b01      	subs	r3, #1
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	b2d2      	uxtb	r2, r2
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	3a01      	subs	r2, #1
 80036b2:	60fa      	str	r2, [r7, #12]
 80036b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	701a      	strb	r2, [r3, #0]
 80036be:	e006      	b.n	80036ce <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	3b01      	subs	r3, #1
 80036c4:	60fb      	str	r3, [r7, #12]
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	b2da      	uxtb	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b7e      	cmp	r3, #126	@ 0x7e
 80036d2:	d807      	bhi.n	80036e4 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	e098      	b.n	8003816 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036ea:	d212      	bcs.n	8003712 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	09da      	lsrs	r2, r3, #7
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	b2d2      	uxtb	r2, r2
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	68fa      	ldr	r2, [r7, #12]
 8003702:	3a01      	subs	r2, #1
 8003704:	60fa      	str	r2, [r7, #12]
 8003706:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800370a:	b2da      	uxtb	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	701a      	strb	r2, [r3, #0]
 8003710:	e081      	b.n	8003816 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003718:	d21d      	bcs.n	8003756 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	0b9a      	lsrs	r2, r3, #14
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	3b01      	subs	r3, #1
 8003722:	60fb      	str	r3, [r7, #12]
 8003724:	b2d2      	uxtb	r2, r2
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	09db      	lsrs	r3, r3, #7
 800372e:	b2db      	uxtb	r3, r3
 8003730:	68fa      	ldr	r2, [r7, #12]
 8003732:	3a01      	subs	r2, #1
 8003734:	60fa      	str	r2, [r7, #12]
 8003736:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800373a:	b2da      	uxtb	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	b2db      	uxtb	r3, r3
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	3a01      	subs	r2, #1
 8003748:	60fa      	str	r2, [r7, #12]
 800374a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800374e:	b2da      	uxtb	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	e05f      	b.n	8003816 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800375c:	d228      	bcs.n	80037b0 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	0d5a      	lsrs	r2, r3, #21
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	3b01      	subs	r3, #1
 8003766:	60fb      	str	r3, [r7, #12]
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	0b9b      	lsrs	r3, r3, #14
 8003772:	b2db      	uxtb	r3, r3
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	3a01      	subs	r2, #1
 8003778:	60fa      	str	r2, [r7, #12]
 800377a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800377e:	b2da      	uxtb	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	09db      	lsrs	r3, r3, #7
 8003788:	b2db      	uxtb	r3, r3
 800378a:	68fa      	ldr	r2, [r7, #12]
 800378c:	3a01      	subs	r2, #1
 800378e:	60fa      	str	r2, [r7, #12]
 8003790:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003794:	b2da      	uxtb	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	b2db      	uxtb	r3, r3
 800379e:	68fa      	ldr	r2, [r7, #12]
 80037a0:	3a01      	subs	r2, #1
 80037a2:	60fa      	str	r2, [r7, #12]
 80037a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	701a      	strb	r2, [r3, #0]
 80037ae:	e032      	b.n	8003816 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	0f1a      	lsrs	r2, r3, #28
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	0d5b      	lsrs	r3, r3, #21
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	3a01      	subs	r2, #1
 80037ca:	60fa      	str	r2, [r7, #12]
 80037cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037d0:	b2da      	uxtb	r2, r3
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	0b9b      	lsrs	r3, r3, #14
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	3a01      	subs	r2, #1
 80037e0:	60fa      	str	r2, [r7, #12]
 80037e2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	09db      	lsrs	r3, r3, #7
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	3a01      	subs	r2, #1
 80037f6:	60fa      	str	r2, [r7, #12]
 80037f8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037fc:	b2da      	uxtb	r2, r3
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	b2db      	uxtb	r3, r3
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	3a01      	subs	r2, #1
 800380a:	60fa      	str	r2, [r7, #12]
 800380c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003810:	b2da      	uxtb	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003816:	4b1f      	ldr	r3, [pc, #124]	@ (8003894 <_SendPacket+0x274>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800381c:	4b1c      	ldr	r3, [pc, #112]	@ (8003890 <_SendPacket+0x270>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	623b      	str	r3, [r7, #32]
 800382e:	e00b      	b.n	8003848 <_SendPacket+0x228>
 8003830:	6a3b      	ldr	r3, [r7, #32]
 8003832:	b2da      	uxtb	r2, r3
 8003834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003836:	1c59      	adds	r1, r3, #1
 8003838:	6279      	str	r1, [r7, #36]	@ 0x24
 800383a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]
 8003842:	6a3b      	ldr	r3, [r7, #32]
 8003844:	09db      	lsrs	r3, r3, #7
 8003846:	623b      	str	r3, [r7, #32]
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	2b7f      	cmp	r3, #127	@ 0x7f
 800384c:	d8f0      	bhi.n	8003830 <_SendPacket+0x210>
 800384e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	627a      	str	r2, [r7, #36]	@ 0x24
 8003854:	6a3a      	ldr	r2, [r7, #32]
 8003856:	b2d2      	uxtb	r2, r2
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385c:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800385e:	4b0c      	ldr	r3, [pc, #48]	@ (8003890 <_SendPacket+0x270>)
 8003860:	785b      	ldrb	r3, [r3, #1]
 8003862:	4618      	mov	r0, r3
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	461a      	mov	r2, r3
 800386c:	68f9      	ldr	r1, [r7, #12]
 800386e:	f7ff fc75 	bl	800315c <SEGGER_RTT_WriteSkipNoLock>
 8003872:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d003      	beq.n	8003882 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800387a:	4a05      	ldr	r2, [pc, #20]	@ (8003890 <_SendPacket+0x270>)
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	60d3      	str	r3, [r2, #12]
 8003880:	e00f      	b.n	80038a2 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003882:	4b03      	ldr	r3, [pc, #12]	@ (8003890 <_SendPacket+0x270>)
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	3301      	adds	r3, #1
 8003888:	b2da      	uxtb	r2, r3
 800388a:	4b01      	ldr	r3, [pc, #4]	@ (8003890 <_SendPacket+0x270>)
 800388c:	701a      	strb	r2, [r3, #0]
 800388e:	e008      	b.n	80038a2 <_SendPacket+0x282>
 8003890:	20003638 	.word	0x20003638
 8003894:	e0001004 	.word	0xe0001004
    goto SendDone;
 8003898:	bf00      	nop
 800389a:	e002      	b.n	80038a2 <_SendPacket+0x282>
      goto SendDone;
 800389c:	bf00      	nop
 800389e:	e000      	b.n	80038a2 <_SendPacket+0x282>
      goto SendDone;
 80038a0:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80038a2:	4b14      	ldr	r3, [pc, #80]	@ (80038f4 <_SendPacket+0x2d4>)
 80038a4:	7e1b      	ldrb	r3, [r3, #24]
 80038a6:	4619      	mov	r1, r3
 80038a8:	4a13      	ldr	r2, [pc, #76]	@ (80038f8 <_SendPacket+0x2d8>)
 80038aa:	460b      	mov	r3, r1
 80038ac:	005b      	lsls	r3, r3, #1
 80038ae:	440b      	add	r3, r1
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	336c      	adds	r3, #108	@ 0x6c
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	4b0e      	ldr	r3, [pc, #56]	@ (80038f4 <_SendPacket+0x2d4>)
 80038ba:	7e1b      	ldrb	r3, [r3, #24]
 80038bc:	4618      	mov	r0, r3
 80038be:	490e      	ldr	r1, [pc, #56]	@ (80038f8 <_SendPacket+0x2d8>)
 80038c0:	4603      	mov	r3, r0
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4403      	add	r3, r0
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	440b      	add	r3, r1
 80038ca:	3370      	adds	r3, #112	@ 0x70
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d00b      	beq.n	80038ea <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80038d2:	4b08      	ldr	r3, [pc, #32]	@ (80038f4 <_SendPacket+0x2d4>)
 80038d4:	789b      	ldrb	r3, [r3, #2]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d107      	bne.n	80038ea <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80038da:	4b06      	ldr	r3, [pc, #24]	@ (80038f4 <_SendPacket+0x2d4>)
 80038dc:	2201      	movs	r2, #1
 80038de:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80038e0:	f7ff fdbe 	bl	8003460 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80038e4:	4b03      	ldr	r3, [pc, #12]	@ (80038f4 <_SendPacket+0x2d4>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80038ea:	bf00      	nop
 80038ec:	3728      	adds	r7, #40	@ 0x28
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	20003638 	.word	0x20003638
 80038f8:	20001178 	.word	0x20001178

080038fc <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b086      	sub	sp, #24
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800390a:	2300      	movs	r3, #0
 800390c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003910:	4917      	ldr	r1, [pc, #92]	@ (8003970 <SEGGER_SYSVIEW_Init+0x74>)
 8003912:	4818      	ldr	r0, [pc, #96]	@ (8003974 <SEGGER_SYSVIEW_Init+0x78>)
 8003914:	f7ff fc9e 	bl	8003254 <SEGGER_RTT_AllocUpBuffer>
 8003918:	4603      	mov	r3, r0
 800391a:	b2da      	uxtb	r2, r3
 800391c:	4b16      	ldr	r3, [pc, #88]	@ (8003978 <SEGGER_SYSVIEW_Init+0x7c>)
 800391e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003920:	4b15      	ldr	r3, [pc, #84]	@ (8003978 <SEGGER_SYSVIEW_Init+0x7c>)
 8003922:	785a      	ldrb	r2, [r3, #1]
 8003924:	4b14      	ldr	r3, [pc, #80]	@ (8003978 <SEGGER_SYSVIEW_Init+0x7c>)
 8003926:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003928:	4b13      	ldr	r3, [pc, #76]	@ (8003978 <SEGGER_SYSVIEW_Init+0x7c>)
 800392a:	7e1b      	ldrb	r3, [r3, #24]
 800392c:	4618      	mov	r0, r3
 800392e:	2300      	movs	r3, #0
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	2308      	movs	r3, #8
 8003934:	4a11      	ldr	r2, [pc, #68]	@ (800397c <SEGGER_SYSVIEW_Init+0x80>)
 8003936:	490f      	ldr	r1, [pc, #60]	@ (8003974 <SEGGER_SYSVIEW_Init+0x78>)
 8003938:	f7ff fd0e 	bl	8003358 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800393c:	4b0e      	ldr	r3, [pc, #56]	@ (8003978 <SEGGER_SYSVIEW_Init+0x7c>)
 800393e:	2200      	movs	r2, #0
 8003940:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003942:	4b0f      	ldr	r3, [pc, #60]	@ (8003980 <SEGGER_SYSVIEW_Init+0x84>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a0c      	ldr	r2, [pc, #48]	@ (8003978 <SEGGER_SYSVIEW_Init+0x7c>)
 8003948:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800394a:	4a0b      	ldr	r2, [pc, #44]	@ (8003978 <SEGGER_SYSVIEW_Init+0x7c>)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8003950:	4a09      	ldr	r2, [pc, #36]	@ (8003978 <SEGGER_SYSVIEW_Init+0x7c>)
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8003956:	4a08      	ldr	r2, [pc, #32]	@ (8003978 <SEGGER_SYSVIEW_Init+0x7c>)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800395c:	4a06      	ldr	r2, [pc, #24]	@ (8003978 <SEGGER_SYSVIEW_Init+0x7c>)
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003962:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <SEGGER_SYSVIEW_Init+0x7c>)
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003968:	bf00      	nop
 800396a:	3710      	adds	r7, #16
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}
 8003970:	20001630 	.word	0x20001630
 8003974:	0800474c 	.word	0x0800474c
 8003978:	20003638 	.word	0x20003638
 800397c:	20003630 	.word	0x20003630
 8003980:	e0001004 	.word	0xe0001004

08003984 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800398c:	4a03      	ldr	r2, [pc, #12]	@ (800399c <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6113      	str	r3, [r2, #16]
}
 8003992:	bf00      	nop
 8003994:	370c      	adds	r7, #12
 8003996:	46bd      	mov	sp, r7
 8003998:	bc80      	pop	{r7}
 800399a:	4770      	bx	lr
 800399c:	20003638 	.word	0x20003638

080039a0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b084      	sub	sp, #16
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80039a8:	f3ef 8311 	mrs	r3, BASEPRI
 80039ac:	f04f 0120 	mov.w	r1, #32
 80039b0:	f381 8811 	msr	BASEPRI, r1
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4808      	ldr	r0, [pc, #32]	@ (80039d8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 80039b8:	f7ff fd47 	bl	800344a <_PreparePacket>
 80039bc:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	68b8      	ldr	r0, [r7, #8]
 80039c4:	f7ff fe2c 	bl	8003620 <_SendPacket>
  RECORD_END();
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f383 8811 	msr	BASEPRI, r3
}
 80039ce:	bf00      	nop
 80039d0:	3710      	adds	r7, #16
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20003668 	.word	0x20003668

080039dc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80039dc:	b580      	push	{r7, lr}
 80039de:	b088      	sub	sp, #32
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80039e6:	f3ef 8311 	mrs	r3, BASEPRI
 80039ea:	f04f 0120 	mov.w	r1, #32
 80039ee:	f381 8811 	msr	BASEPRI, r1
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	4816      	ldr	r0, [pc, #88]	@ (8003a50 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80039f6:	f7ff fd28 	bl	800344a <_PreparePacket>
 80039fa:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	61fb      	str	r3, [r7, #28]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	e00b      	b.n	8003a22 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	1c59      	adds	r1, r3, #1
 8003a12:	61f9      	str	r1, [r7, #28]
 8003a14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	701a      	strb	r2, [r3, #0]
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	09db      	lsrs	r3, r3, #7
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b7f      	cmp	r3, #127	@ 0x7f
 8003a26:	d8f0      	bhi.n	8003a0a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	61fa      	str	r2, [r7, #28]
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	b2d2      	uxtb	r2, r2
 8003a32:	701a      	strb	r2, [r3, #0]
 8003a34:	69fb      	ldr	r3, [r7, #28]
 8003a36:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	68f9      	ldr	r1, [r7, #12]
 8003a3c:	6938      	ldr	r0, [r7, #16]
 8003a3e:	f7ff fdef 	bl	8003620 <_SendPacket>
  RECORD_END();
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f383 8811 	msr	BASEPRI, r3
}
 8003a48:	bf00      	nop
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20003668 	.word	0x20003668

08003a54 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	@ 0x30
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003a60:	f3ef 8311 	mrs	r3, BASEPRI
 8003a64:	f04f 0120 	mov.w	r1, #32
 8003a68:	f381 8811 	msr	BASEPRI, r1
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	4825      	ldr	r0, [pc, #148]	@ (8003b04 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003a70:	f7ff fceb 	bl	800344a <_PreparePacket>
 8003a74:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a82:	e00b      	b.n	8003a9c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003a84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a86:	b2da      	uxtb	r2, r3
 8003a88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a8a:	1c59      	adds	r1, r3, #1
 8003a8c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003a8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003a92:	b2d2      	uxtb	r2, r2
 8003a94:	701a      	strb	r2, [r3, #0]
 8003a96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a98:	09db      	lsrs	r3, r3, #7
 8003a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003aa0:	d8f0      	bhi.n	8003a84 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003aa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003aa8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]
 8003aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ab0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	623b      	str	r3, [r7, #32]
 8003aba:	e00b      	b.n	8003ad4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003abc:	6a3b      	ldr	r3, [r7, #32]
 8003abe:	b2da      	uxtb	r2, r3
 8003ac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac2:	1c59      	adds	r1, r3, #1
 8003ac4:	6279      	str	r1, [r7, #36]	@ 0x24
 8003ac6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003aca:	b2d2      	uxtb	r2, r2
 8003acc:	701a      	strb	r2, [r3, #0]
 8003ace:	6a3b      	ldr	r3, [r7, #32]
 8003ad0:	09db      	lsrs	r3, r3, #7
 8003ad2:	623b      	str	r3, [r7, #32]
 8003ad4:	6a3b      	ldr	r3, [r7, #32]
 8003ad6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ad8:	d8f0      	bhi.n	8003abc <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003adc:	1c5a      	adds	r2, r3, #1
 8003ade:	627a      	str	r2, [r7, #36]	@ 0x24
 8003ae0:	6a3a      	ldr	r2, [r7, #32]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]
 8003ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	6979      	ldr	r1, [r7, #20]
 8003aee:	69b8      	ldr	r0, [r7, #24]
 8003af0:	f7ff fd96 	bl	8003620 <_SendPacket>
  RECORD_END();
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	f383 8811 	msr	BASEPRI, r3
}
 8003afa:	bf00      	nop
 8003afc:	3730      	adds	r7, #48	@ 0x30
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	20003668 	.word	0x20003668

08003b08 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b08c      	sub	sp, #48	@ 0x30
 8003b0c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003b0e:	4b58      	ldr	r3, [pc, #352]	@ (8003c70 <SEGGER_SYSVIEW_Start+0x168>)
 8003b10:	2201      	movs	r2, #1
 8003b12:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003b14:	f3ef 8311 	mrs	r3, BASEPRI
 8003b18:	f04f 0120 	mov.w	r1, #32
 8003b1c:	f381 8811 	msr	BASEPRI, r1
 8003b20:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003b22:	4b53      	ldr	r3, [pc, #332]	@ (8003c70 <SEGGER_SYSVIEW_Start+0x168>)
 8003b24:	785b      	ldrb	r3, [r3, #1]
 8003b26:	220a      	movs	r2, #10
 8003b28:	4952      	ldr	r1, [pc, #328]	@ (8003c74 <SEGGER_SYSVIEW_Start+0x16c>)
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7ff fb16 	bl	800315c <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003b36:	200a      	movs	r0, #10
 8003b38:	f7ff ff32 	bl	80039a0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b3c:	f3ef 8311 	mrs	r3, BASEPRI
 8003b40:	f04f 0120 	mov.w	r1, #32
 8003b44:	f381 8811 	msr	BASEPRI, r1
 8003b48:	60bb      	str	r3, [r7, #8]
 8003b4a:	484b      	ldr	r0, [pc, #300]	@ (8003c78 <SEGGER_SYSVIEW_Start+0x170>)
 8003b4c:	f7ff fc7d 	bl	800344a <_PreparePacket>
 8003b50:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b5a:	4b45      	ldr	r3, [pc, #276]	@ (8003c70 <SEGGER_SYSVIEW_Start+0x168>)
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b60:	e00b      	b.n	8003b7a <SEGGER_SYSVIEW_Start+0x72>
 8003b62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b64:	b2da      	uxtb	r2, r3
 8003b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b68:	1c59      	adds	r1, r3, #1
 8003b6a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003b6c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003b70:	b2d2      	uxtb	r2, r2
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b76:	09db      	lsrs	r3, r3, #7
 8003b78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b7c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b7e:	d8f0      	bhi.n	8003b62 <SEGGER_SYSVIEW_Start+0x5a>
 8003b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b82:	1c5a      	adds	r2, r3, #1
 8003b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b88:	b2d2      	uxtb	r2, r2
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b8e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b94:	4b36      	ldr	r3, [pc, #216]	@ (8003c70 <SEGGER_SYSVIEW_Start+0x168>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	623b      	str	r3, [r7, #32]
 8003b9a:	e00b      	b.n	8003bb4 <SEGGER_SYSVIEW_Start+0xac>
 8003b9c:	6a3b      	ldr	r3, [r7, #32]
 8003b9e:	b2da      	uxtb	r2, r3
 8003ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba2:	1c59      	adds	r1, r3, #1
 8003ba4:	6279      	str	r1, [r7, #36]	@ 0x24
 8003ba6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003baa:	b2d2      	uxtb	r2, r2
 8003bac:	701a      	strb	r2, [r3, #0]
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	09db      	lsrs	r3, r3, #7
 8003bb2:	623b      	str	r3, [r7, #32]
 8003bb4:	6a3b      	ldr	r3, [r7, #32]
 8003bb6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bb8:	d8f0      	bhi.n	8003b9c <SEGGER_SYSVIEW_Start+0x94>
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	1c5a      	adds	r2, r3, #1
 8003bbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8003bc0:	6a3a      	ldr	r2, [r7, #32]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	61fb      	str	r3, [r7, #28]
 8003bce:	4b28      	ldr	r3, [pc, #160]	@ (8003c70 <SEGGER_SYSVIEW_Start+0x168>)
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	e00b      	b.n	8003bee <SEGGER_SYSVIEW_Start+0xe6>
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	1c59      	adds	r1, r3, #1
 8003bde:	61f9      	str	r1, [r7, #28]
 8003be0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]
 8003be8:	69bb      	ldr	r3, [r7, #24]
 8003bea:	09db      	lsrs	r3, r3, #7
 8003bec:	61bb      	str	r3, [r7, #24]
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	2b7f      	cmp	r3, #127	@ 0x7f
 8003bf2:	d8f0      	bhi.n	8003bd6 <SEGGER_SYSVIEW_Start+0xce>
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	1c5a      	adds	r2, r3, #1
 8003bf8:	61fa      	str	r2, [r7, #28]
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	617b      	str	r3, [r7, #20]
 8003c08:	2300      	movs	r3, #0
 8003c0a:	613b      	str	r3, [r7, #16]
 8003c0c:	e00b      	b.n	8003c26 <SEGGER_SYSVIEW_Start+0x11e>
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	1c59      	adds	r1, r3, #1
 8003c16:	6179      	str	r1, [r7, #20]
 8003c18:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	701a      	strb	r2, [r3, #0]
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	09db      	lsrs	r3, r3, #7
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c2a:	d8f0      	bhi.n	8003c0e <SEGGER_SYSVIEW_Start+0x106>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	617a      	str	r2, [r7, #20]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	701a      	strb	r2, [r3, #0]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003c3c:	2218      	movs	r2, #24
 8003c3e:	6839      	ldr	r1, [r7, #0]
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff fced 	bl	8003620 <_SendPacket>
      RECORD_END();
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003c4c:	4b08      	ldr	r3, [pc, #32]	@ (8003c70 <SEGGER_SYSVIEW_Start+0x168>)
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003c54:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <SEGGER_SYSVIEW_Start+0x168>)
 8003c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c58:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003c5a:	f000 f9eb 	bl	8004034 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003c5e:	f000 f9b1 	bl	8003fc4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003c62:	f000 fc1d 	bl	80044a0 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003c66:	bf00      	nop
 8003c68:	3730      	adds	r7, #48	@ 0x30
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	20003638 	.word	0x20003638
 8003c74:	0800479c 	.word	0x0800479c
 8003c78:	20003668 	.word	0x20003668

08003c7c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003c82:	f3ef 8311 	mrs	r3, BASEPRI
 8003c86:	f04f 0120 	mov.w	r1, #32
 8003c8a:	f381 8811 	msr	BASEPRI, r1
 8003c8e:	607b      	str	r3, [r7, #4]
 8003c90:	480b      	ldr	r0, [pc, #44]	@ (8003cc0 <SEGGER_SYSVIEW_Stop+0x44>)
 8003c92:	f7ff fbda 	bl	800344a <_PreparePacket>
 8003c96:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003c98:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc4 <SEGGER_SYSVIEW_Stop+0x48>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d007      	beq.n	8003cb0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003ca0:	220b      	movs	r2, #11
 8003ca2:	6839      	ldr	r1, [r7, #0]
 8003ca4:	6838      	ldr	r0, [r7, #0]
 8003ca6:	f7ff fcbb 	bl	8003620 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003caa:	4b06      	ldr	r3, [pc, #24]	@ (8003cc4 <SEGGER_SYSVIEW_Stop+0x48>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f383 8811 	msr	BASEPRI, r3
}
 8003cb6:	bf00      	nop
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	20003668 	.word	0x20003668
 8003cc4:	20003638 	.word	0x20003638

08003cc8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b08c      	sub	sp, #48	@ 0x30
 8003ccc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003cce:	f3ef 8311 	mrs	r3, BASEPRI
 8003cd2:	f04f 0120 	mov.w	r1, #32
 8003cd6:	f381 8811 	msr	BASEPRI, r1
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	4845      	ldr	r0, [pc, #276]	@ (8003df4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003cde:	f7ff fbb4 	bl	800344a <_PreparePacket>
 8003ce2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cec:	4b42      	ldr	r3, [pc, #264]	@ (8003df8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003cee:	685b      	ldr	r3, [r3, #4]
 8003cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cf2:	e00b      	b.n	8003d0c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cfa:	1c59      	adds	r1, r3, #1
 8003cfc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003cfe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d02:	b2d2      	uxtb	r2, r2
 8003d04:	701a      	strb	r2, [r3, #0]
 8003d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d08:	09db      	lsrs	r3, r3, #7
 8003d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d10:	d8f0      	bhi.n	8003cf4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d14:	1c5a      	adds	r2, r3, #1
 8003d16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d1a:	b2d2      	uxtb	r2, r2
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d20:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d26:	4b34      	ldr	r3, [pc, #208]	@ (8003df8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	623b      	str	r3, [r7, #32]
 8003d2c:	e00b      	b.n	8003d46 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	b2da      	uxtb	r2, r3
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	1c59      	adds	r1, r3, #1
 8003d36:	6279      	str	r1, [r7, #36]	@ 0x24
 8003d38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d3c:	b2d2      	uxtb	r2, r2
 8003d3e:	701a      	strb	r2, [r3, #0]
 8003d40:	6a3b      	ldr	r3, [r7, #32]
 8003d42:	09db      	lsrs	r3, r3, #7
 8003d44:	623b      	str	r3, [r7, #32]
 8003d46:	6a3b      	ldr	r3, [r7, #32]
 8003d48:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d4a:	d8f0      	bhi.n	8003d2e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	627a      	str	r2, [r7, #36]	@ 0x24
 8003d52:	6a3a      	ldr	r2, [r7, #32]
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]
 8003d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	61fb      	str	r3, [r7, #28]
 8003d60:	4b25      	ldr	r3, [pc, #148]	@ (8003df8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	61bb      	str	r3, [r7, #24]
 8003d66:	e00b      	b.n	8003d80 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003d68:	69bb      	ldr	r3, [r7, #24]
 8003d6a:	b2da      	uxtb	r2, r3
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	1c59      	adds	r1, r3, #1
 8003d70:	61f9      	str	r1, [r7, #28]
 8003d72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003d76:	b2d2      	uxtb	r2, r2
 8003d78:	701a      	strb	r2, [r3, #0]
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	09db      	lsrs	r3, r3, #7
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	2b7f      	cmp	r3, #127	@ 0x7f
 8003d84:	d8f0      	bhi.n	8003d68 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	1c5a      	adds	r2, r3, #1
 8003d8a:	61fa      	str	r2, [r7, #28]
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	701a      	strb	r2, [r3, #0]
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	617b      	str	r3, [r7, #20]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	613b      	str	r3, [r7, #16]
 8003d9e:	e00b      	b.n	8003db8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	1c59      	adds	r1, r3, #1
 8003da8:	6179      	str	r1, [r7, #20]
 8003daa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003dae:	b2d2      	uxtb	r2, r2
 8003db0:	701a      	strb	r2, [r3, #0]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	09db      	lsrs	r3, r3, #7
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	2b7f      	cmp	r3, #127	@ 0x7f
 8003dbc:	d8f0      	bhi.n	8003da0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	617a      	str	r2, [r7, #20]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003dce:	2218      	movs	r2, #24
 8003dd0:	6879      	ldr	r1, [r7, #4]
 8003dd2:	68b8      	ldr	r0, [r7, #8]
 8003dd4:	f7ff fc24 	bl	8003620 <_SendPacket>
  RECORD_END();
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003dde:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003de0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d002      	beq.n	8003dec <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003de6:	4b04      	ldr	r3, [pc, #16]	@ (8003df8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	4798      	blx	r3
  }
}
 8003dec:	bf00      	nop
 8003dee:	3730      	adds	r7, #48	@ 0x30
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20003668 	.word	0x20003668
 8003df8:	20003638 	.word	0x20003638

08003dfc <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b092      	sub	sp, #72	@ 0x48
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003e04:	f3ef 8311 	mrs	r3, BASEPRI
 8003e08:	f04f 0120 	mov.w	r1, #32
 8003e0c:	f381 8811 	msr	BASEPRI, r1
 8003e10:	617b      	str	r3, [r7, #20]
 8003e12:	486a      	ldr	r0, [pc, #424]	@ (8003fbc <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003e14:	f7ff fb19 	bl	800344a <_PreparePacket>
 8003e18:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681a      	ldr	r2, [r3, #0]
 8003e26:	4b66      	ldr	r3, [pc, #408]	@ (8003fc0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e2e:	e00b      	b.n	8003e48 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003e30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e32:	b2da      	uxtb	r2, r3
 8003e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e36:	1c59      	adds	r1, r3, #1
 8003e38:	6479      	str	r1, [r7, #68]	@ 0x44
 8003e3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e44:	09db      	lsrs	r3, r3, #7
 8003e46:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e4c:	d8f0      	bhi.n	8003e30 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003e4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]
 8003e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e5c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e68:	e00b      	b.n	8003e82 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e70:	1c59      	adds	r1, r3, #1
 8003e72:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003e74:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e78:	b2d2      	uxtb	r2, r2
 8003e7a:	701a      	strb	r2, [r3, #0]
 8003e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e7e:	09db      	lsrs	r3, r3, #7
 8003e80:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e84:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e86:	d8f0      	bhi.n	8003e6a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003e88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003e8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	701a      	strb	r2, [r3, #0]
 8003e94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e96:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	2220      	movs	r2, #32
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f7ff faa3 	bl	80033ec <_EncodeStr>
 8003ea6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003ea8:	2209      	movs	r2, #9
 8003eaa:	68f9      	ldr	r1, [r7, #12]
 8003eac:	6938      	ldr	r0, [r7, #16]
 8003eae:	f7ff fbb7 	bl	8003620 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4b40      	ldr	r3, [pc, #256]	@ (8003fc0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ec6:	e00b      	b.n	8003ee0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ece:	1c59      	adds	r1, r3, #1
 8003ed0:	6379      	str	r1, [r7, #52]	@ 0x34
 8003ed2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ed6:	b2d2      	uxtb	r2, r2
 8003ed8:	701a      	strb	r2, [r3, #0]
 8003eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003edc:	09db      	lsrs	r3, r3, #7
 8003ede:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee2:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ee4:	d8f0      	bhi.n	8003ec8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	637a      	str	r2, [r7, #52]	@ 0x34
 8003eec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eee:	b2d2      	uxtb	r2, r2
 8003ef0:	701a      	strb	r2, [r3, #0]
 8003ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ef4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f00:	e00b      	b.n	8003f1a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f04:	b2da      	uxtb	r2, r3
 8003f06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f08:	1c59      	adds	r1, r3, #1
 8003f0a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003f0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f10:	b2d2      	uxtb	r2, r2
 8003f12:	701a      	strb	r2, [r3, #0]
 8003f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f16:	09db      	lsrs	r3, r3, #7
 8003f18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f1e:	d8f0      	bhi.n	8003f02 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	701a      	strb	r2, [r3, #0]
 8003f2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f2e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	623b      	str	r3, [r7, #32]
 8003f3a:	e00b      	b.n	8003f54 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003f3c:	6a3b      	ldr	r3, [r7, #32]
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	1c59      	adds	r1, r3, #1
 8003f44:	6279      	str	r1, [r7, #36]	@ 0x24
 8003f46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	09db      	lsrs	r3, r3, #7
 8003f52:	623b      	str	r3, [r7, #32]
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f58:	d8f0      	bhi.n	8003f3c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5c:	1c5a      	adds	r2, r3, #1
 8003f5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003f60:	6a3a      	ldr	r2, [r7, #32]
 8003f62:	b2d2      	uxtb	r2, r2
 8003f64:	701a      	strb	r2, [r3, #0]
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	61fb      	str	r3, [r7, #28]
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61bb      	str	r3, [r7, #24]
 8003f72:	e00b      	b.n	8003f8c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	1c59      	adds	r1, r3, #1
 8003f7c:	61f9      	str	r1, [r7, #28]
 8003f7e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	09db      	lsrs	r3, r3, #7
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f90:	d8f0      	bhi.n	8003f74 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	1c5a      	adds	r2, r3, #1
 8003f96:	61fa      	str	r2, [r7, #28]
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	b2d2      	uxtb	r2, r2
 8003f9c:	701a      	strb	r2, [r3, #0]
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003fa2:	2215      	movs	r2, #21
 8003fa4:	68f9      	ldr	r1, [r7, #12]
 8003fa6:	6938      	ldr	r0, [r7, #16]
 8003fa8:	f7ff fb3a 	bl	8003620 <_SendPacket>
  RECORD_END();
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	f383 8811 	msr	BASEPRI, r3
}
 8003fb2:	bf00      	nop
 8003fb4:	3748      	adds	r7, #72	@ 0x48
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	20003668 	.word	0x20003668
 8003fc0:	20003638 	.word	0x20003638

08003fc4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003fc8:	4b07      	ldr	r3, [pc, #28]	@ (8003fe8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d008      	beq.n	8003fe2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003fd0:	4b05      	ldr	r3, [pc, #20]	@ (8003fe8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003fd2:	6a1b      	ldr	r3, [r3, #32]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003fda:	4b03      	ldr	r3, [pc, #12]	@ (8003fe8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	4798      	blx	r3
  }
}
 8003fe2:	bf00      	nop
 8003fe4:	bd80      	pop	{r7, pc}
 8003fe6:	bf00      	nop
 8003fe8:	20003638 	.word	0x20003638

08003fec <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b086      	sub	sp, #24
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003ff4:	f3ef 8311 	mrs	r3, BASEPRI
 8003ff8:	f04f 0120 	mov.w	r1, #32
 8003ffc:	f381 8811 	msr	BASEPRI, r1
 8004000:	617b      	str	r3, [r7, #20]
 8004002:	480b      	ldr	r0, [pc, #44]	@ (8004030 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8004004:	f7ff fa21 	bl	800344a <_PreparePacket>
 8004008:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800400a:	2280      	movs	r2, #128	@ 0x80
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	6938      	ldr	r0, [r7, #16]
 8004010:	f7ff f9ec 	bl	80033ec <_EncodeStr>
 8004014:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8004016:	220e      	movs	r2, #14
 8004018:	68f9      	ldr	r1, [r7, #12]
 800401a:	6938      	ldr	r0, [r7, #16]
 800401c:	f7ff fb00 	bl	8003620 <_SendPacket>
  RECORD_END();
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f383 8811 	msr	BASEPRI, r3
}
 8004026:	bf00      	nop
 8004028:	3718      	adds	r7, #24
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
 800402e:	bf00      	nop
 8004030:	20003668 	.word	0x20003668

08004034 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8004034:	b590      	push	{r4, r7, lr}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800403a:	4b15      	ldr	r3, [pc, #84]	@ (8004090 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d01a      	beq.n	8004078 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8004042:	4b13      	ldr	r3, [pc, #76]	@ (8004090 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d015      	beq.n	8004078 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800404c:	4b10      	ldr	r3, [pc, #64]	@ (8004090 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4798      	blx	r3
 8004054:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8004058:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800405a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	000a      	movs	r2, r1
 8004068:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800406a:	4613      	mov	r3, r2
 800406c:	461a      	mov	r2, r3
 800406e:	4621      	mov	r1, r4
 8004070:	200d      	movs	r0, #13
 8004072:	f7ff fcef 	bl	8003a54 <SEGGER_SYSVIEW_RecordU32x2>
 8004076:	e006      	b.n	8004086 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004078:	4b06      	ldr	r3, [pc, #24]	@ (8004094 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4619      	mov	r1, r3
 800407e:	200c      	movs	r0, #12
 8004080:	f7ff fcac 	bl	80039dc <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	bd90      	pop	{r4, r7, pc}
 800408e:	bf00      	nop
 8004090:	20003638 	.word	0x20003638
 8004094:	e0001004 	.word	0xe0001004

08004098 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800409e:	f3ef 8311 	mrs	r3, BASEPRI
 80040a2:	f04f 0120 	mov.w	r1, #32
 80040a6:	f381 8811 	msr	BASEPRI, r1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	4819      	ldr	r0, [pc, #100]	@ (8004114 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 80040ae:	f7ff f9cc 	bl	800344a <_PreparePacket>
 80040b2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80040b8:	4b17      	ldr	r3, [pc, #92]	@ (8004118 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040c0:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	e00b      	b.n	80040e4 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	1c59      	adds	r1, r3, #1
 80040d4:	6179      	str	r1, [r7, #20]
 80040d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	09db      	lsrs	r3, r3, #7
 80040e2:	613b      	str	r3, [r7, #16]
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80040e8:	d8f0      	bhi.n	80040cc <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	617a      	str	r2, [r7, #20]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80040fa:	2202      	movs	r2, #2
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	68b8      	ldr	r0, [r7, #8]
 8004100:	f7ff fa8e 	bl	8003620 <_SendPacket>
  RECORD_END();
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f383 8811 	msr	BASEPRI, r3
}
 800410a:	bf00      	nop
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20003668 	.word	0x20003668
 8004118:	e000ed04 	.word	0xe000ed04

0800411c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004122:	f3ef 8311 	mrs	r3, BASEPRI
 8004126:	f04f 0120 	mov.w	r1, #32
 800412a:	f381 8811 	msr	BASEPRI, r1
 800412e:	607b      	str	r3, [r7, #4]
 8004130:	4807      	ldr	r0, [pc, #28]	@ (8004150 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8004132:	f7ff f98a 	bl	800344a <_PreparePacket>
 8004136:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8004138:	2203      	movs	r2, #3
 800413a:	6839      	ldr	r1, [r7, #0]
 800413c:	6838      	ldr	r0, [r7, #0]
 800413e:	f7ff fa6f 	bl	8003620 <_SendPacket>
  RECORD_END();
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f383 8811 	msr	BASEPRI, r3
}
 8004148:	bf00      	nop
 800414a:	3708      	adds	r7, #8
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	20003668 	.word	0x20003668

08004154 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800415a:	f3ef 8311 	mrs	r3, BASEPRI
 800415e:	f04f 0120 	mov.w	r1, #32
 8004162:	f381 8811 	msr	BASEPRI, r1
 8004166:	607b      	str	r3, [r7, #4]
 8004168:	4807      	ldr	r0, [pc, #28]	@ (8004188 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800416a:	f7ff f96e 	bl	800344a <_PreparePacket>
 800416e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004170:	2212      	movs	r2, #18
 8004172:	6839      	ldr	r1, [r7, #0]
 8004174:	6838      	ldr	r0, [r7, #0]
 8004176:	f7ff fa53 	bl	8003620 <_SendPacket>
  RECORD_END();
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f383 8811 	msr	BASEPRI, r3
}
 8004180:	bf00      	nop
 8004182:	3708      	adds	r7, #8
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}
 8004188:	20003668 	.word	0x20003668

0800418c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004192:	f3ef 8311 	mrs	r3, BASEPRI
 8004196:	f04f 0120 	mov.w	r1, #32
 800419a:	f381 8811 	msr	BASEPRI, r1
 800419e:	607b      	str	r3, [r7, #4]
 80041a0:	4807      	ldr	r0, [pc, #28]	@ (80041c0 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80041a2:	f7ff f952 	bl	800344a <_PreparePacket>
 80041a6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 80041a8:	2211      	movs	r2, #17
 80041aa:	6839      	ldr	r1, [r7, #0]
 80041ac:	6838      	ldr	r0, [r7, #0]
 80041ae:	f7ff fa37 	bl	8003620 <_SendPacket>
  RECORD_END();
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f383 8811 	msr	BASEPRI, r3
}
 80041b8:	bf00      	nop
 80041ba:	3708      	adds	r7, #8
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	20003668 	.word	0x20003668

080041c4 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b088      	sub	sp, #32
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80041cc:	f3ef 8311 	mrs	r3, BASEPRI
 80041d0:	f04f 0120 	mov.w	r1, #32
 80041d4:	f381 8811 	msr	BASEPRI, r1
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	4819      	ldr	r0, [pc, #100]	@ (8004240 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80041dc:	f7ff f935 	bl	800344a <_PreparePacket>
 80041e0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80041e6:	4b17      	ldr	r3, [pc, #92]	@ (8004244 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	61fb      	str	r3, [r7, #28]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	61bb      	str	r3, [r7, #24]
 80041f8:	e00b      	b.n	8004212 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	b2da      	uxtb	r2, r3
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	1c59      	adds	r1, r3, #1
 8004202:	61f9      	str	r1, [r7, #28]
 8004204:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	701a      	strb	r2, [r3, #0]
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	09db      	lsrs	r3, r3, #7
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	69bb      	ldr	r3, [r7, #24]
 8004214:	2b7f      	cmp	r3, #127	@ 0x7f
 8004216:	d8f0      	bhi.n	80041fa <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	61fa      	str	r2, [r7, #28]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	b2d2      	uxtb	r2, r2
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004228:	2208      	movs	r2, #8
 800422a:	68f9      	ldr	r1, [r7, #12]
 800422c:	6938      	ldr	r0, [r7, #16]
 800422e:	f7ff f9f7 	bl	8003620 <_SendPacket>
  RECORD_END();
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f383 8811 	msr	BASEPRI, r3
}
 8004238:	bf00      	nop
 800423a:	3720      	adds	r7, #32
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}
 8004240:	20003668 	.word	0x20003668
 8004244:	20003638 	.word	0x20003638

08004248 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004248:	b580      	push	{r7, lr}
 800424a:	b088      	sub	sp, #32
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004250:	f3ef 8311 	mrs	r3, BASEPRI
 8004254:	f04f 0120 	mov.w	r1, #32
 8004258:	f381 8811 	msr	BASEPRI, r1
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	4819      	ldr	r0, [pc, #100]	@ (80042c4 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004260:	f7ff f8f3 	bl	800344a <_PreparePacket>
 8004264:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800426a:	4b17      	ldr	r3, [pc, #92]	@ (80042c8 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800426c:	691b      	ldr	r3, [r3, #16]
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	61fb      	str	r3, [r7, #28]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	61bb      	str	r3, [r7, #24]
 800427c:	e00b      	b.n	8004296 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800427e:	69bb      	ldr	r3, [r7, #24]
 8004280:	b2da      	uxtb	r2, r3
 8004282:	69fb      	ldr	r3, [r7, #28]
 8004284:	1c59      	adds	r1, r3, #1
 8004286:	61f9      	str	r1, [r7, #28]
 8004288:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	09db      	lsrs	r3, r3, #7
 8004294:	61bb      	str	r3, [r7, #24]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2b7f      	cmp	r3, #127	@ 0x7f
 800429a:	d8f0      	bhi.n	800427e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	61fa      	str	r2, [r7, #28]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	701a      	strb	r2, [r3, #0]
 80042a8:	69fb      	ldr	r3, [r7, #28]
 80042aa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80042ac:	2204      	movs	r2, #4
 80042ae:	68f9      	ldr	r1, [r7, #12]
 80042b0:	6938      	ldr	r0, [r7, #16]
 80042b2:	f7ff f9b5 	bl	8003620 <_SendPacket>
  RECORD_END();
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	f383 8811 	msr	BASEPRI, r3
}
 80042bc:	bf00      	nop
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	20003668 	.word	0x20003668
 80042c8:	20003638 	.word	0x20003638

080042cc <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b088      	sub	sp, #32
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042d4:	f3ef 8311 	mrs	r3, BASEPRI
 80042d8:	f04f 0120 	mov.w	r1, #32
 80042dc:	f381 8811 	msr	BASEPRI, r1
 80042e0:	617b      	str	r3, [r7, #20]
 80042e2:	4819      	ldr	r0, [pc, #100]	@ (8004348 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80042e4:	f7ff f8b1 	bl	800344a <_PreparePacket>
 80042e8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80042ee:	4b17      	ldr	r3, [pc, #92]	@ (800434c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	687a      	ldr	r2, [r7, #4]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	61bb      	str	r3, [r7, #24]
 8004300:	e00b      	b.n	800431a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	b2da      	uxtb	r2, r3
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	1c59      	adds	r1, r3, #1
 800430a:	61f9      	str	r1, [r7, #28]
 800430c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004310:	b2d2      	uxtb	r2, r2
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	09db      	lsrs	r3, r3, #7
 8004318:	61bb      	str	r3, [r7, #24]
 800431a:	69bb      	ldr	r3, [r7, #24]
 800431c:	2b7f      	cmp	r3, #127	@ 0x7f
 800431e:	d8f0      	bhi.n	8004302 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	1c5a      	adds	r2, r3, #1
 8004324:	61fa      	str	r2, [r7, #28]
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004330:	2206      	movs	r2, #6
 8004332:	68f9      	ldr	r1, [r7, #12]
 8004334:	6938      	ldr	r0, [r7, #16]
 8004336:	f7ff f973 	bl	8003620 <_SendPacket>
  RECORD_END();
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f383 8811 	msr	BASEPRI, r3
}
 8004340:	bf00      	nop
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20003668 	.word	0x20003668
 800434c:	20003638 	.word	0x20003638

08004350 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004350:	b580      	push	{r7, lr}
 8004352:	b08c      	sub	sp, #48	@ 0x30
 8004354:	af00      	add	r7, sp, #0
 8004356:	4603      	mov	r3, r0
 8004358:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800435a:	4b40      	ldr	r3, [pc, #256]	@ (800445c <SEGGER_SYSVIEW_SendModule+0x10c>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d077      	beq.n	8004452 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004362:	4b3e      	ldr	r3, [pc, #248]	@ (800445c <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004368:	2300      	movs	r3, #0
 800436a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800436c:	e008      	b.n	8004380 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800436e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004376:	2b00      	cmp	r3, #0
 8004378:	d007      	beq.n	800438a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800437a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800437c:	3301      	adds	r3, #1
 800437e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004384:	429a      	cmp	r2, r3
 8004386:	d3f2      	bcc.n	800436e <SEGGER_SYSVIEW_SendModule+0x1e>
 8004388:	e000      	b.n	800438c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800438a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800438c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d055      	beq.n	800443e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004392:	f3ef 8311 	mrs	r3, BASEPRI
 8004396:	f04f 0120 	mov.w	r1, #32
 800439a:	f381 8811 	msr	BASEPRI, r1
 800439e:	617b      	str	r3, [r7, #20]
 80043a0:	482f      	ldr	r0, [pc, #188]	@ (8004460 <SEGGER_SYSVIEW_SendModule+0x110>)
 80043a2:	f7ff f852 	bl	800344a <_PreparePacket>
 80043a6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80043b0:	79fb      	ldrb	r3, [r7, #7]
 80043b2:	623b      	str	r3, [r7, #32]
 80043b4:	e00b      	b.n	80043ce <SEGGER_SYSVIEW_SendModule+0x7e>
 80043b6:	6a3b      	ldr	r3, [r7, #32]
 80043b8:	b2da      	uxtb	r2, r3
 80043ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043bc:	1c59      	adds	r1, r3, #1
 80043be:	6279      	str	r1, [r7, #36]	@ 0x24
 80043c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	6a3b      	ldr	r3, [r7, #32]
 80043ca:	09db      	lsrs	r3, r3, #7
 80043cc:	623b      	str	r3, [r7, #32]
 80043ce:	6a3b      	ldr	r3, [r7, #32]
 80043d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80043d2:	d8f0      	bhi.n	80043b6 <SEGGER_SYSVIEW_SendModule+0x66>
 80043d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80043da:	6a3a      	ldr	r2, [r7, #32]
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]
 80043e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043e2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	61fb      	str	r3, [r7, #28]
 80043e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	e00b      	b.n	8004408 <SEGGER_SYSVIEW_SendModule+0xb8>
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	1c59      	adds	r1, r3, #1
 80043f8:	61f9      	str	r1, [r7, #28]
 80043fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043fe:	b2d2      	uxtb	r2, r2
 8004400:	701a      	strb	r2, [r3, #0]
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	09db      	lsrs	r3, r3, #7
 8004406:	61bb      	str	r3, [r7, #24]
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	2b7f      	cmp	r3, #127	@ 0x7f
 800440c:	d8f0      	bhi.n	80043f0 <SEGGER_SYSVIEW_SendModule+0xa0>
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	61fa      	str	r2, [r7, #28]
 8004414:	69ba      	ldr	r2, [r7, #24]
 8004416:	b2d2      	uxtb	r2, r2
 8004418:	701a      	strb	r2, [r3, #0]
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800441e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2280      	movs	r2, #128	@ 0x80
 8004424:	4619      	mov	r1, r3
 8004426:	68f8      	ldr	r0, [r7, #12]
 8004428:	f7fe ffe0 	bl	80033ec <_EncodeStr>
 800442c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800442e:	2216      	movs	r2, #22
 8004430:	68f9      	ldr	r1, [r7, #12]
 8004432:	6938      	ldr	r0, [r7, #16]
 8004434:	f7ff f8f4 	bl	8003620 <_SendPacket>
      RECORD_END();
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800443e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004440:	2b00      	cmp	r3, #0
 8004442:	d006      	beq.n	8004452 <SEGGER_SYSVIEW_SendModule+0x102>
 8004444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d002      	beq.n	8004452 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800444c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	4798      	blx	r3
    }
  }
}
 8004452:	bf00      	nop
 8004454:	3730      	adds	r7, #48	@ 0x30
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20003660 	.word	0x20003660
 8004460:	20003668 	.word	0x20003668

08004464 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004464:	b580      	push	{r7, lr}
 8004466:	b082      	sub	sp, #8
 8004468:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800446a:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00f      	beq.n	8004492 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004472:	4b0a      	ldr	r3, [pc, #40]	@ (800449c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d1f2      	bne.n	8004478 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20003660 	.word	0x20003660

080044a0 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80044a6:	f3ef 8311 	mrs	r3, BASEPRI
 80044aa:	f04f 0120 	mov.w	r1, #32
 80044ae:	f381 8811 	msr	BASEPRI, r1
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	4817      	ldr	r0, [pc, #92]	@ (8004514 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80044b6:	f7fe ffc8 	bl	800344a <_PreparePacket>
 80044ba:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	4b14      	ldr	r3, [pc, #80]	@ (8004518 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	613b      	str	r3, [r7, #16]
 80044ca:	e00b      	b.n	80044e4 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	b2da      	uxtb	r2, r3
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	1c59      	adds	r1, r3, #1
 80044d4:	6179      	str	r1, [r7, #20]
 80044d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	09db      	lsrs	r3, r3, #7
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	693b      	ldr	r3, [r7, #16]
 80044e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80044e8:	d8f0      	bhi.n	80044cc <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	1c5a      	adds	r2, r3, #1
 80044ee:	617a      	str	r2, [r7, #20]
 80044f0:	693a      	ldr	r2, [r7, #16]
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80044fa:	221b      	movs	r2, #27
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	68b8      	ldr	r0, [r7, #8]
 8004500:	f7ff f88e 	bl	8003620 <_SendPacket>
  RECORD_END();
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f383 8811 	msr	BASEPRI, r3
}
 800450a:	bf00      	nop
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20003668 	.word	0x20003668
 8004518:	20003664 	.word	0x20003664

0800451c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800451c:	b580      	push	{r7, lr}
 800451e:	b08a      	sub	sp, #40	@ 0x28
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004524:	f3ef 8311 	mrs	r3, BASEPRI
 8004528:	f04f 0120 	mov.w	r1, #32
 800452c:	f381 8811 	msr	BASEPRI, r1
 8004530:	617b      	str	r3, [r7, #20]
 8004532:	4827      	ldr	r0, [pc, #156]	@ (80045d0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8004534:	f7fe ff89 	bl	800344a <_PreparePacket>
 8004538:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800453a:	2280      	movs	r2, #128	@ 0x80
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	6938      	ldr	r0, [r7, #16]
 8004540:	f7fe ff54 	bl	80033ec <_EncodeStr>
 8004544:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
 800454a:	2301      	movs	r3, #1
 800454c:	623b      	str	r3, [r7, #32]
 800454e:	e00b      	b.n	8004568 <SEGGER_SYSVIEW_Warn+0x4c>
 8004550:	6a3b      	ldr	r3, [r7, #32]
 8004552:	b2da      	uxtb	r2, r3
 8004554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004556:	1c59      	adds	r1, r3, #1
 8004558:	6279      	str	r1, [r7, #36]	@ 0x24
 800455a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	701a      	strb	r2, [r3, #0]
 8004562:	6a3b      	ldr	r3, [r7, #32]
 8004564:	09db      	lsrs	r3, r3, #7
 8004566:	623b      	str	r3, [r7, #32]
 8004568:	6a3b      	ldr	r3, [r7, #32]
 800456a:	2b7f      	cmp	r3, #127	@ 0x7f
 800456c:	d8f0      	bhi.n	8004550 <SEGGER_SYSVIEW_Warn+0x34>
 800456e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	627a      	str	r2, [r7, #36]	@ 0x24
 8004574:	6a3a      	ldr	r2, [r7, #32]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]
 800457a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800457c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	2300      	movs	r3, #0
 8004584:	61bb      	str	r3, [r7, #24]
 8004586:	e00b      	b.n	80045a0 <SEGGER_SYSVIEW_Warn+0x84>
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	b2da      	uxtb	r2, r3
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	1c59      	adds	r1, r3, #1
 8004590:	61f9      	str	r1, [r7, #28]
 8004592:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	09db      	lsrs	r3, r3, #7
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80045a4:	d8f0      	bhi.n	8004588 <SEGGER_SYSVIEW_Warn+0x6c>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	61fa      	str	r2, [r7, #28]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	701a      	strb	r2, [r3, #0]
 80045b2:	69fb      	ldr	r3, [r7, #28]
 80045b4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80045b6:	221a      	movs	r2, #26
 80045b8:	68f9      	ldr	r1, [r7, #12]
 80045ba:	6938      	ldr	r0, [r7, #16]
 80045bc:	f7ff f830 	bl	8003620 <_SendPacket>
  RECORD_END();
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	f383 8811 	msr	BASEPRI, r3
}
 80045c6:	bf00      	nop
 80045c8:	3728      	adds	r7, #40	@ 0x28
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	20003668 	.word	0x20003668

080045d4 <memcmp>:
 80045d4:	b510      	push	{r4, lr}
 80045d6:	3901      	subs	r1, #1
 80045d8:	4402      	add	r2, r0
 80045da:	4290      	cmp	r0, r2
 80045dc:	d101      	bne.n	80045e2 <memcmp+0xe>
 80045de:	2000      	movs	r0, #0
 80045e0:	e005      	b.n	80045ee <memcmp+0x1a>
 80045e2:	7803      	ldrb	r3, [r0, #0]
 80045e4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80045e8:	42a3      	cmp	r3, r4
 80045ea:	d001      	beq.n	80045f0 <memcmp+0x1c>
 80045ec:	1b18      	subs	r0, r3, r4
 80045ee:	bd10      	pop	{r4, pc}
 80045f0:	3001      	adds	r0, #1
 80045f2:	e7f2      	b.n	80045da <memcmp+0x6>

080045f4 <memset>:
 80045f4:	4603      	mov	r3, r0
 80045f6:	4402      	add	r2, r0
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d100      	bne.n	80045fe <memset+0xa>
 80045fc:	4770      	bx	lr
 80045fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004602:	e7f9      	b.n	80045f8 <memset+0x4>

08004604 <__libc_init_array>:
 8004604:	b570      	push	{r4, r5, r6, lr}
 8004606:	2600      	movs	r6, #0
 8004608:	4d0c      	ldr	r5, [pc, #48]	@ (800463c <__libc_init_array+0x38>)
 800460a:	4c0d      	ldr	r4, [pc, #52]	@ (8004640 <__libc_init_array+0x3c>)
 800460c:	1b64      	subs	r4, r4, r5
 800460e:	10a4      	asrs	r4, r4, #2
 8004610:	42a6      	cmp	r6, r4
 8004612:	d109      	bne.n	8004628 <__libc_init_array+0x24>
 8004614:	f000 f828 	bl	8004668 <_init>
 8004618:	2600      	movs	r6, #0
 800461a:	4d0a      	ldr	r5, [pc, #40]	@ (8004644 <__libc_init_array+0x40>)
 800461c:	4c0a      	ldr	r4, [pc, #40]	@ (8004648 <__libc_init_array+0x44>)
 800461e:	1b64      	subs	r4, r4, r5
 8004620:	10a4      	asrs	r4, r4, #2
 8004622:	42a6      	cmp	r6, r4
 8004624:	d105      	bne.n	8004632 <__libc_init_array+0x2e>
 8004626:	bd70      	pop	{r4, r5, r6, pc}
 8004628:	f855 3b04 	ldr.w	r3, [r5], #4
 800462c:	4798      	blx	r3
 800462e:	3601      	adds	r6, #1
 8004630:	e7ee      	b.n	8004610 <__libc_init_array+0xc>
 8004632:	f855 3b04 	ldr.w	r3, [r5], #4
 8004636:	4798      	blx	r3
 8004638:	3601      	adds	r6, #1
 800463a:	e7f2      	b.n	8004622 <__libc_init_array+0x1e>
 800463c:	080047a8 	.word	0x080047a8
 8004640:	080047a8 	.word	0x080047a8
 8004644:	080047a8 	.word	0x080047a8
 8004648:	080047ac 	.word	0x080047ac

0800464c <memcpy>:
 800464c:	440a      	add	r2, r1
 800464e:	4291      	cmp	r1, r2
 8004650:	f100 33ff 	add.w	r3, r0, #4294967295
 8004654:	d100      	bne.n	8004658 <memcpy+0xc>
 8004656:	4770      	bx	lr
 8004658:	b510      	push	{r4, lr}
 800465a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800465e:	4291      	cmp	r1, r2
 8004660:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004664:	d1f9      	bne.n	800465a <memcpy+0xe>
 8004666:	bd10      	pop	{r4, pc}

08004668 <_init>:
 8004668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800466a:	bf00      	nop
 800466c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800466e:	bc08      	pop	{r3}
 8004670:	469e      	mov	lr, r3
 8004672:	4770      	bx	lr

08004674 <_fini>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	bf00      	nop
 8004678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800467a:	bc08      	pop	{r3}
 800467c:	469e      	mov	lr, r3
 800467e:	4770      	bx	lr
