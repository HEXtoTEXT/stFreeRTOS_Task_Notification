
stFreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004610  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08004720  08004720  00005720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004848  08004848  00006014  2**0
                  CONTENTS
  4 .ARM          00000000  08004848  08004848  00006014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004848  08004848  00006014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004848  08004848  00005848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800484c  0800484c  0000584c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004850  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000374c  20000014  08004864  00006014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003760  08004864  00006760  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ff6e  00000000  00000000  0000603d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002636  00000000  00000000  00015fab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  000185e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bc7  00000000  00000000  00019520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018bc9  00000000  00000000  0001a0e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012100  00000000  00000000  00032cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f86e  00000000  00000000  00044db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d461e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ed4  00000000  00000000  000d4664  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000d8538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08004708 	.word	0x08004708

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08004708 	.word	0x08004708

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000030 	.word	0x20000030
 800017c:	20000084 	.word	0x20000084

08000180 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	f003 0307 	and.w	r3, r3, #7
 800018e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000190:	4b0c      	ldr	r3, [pc, #48]	@ (80001c4 <__NVIC_SetPriorityGrouping+0x44>)
 8000192:	68db      	ldr	r3, [r3, #12]
 8000194:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000196:	68ba      	ldr	r2, [r7, #8]
 8000198:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800019c:	4013      	ands	r3, r2
 800019e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80001a0:	68fb      	ldr	r3, [r7, #12]
 80001a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001a4:	68bb      	ldr	r3, [r7, #8]
 80001a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80001ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80001b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001b2:	4a04      	ldr	r2, [pc, #16]	@ (80001c4 <__NVIC_SetPriorityGrouping+0x44>)
 80001b4:	68bb      	ldr	r3, [r7, #8]
 80001b6:	60d3      	str	r3, [r2, #12]
}
 80001b8:	bf00      	nop
 80001ba:	3714      	adds	r7, #20
 80001bc:	46bd      	mov	sp, r7
 80001be:	bc80      	pop	{r7}
 80001c0:	4770      	bx	lr
 80001c2:	bf00      	nop
 80001c4:	e000ed00 	.word	0xe000ed00

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
  DWT->CTRL |= (1 << DWT_CTRL_CYCCNTENA_Pos);
 80001ce:	4b18      	ldr	r3, [pc, #96]	@ (8000230 <main+0x68>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	4a17      	ldr	r2, [pc, #92]	@ (8000230 <main+0x68>)
 80001d4:	f043 0301 	orr.w	r3, r3, #1
 80001d8:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fb4d 	bl	8000878 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f835 	bl	800024c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 80001e2:	f000 f879 	bl	80002d8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80001e6:	f000 f96d 	bl	80004c4 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 80001ea:	f000 f9d5 	bl	8000598 <MX_SPI1_Init>
  MX_SPI2_Init();
 80001ee:	f000 fa3b 	bl	8000668 <MX_SPI2_Init>
//  huart1.Instance->DR = 'A';

  NVIC_SetPriorityGrouping( 0 );
 80001f2:	2000      	movs	r0, #0
 80001f4:	f7ff ffc4 	bl	8000180 <__NVIC_SetPriorityGrouping>

  SEGGER_SYSVIEW_Conf();
 80001f8:	f002 fdf6 	bl	8002de8 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80001fc:	f003 fcd4 	bl	8003ba8 <SEGGER_SYSVIEW_Start>

  xTaskCreate(taskFunc1, "TASK1", configMINIMAL_STACK_SIZE, NULL, 2, &taskHandle1);
 8000200:	4b0c      	ldr	r3, [pc, #48]	@ (8000234 <main+0x6c>)
 8000202:	9301      	str	r3, [sp, #4]
 8000204:	2302      	movs	r3, #2
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2300      	movs	r3, #0
 800020a:	2280      	movs	r2, #128	@ 0x80
 800020c:	490a      	ldr	r1, [pc, #40]	@ (8000238 <main+0x70>)
 800020e:	480b      	ldr	r0, [pc, #44]	@ (800023c <main+0x74>)
 8000210:	f001 fd6e 	bl	8001cf0 <xTaskCreate>
  xTaskCreate(taskFunc2, "TASK2", configMINIMAL_STACK_SIZE, NULL, 2, &taskHandle2);
 8000214:	4b0a      	ldr	r3, [pc, #40]	@ (8000240 <main+0x78>)
 8000216:	9301      	str	r3, [sp, #4]
 8000218:	2302      	movs	r3, #2
 800021a:	9300      	str	r3, [sp, #0]
 800021c:	2300      	movs	r3, #0
 800021e:	2280      	movs	r2, #128	@ 0x80
 8000220:	4908      	ldr	r1, [pc, #32]	@ (8000244 <main+0x7c>)
 8000222:	4809      	ldr	r0, [pc, #36]	@ (8000248 <main+0x80>)
 8000224:	f001 fd64 	bl	8001cf0 <xTaskCreate>

  vTaskStartScheduler();
 8000228:	f001 feb0 	bl	8001f8c <vTaskStartScheduler>
  /* USER CODE END 2 */

  while (1)
 800022c:	bf00      	nop
 800022e:	e7fd      	b.n	800022c <main+0x64>
 8000230:	e0001000 	.word	0xe0001000
 8000234:	20000284 	.word	0x20000284
 8000238:	08004720 	.word	0x08004720
 800023c:	080003f9 	.word	0x080003f9
 8000240:	20000288 	.word	0x20000288
 8000244:	08004728 	.word	0x08004728
 8000248:	08000419 	.word	0x08000419

0800024c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	b090      	sub	sp, #64	@ 0x40
 8000250:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000252:	f107 0318 	add.w	r3, r7, #24
 8000256:	2228      	movs	r2, #40	@ 0x28
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f004 fa1a 	bl	8004694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2200      	movs	r2, #0
 8000264:	601a      	str	r2, [r3, #0]
 8000266:	605a      	str	r2, [r3, #4]
 8000268:	609a      	str	r2, [r3, #8]
 800026a:	60da      	str	r2, [r3, #12]
 800026c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800026e:	2301      	movs	r3, #1
 8000270:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000272:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000276:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800027c:	2301      	movs	r3, #1
 800027e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000280:	2302      	movs	r3, #2
 8000282:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000284:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000288:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800028e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000290:	f107 0318 	add.w	r3, r7, #24
 8000294:	4618      	mov	r0, r3
 8000296:	f000 fdd1 	bl	8000e3c <HAL_RCC_OscConfig>
 800029a:	4603      	mov	r3, r0
 800029c:	2b00      	cmp	r3, #0
 800029e:	d001      	beq.n	80002a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a0:	f000 fa58 	bl	8000754 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a4:	230f      	movs	r3, #15
 80002a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002a8:	2302      	movs	r3, #2
 80002aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ac:	2300      	movs	r3, #0
 80002ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ba:	1d3b      	adds	r3, r7, #4
 80002bc:	2102      	movs	r1, #2
 80002be:	4618      	mov	r0, r3
 80002c0:	f001 f83e 	bl	8001340 <HAL_RCC_ClockConfig>
 80002c4:	4603      	mov	r3, r0
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d001      	beq.n	80002ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ca:	f000 fa43 	bl	8000754 <Error_Handler>
  }
}
 80002ce:	bf00      	nop
 80002d0:	3740      	adds	r7, #64	@ 0x40
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bd80      	pop	{r7, pc}
	...

080002d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b088      	sub	sp, #32
 80002dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002de:	f107 0310 	add.w	r3, r7, #16
 80002e2:	2200      	movs	r2, #0
 80002e4:	601a      	str	r2, [r3, #0]
 80002e6:	605a      	str	r2, [r3, #4]
 80002e8:	609a      	str	r2, [r3, #8]
 80002ea:	60da      	str	r2, [r3, #12]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002ec:	4b3e      	ldr	r3, [pc, #248]	@ (80003e8 <MX_GPIO_Init+0x110>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	4a3d      	ldr	r2, [pc, #244]	@ (80003e8 <MX_GPIO_Init+0x110>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6193      	str	r3, [r2, #24]
 80002f8:	4b3b      	ldr	r3, [pc, #236]	@ (80003e8 <MX_GPIO_Init+0x110>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	f003 0310 	and.w	r3, r3, #16
 8000300:	60fb      	str	r3, [r7, #12]
 8000302:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000304:	4b38      	ldr	r3, [pc, #224]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a37      	ldr	r2, [pc, #220]	@ (80003e8 <MX_GPIO_Init+0x110>)
 800030a:	f043 0320 	orr.w	r3, r3, #32
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b35      	ldr	r3, [pc, #212]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f003 0320 	and.w	r3, r3, #32
 8000318:	60bb      	str	r3, [r7, #8]
 800031a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b32      	ldr	r3, [pc, #200]	@ (80003e8 <MX_GPIO_Init+0x110>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a31      	ldr	r2, [pc, #196]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b2f      	ldr	r3, [pc, #188]	@ (80003e8 <MX_GPIO_Init+0x110>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000334:	4b2c      	ldr	r3, [pc, #176]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	4a2b      	ldr	r2, [pc, #172]	@ (80003e8 <MX_GPIO_Init+0x110>)
 800033a:	f043 0308 	orr.w	r3, r3, #8
 800033e:	6193      	str	r3, [r2, #24]
 8000340:	4b29      	ldr	r3, [pc, #164]	@ (80003e8 <MX_GPIO_Init+0x110>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	f003 0308 	and.w	r3, r3, #8
 8000348:	603b      	str	r3, [r7, #0]
 800034a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8000352:	4826      	ldr	r0, [pc, #152]	@ (80003ec <MX_GPIO_Init+0x114>)
 8000354:	f000 fd5a 	bl	8000e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RST_Pin|LCD_DC_Pin|LCD_SSEL_Pin|LED_D0_Pin
 8000358:	2200      	movs	r2, #0
 800035a:	f649 0158 	movw	r1, #39000	@ 0x9858
 800035e:	4824      	ldr	r0, [pc, #144]	@ (80003f0 <MX_GPIO_Init+0x118>)
 8000360:	f000 fd54 	bl	8000e0c <HAL_GPIO_WritePin>
	                          |LED_D1_Pin|LED_D2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	2108      	movs	r1, #8
 8000368:	4822      	ldr	r0, [pc, #136]	@ (80003f4 <MX_GPIO_Init+0x11c>)
 800036a:	f000 fd4f 	bl	8000e0c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_R_Pin LED_G_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 800036e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000372:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000374:	2301      	movs	r3, #1
 8000376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000378:	2300      	movs	r3, #0
 800037a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800037c:	2302      	movs	r3, #2
 800037e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000380:	f107 0310 	add.w	r3, r7, #16
 8000384:	4619      	mov	r1, r3
 8000386:	4819      	ldr	r0, [pc, #100]	@ (80003ec <MX_GPIO_Init+0x114>)
 8000388:	f000 fbbc 	bl	8000b04 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin LCD_SSEL_Pin LED_D0_Pin
	                           LED_D1_Pin LED_D2_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin|LCD_SSEL_Pin|LED_D0_Pin
 800038c:	f649 0358 	movw	r3, #39000	@ 0x9858
 8000390:	613b      	str	r3, [r7, #16]
	                          |LED_D1_Pin|LED_D2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000392:	2301      	movs	r3, #1
 8000394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000396:	2300      	movs	r3, #0
 8000398:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800039a:	2302      	movs	r3, #2
 800039c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800039e:	f107 0310 	add.w	r3, r7, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	4812      	ldr	r0, [pc, #72]	@ (80003f0 <MX_GPIO_Init+0x118>)
 80003a6:	f000 fbad 	bl	8000b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_TOUCH_Pin */
  GPIO_InitStruct.Pin = KEY_TOUCH_Pin;
 80003aa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003b4:	2300      	movs	r3, #0
 80003b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY_TOUCH_GPIO_Port, &GPIO_InitStruct);
 80003b8:	f107 0310 	add.w	r3, r7, #16
 80003bc:	4619      	mov	r1, r3
 80003be:	480c      	ldr	r0, [pc, #48]	@ (80003f0 <MX_GPIO_Init+0x118>)
 80003c0:	f000 fba0 	bl	8000b04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D3_Pin;
 80003c4:	2308      	movs	r3, #8
 80003c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c8:	2301      	movs	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003d0:	2302      	movs	r3, #2
 80003d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_D3_GPIO_Port, &GPIO_InitStruct);
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	4619      	mov	r1, r3
 80003da:	4806      	ldr	r0, [pc, #24]	@ (80003f4 <MX_GPIO_Init+0x11c>)
 80003dc:	f000 fb92 	bl	8000b04 <HAL_GPIO_Init>
}
 80003e0:	bf00      	nop
 80003e2:	3720      	adds	r7, #32
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	40021000 	.word	0x40021000
 80003ec:	40011000 	.word	0x40011000
 80003f0:	40010800 	.word	0x40010800
 80003f4:	40010c00 	.word	0x40010c00

080003f8 <taskFunc1>:

/* USER CODE BEGIN 4 */
void taskFunc1(void *param)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_UART_Receive(&huart1, &touchFlag, 1, 10);
 8000400:	230a      	movs	r3, #10
 8000402:	2201      	movs	r2, #1
 8000404:	4902      	ldr	r1, [pc, #8]	@ (8000410 <taskFunc1+0x18>)
 8000406:	4803      	ldr	r0, [pc, #12]	@ (8000414 <taskFunc1+0x1c>)
 8000408:	f001 fa0e 	bl	8001828 <HAL_UART_Receive>
 800040c:	e7f8      	b.n	8000400 <taskFunc1+0x8>
 800040e:	bf00      	nop
 8000410:	20000384 	.word	0x20000384
 8000414:	2000028c 	.word	0x2000028c

08000418 <taskFunc2>:

	taskYIELD();
}

void taskFunc2(void *param)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b082      	sub	sp, #8
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	while(1)
	{
		switch (touchFlag)
 8000420:	4b21      	ldr	r3, [pc, #132]	@ (80004a8 <taskFunc2+0x90>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	3b31      	subs	r3, #49	@ 0x31
 8000426:	2b03      	cmp	r3, #3
 8000428:	d81a      	bhi.n	8000460 <taskFunc2+0x48>
 800042a:	a201      	add	r2, pc, #4	@ (adr r2, 8000430 <taskFunc2+0x18>)
 800042c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000430:	08000441 	.word	0x08000441
 8000434:	08000449 	.word	0x08000449
 8000438:	08000451 	.word	0x08000451
 800043c:	08000459 	.word	0x08000459
		{
			case '1':
				currentLedPt = &led1;
 8000440:	4b1a      	ldr	r3, [pc, #104]	@ (80004ac <taskFunc2+0x94>)
 8000442:	4a1b      	ldr	r2, [pc, #108]	@ (80004b0 <taskFunc2+0x98>)
 8000444:	601a      	str	r2, [r3, #0]
				break;
 8000446:	e00f      	b.n	8000468 <taskFunc2+0x50>

			case '2':
				currentLedPt = &led2;
 8000448:	4b18      	ldr	r3, [pc, #96]	@ (80004ac <taskFunc2+0x94>)
 800044a:	4a1a      	ldr	r2, [pc, #104]	@ (80004b4 <taskFunc2+0x9c>)
 800044c:	601a      	str	r2, [r3, #0]
				break;
 800044e:	e00b      	b.n	8000468 <taskFunc2+0x50>

			case '3':
				currentLedPt = &led3;
 8000450:	4b16      	ldr	r3, [pc, #88]	@ (80004ac <taskFunc2+0x94>)
 8000452:	4a19      	ldr	r2, [pc, #100]	@ (80004b8 <taskFunc2+0xa0>)
 8000454:	601a      	str	r2, [r3, #0]
				break;
 8000456:	e007      	b.n	8000468 <taskFunc2+0x50>

			case '4':
				currentLedPt = &led4;
 8000458:	4b14      	ldr	r3, [pc, #80]	@ (80004ac <taskFunc2+0x94>)
 800045a:	4a18      	ldr	r2, [pc, #96]	@ (80004bc <taskFunc2+0xa4>)
 800045c:	601a      	str	r2, [r3, #0]
				break;
 800045e:	e003      	b.n	8000468 <taskFunc2+0x50>

			default:
				currentLedPt = &led1;
 8000460:	4b12      	ldr	r3, [pc, #72]	@ (80004ac <taskFunc2+0x94>)
 8000462:	4a13      	ldr	r2, [pc, #76]	@ (80004b0 <taskFunc2+0x98>)
 8000464:	601a      	str	r2, [r3, #0]
				break;
 8000466:	bf00      	nop
		}

		if(touchFlag == 'F')
 8000468:	4b0f      	ldr	r3, [pc, #60]	@ (80004a8 <taskFunc2+0x90>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b46      	cmp	r3, #70	@ 0x46
 800046e:	d111      	bne.n	8000494 <taskFunc2+0x7c>
		{
			HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, currentLedPt->status = !currentLedPt->status);
 8000470:	4b0e      	ldr	r3, [pc, #56]	@ (80004ac <taskFunc2+0x94>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	78db      	ldrb	r3, [r3, #3]
 8000476:	2b00      	cmp	r3, #0
 8000478:	bf0c      	ite	eq
 800047a:	2301      	moveq	r3, #1
 800047c:	2300      	movne	r3, #0
 800047e:	b2da      	uxtb	r2, r3
 8000480:	4b0a      	ldr	r3, [pc, #40]	@ (80004ac <taskFunc2+0x94>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	70da      	strb	r2, [r3, #3]
 8000486:	78db      	ldrb	r3, [r3, #3]
 8000488:	461a      	mov	r2, r3
 800048a:	2108      	movs	r1, #8
 800048c:	480c      	ldr	r0, [pc, #48]	@ (80004c0 <taskFunc2+0xa8>)
 800048e:	f000 fcbd 	bl	8000e0c <HAL_GPIO_WritePin>
 8000492:	e7c5      	b.n	8000420 <taskFunc2+0x8>
		}

		else if(touchFlag == 'N')
 8000494:	4b04      	ldr	r3, [pc, #16]	@ (80004a8 <taskFunc2+0x90>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b4e      	cmp	r3, #78	@ 0x4e
 800049a:	d1c1      	bne.n	8000420 <taskFunc2+0x8>
		{
			HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin, GPIO_PIN_RESET);
 800049c:	2200      	movs	r2, #0
 800049e:	2108      	movs	r1, #8
 80004a0:	4807      	ldr	r0, [pc, #28]	@ (80004c0 <taskFunc2+0xa8>)
 80004a2:	f000 fcb3 	bl	8000e0c <HAL_GPIO_WritePin>
		switch (touchFlag)
 80004a6:	e7bb      	b.n	8000420 <taskFunc2+0x8>
 80004a8:	20000384 	.word	0x20000384
 80004ac:	20000000 	.word	0x20000000
 80004b0:	20000388 	.word	0x20000388
 80004b4:	2000038c 	.word	0x2000038c
 80004b8:	20000390 	.word	0x20000390
 80004bc:	20000394 	.word	0x20000394
 80004c0:	40010c00 	.word	0x40010c00

080004c4 <MX_USART1_UART_Init>:
}

//////////////////////////////////////////////////////////////////////////////////////

static void MX_USART1_UART_Init(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ca:	f107 0308 	add.w	r3, r7, #8
 80004ce:	2200      	movs	r2, #0
 80004d0:	601a      	str	r2, [r3, #0]
 80004d2:	605a      	str	r2, [r3, #4]
 80004d4:	609a      	str	r2, [r3, #8]
 80004d6:	60da      	str	r2, [r3, #12]
  /* Peripheral clock enable */
  __HAL_RCC_USART1_CLK_ENABLE();
 80004d8:	4b2b      	ldr	r3, [pc, #172]	@ (8000588 <MX_USART1_UART_Init+0xc4>)
 80004da:	699b      	ldr	r3, [r3, #24]
 80004dc:	4a2a      	ldr	r2, [pc, #168]	@ (8000588 <MX_USART1_UART_Init+0xc4>)
 80004de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80004e2:	6193      	str	r3, [r2, #24]
 80004e4:	4b28      	ldr	r3, [pc, #160]	@ (8000588 <MX_USART1_UART_Init+0xc4>)
 80004e6:	699b      	ldr	r3, [r3, #24]
 80004e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004f0:	4b25      	ldr	r3, [pc, #148]	@ (8000588 <MX_USART1_UART_Init+0xc4>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a24      	ldr	r2, [pc, #144]	@ (8000588 <MX_USART1_UART_Init+0xc4>)
 80004f6:	f043 0304 	orr.w	r3, r3, #4
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b22      	ldr	r3, [pc, #136]	@ (8000588 <MX_USART1_UART_Init+0xc4>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0304 	and.w	r3, r3, #4
 8000504:	603b      	str	r3, [r7, #0]
 8000506:	683b      	ldr	r3, [r7, #0]
  /**USART1 GPIO Configuration
  PA9     ------> USART1_TX
  PA10     ------> USART1_RX
  */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000508:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800050c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800050e:	2302      	movs	r3, #2
 8000510:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000512:	2303      	movs	r3, #3
 8000514:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000516:	f107 0308 	add.w	r3, r7, #8
 800051a:	4619      	mov	r1, r3
 800051c:	481b      	ldr	r0, [pc, #108]	@ (800058c <MX_USART1_UART_Init+0xc8>)
 800051e:	f000 faf1 	bl	8000b04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000522:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052c:	2300      	movs	r3, #0
 800052e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000530:	f107 0308 	add.w	r3, r7, #8
 8000534:	4619      	mov	r1, r3
 8000536:	4815      	ldr	r0, [pc, #84]	@ (800058c <MX_USART1_UART_Init+0xc8>)
 8000538:	f000 fae4 	bl	8000b04 <HAL_GPIO_Init>


  huart1.Instance = USART1;
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <MX_USART1_UART_Init+0xcc>)
 800053e:	4a15      	ldr	r2, [pc, #84]	@ (8000594 <MX_USART1_UART_Init+0xd0>)
 8000540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000542:	4b13      	ldr	r3, [pc, #76]	@ (8000590 <MX_USART1_UART_Init+0xcc>)
 8000544:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800054a:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <MX_USART1_UART_Init+0xcc>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000550:	4b0f      	ldr	r3, [pc, #60]	@ (8000590 <MX_USART1_UART_Init+0xcc>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000556:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <MX_USART1_UART_Init+0xcc>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800055c:	4b0c      	ldr	r3, [pc, #48]	@ (8000590 <MX_USART1_UART_Init+0xcc>)
 800055e:	220c      	movs	r2, #12
 8000560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <MX_USART1_UART_Init+0xcc>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000568:	4b09      	ldr	r3, [pc, #36]	@ (8000590 <MX_USART1_UART_Init+0xcc>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800056e:	4808      	ldr	r0, [pc, #32]	@ (8000590 <MX_USART1_UART_Init+0xcc>)
 8000570:	f001 f901 	bl	8001776 <HAL_UART_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_USART1_UART_Init+0xba>
  {
    Error_Handler();
 800057a:	f000 f8eb 	bl	8000754 <Error_Handler>
  }
}
 800057e:	bf00      	nop
 8000580:	3718      	adds	r7, #24
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	40010800 	.word	0x40010800
 8000590:	2000028c 	.word	0x2000028c
 8000594:	40013800 	.word	0x40013800

08000598 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 0308 	add.w	r3, r7, #8
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
  /* Peripheral clock enable */
  __HAL_RCC_SPI1_CLK_ENABLE();
 80005ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000658 <MX_SPI1_Init+0xc0>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a29      	ldr	r2, [pc, #164]	@ (8000658 <MX_SPI1_Init+0xc0>)
 80005b2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b27      	ldr	r3, [pc, #156]	@ (8000658 <MX_SPI1_Init+0xc0>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	4b24      	ldr	r3, [pc, #144]	@ (8000658 <MX_SPI1_Init+0xc0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a23      	ldr	r2, [pc, #140]	@ (8000658 <MX_SPI1_Init+0xc0>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b21      	ldr	r3, [pc, #132]	@ (8000658 <MX_SPI1_Init+0xc0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	603b      	str	r3, [r7, #0]
 80005da:	683b      	ldr	r3, [r7, #0]
  /**SPI1 GPIO Configuration
  PA5     ------> SPI1_SCK
  PA7     ------> SPI1_MOSI
  */
  GPIO_InitStruct.Pin = LCD_SCK_Pin|LCD_MOSI_Pin;
 80005dc:	23a0      	movs	r3, #160	@ 0xa0
 80005de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e0:	2302      	movs	r3, #2
 80005e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e4:	2303      	movs	r3, #3
 80005e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 0308 	add.w	r3, r7, #8
 80005ec:	4619      	mov	r1, r3
 80005ee:	481b      	ldr	r0, [pc, #108]	@ (800065c <MX_SPI1_Init+0xc4>)
 80005f0:	f000 fa88 	bl	8000b04 <HAL_GPIO_Init>

  hspi1.Instance = SPI1;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000660 <MX_SPI1_Init+0xc8>)
 80005f6:	4a1b      	ldr	r2, [pc, #108]	@ (8000664 <MX_SPI1_Init+0xcc>)
 80005f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005fa:	4b19      	ldr	r3, [pc, #100]	@ (8000660 <MX_SPI1_Init+0xc8>)
 80005fc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000600:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000602:	4b17      	ldr	r3, [pc, #92]	@ (8000660 <MX_SPI1_Init+0xc8>)
 8000604:	2200      	movs	r2, #0
 8000606:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000608:	4b15      	ldr	r3, [pc, #84]	@ (8000660 <MX_SPI1_Init+0xc8>)
 800060a:	2200      	movs	r2, #0
 800060c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800060e:	4b14      	ldr	r3, [pc, #80]	@ (8000660 <MX_SPI1_Init+0xc8>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000614:	4b12      	ldr	r3, [pc, #72]	@ (8000660 <MX_SPI1_Init+0xc8>)
 8000616:	2200      	movs	r2, #0
 8000618:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_SPI1_Init+0xc8>)
 800061c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000620:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000622:	4b0f      	ldr	r3, [pc, #60]	@ (8000660 <MX_SPI1_Init+0xc8>)
 8000624:	2220      	movs	r2, #32
 8000626:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000628:	4b0d      	ldr	r3, [pc, #52]	@ (8000660 <MX_SPI1_Init+0xc8>)
 800062a:	2200      	movs	r2, #0
 800062c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800062e:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_SPI1_Init+0xc8>)
 8000630:	2200      	movs	r2, #0
 8000632:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000634:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <MX_SPI1_Init+0xc8>)
 8000636:	2200      	movs	r2, #0
 8000638:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800063a:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_SPI1_Init+0xc8>)
 800063c:	220a      	movs	r2, #10
 800063e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000640:	4807      	ldr	r0, [pc, #28]	@ (8000660 <MX_SPI1_Init+0xc8>)
 8000642:	f001 f80b 	bl	800165c <HAL_SPI_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_SPI1_Init+0xb8>
  {
    Error_Handler();
 800064c:	f000 f882 	bl	8000754 <Error_Handler>
  }
}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	40021000 	.word	0x40021000
 800065c:	40010800 	.word	0x40010800
 8000660:	200002d4 	.word	0x200002d4
 8000664:	40013000 	.word	0x40013000

08000668 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b086      	sub	sp, #24
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
  /* Peripheral clock enable */
  __HAL_RCC_SPI2_CLK_ENABLE();
 800067c:	4b31      	ldr	r3, [pc, #196]	@ (8000744 <MX_SPI2_Init+0xdc>)
 800067e:	69db      	ldr	r3, [r3, #28]
 8000680:	4a30      	ldr	r2, [pc, #192]	@ (8000744 <MX_SPI2_Init+0xdc>)
 8000682:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000686:	61d3      	str	r3, [r2, #28]
 8000688:	4b2e      	ldr	r3, [pc, #184]	@ (8000744 <MX_SPI2_Init+0xdc>)
 800068a:	69db      	ldr	r3, [r3, #28]
 800068c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000690:	607b      	str	r3, [r7, #4]
 8000692:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b2b      	ldr	r3, [pc, #172]	@ (8000744 <MX_SPI2_Init+0xdc>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a2a      	ldr	r2, [pc, #168]	@ (8000744 <MX_SPI2_Init+0xdc>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b28      	ldr	r3, [pc, #160]	@ (8000744 <MX_SPI2_Init+0xdc>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]
  /**SPI2 GPIO Configuration
  PB13     ------> SPI2_SCK
  PB14     ------> SPI2_MISO
  PB15     ------> SPI2_MOSI
  */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80006ac:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80006b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b2:	2302      	movs	r3, #2
 80006b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006b6:	2303      	movs	r3, #3
 80006b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4619      	mov	r1, r3
 80006c0:	4821      	ldr	r0, [pc, #132]	@ (8000748 <MX_SPI2_Init+0xe0>)
 80006c2:	f000 fa1f 	bl	8000b04 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80006c6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80006ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006cc:	2300      	movs	r3, #0
 80006ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d4:	f107 0308 	add.w	r3, r7, #8
 80006d8:	4619      	mov	r1, r3
 80006da:	481b      	ldr	r0, [pc, #108]	@ (8000748 <MX_SPI2_Init+0xe0>)
 80006dc:	f000 fa12 	bl	8000b04 <HAL_GPIO_Init>

  hspi2.Instance = SPI2;
 80006e0:	4b1a      	ldr	r3, [pc, #104]	@ (800074c <MX_SPI2_Init+0xe4>)
 80006e2:	4a1b      	ldr	r2, [pc, #108]	@ (8000750 <MX_SPI2_Init+0xe8>)
 80006e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006e6:	4b19      	ldr	r3, [pc, #100]	@ (800074c <MX_SPI2_Init+0xe4>)
 80006e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006ee:	4b17      	ldr	r3, [pc, #92]	@ (800074c <MX_SPI2_Init+0xe4>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f4:	4b15      	ldr	r3, [pc, #84]	@ (800074c <MX_SPI2_Init+0xe4>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fa:	4b14      	ldr	r3, [pc, #80]	@ (800074c <MX_SPI2_Init+0xe4>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_SPI2_Init+0xe4>)
 8000702:	2200      	movs	r2, #0
 8000704:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_SPI2_Init+0xe4>)
 8000708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800070c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_SPI2_Init+0xe4>)
 8000710:	2200      	movs	r2, #0
 8000712:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000714:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <MX_SPI2_Init+0xe4>)
 8000716:	2200      	movs	r2, #0
 8000718:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_SPI2_Init+0xe4>)
 800071c:	2200      	movs	r2, #0
 800071e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_SPI2_Init+0xe4>)
 8000722:	2200      	movs	r2, #0
 8000724:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_SPI2_Init+0xe4>)
 8000728:	220a      	movs	r2, #10
 800072a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800072c:	4807      	ldr	r0, [pc, #28]	@ (800074c <MX_SPI2_Init+0xe4>)
 800072e:	f000 ff95 	bl	800165c <HAL_SPI_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_SPI2_Init+0xd4>
  {
    Error_Handler();
 8000738:	f000 f80c 	bl	8000754 <Error_Handler>
  }
}
 800073c:	bf00      	nop
 800073e:	3718      	adds	r7, #24
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	40010c00 	.word	0x40010c00
 800074c:	2000032c 	.word	0x2000032c
 8000750:	40003800 	.word	0x40003800

08000754 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000758:	b672      	cpsid	i
}
 800075a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800075c:	bf00      	nop
 800075e:	e7fd      	b.n	800075c <Error_Handler+0x8>

08000760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000766:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <HAL_MspInit+0x68>)
 8000768:	699b      	ldr	r3, [r3, #24]
 800076a:	4a17      	ldr	r2, [pc, #92]	@ (80007c8 <HAL_MspInit+0x68>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6193      	str	r3, [r2, #24]
 8000772:	4b15      	ldr	r3, [pc, #84]	@ (80007c8 <HAL_MspInit+0x68>)
 8000774:	699b      	ldr	r3, [r3, #24]
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	60bb      	str	r3, [r7, #8]
 800077c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077e:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <HAL_MspInit+0x68>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	4a11      	ldr	r2, [pc, #68]	@ (80007c8 <HAL_MspInit+0x68>)
 8000784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000788:	61d3      	str	r3, [r2, #28]
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <HAL_MspInit+0x68>)
 800078c:	69db      	ldr	r3, [r3, #28]
 800078e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000792:	607b      	str	r3, [r7, #4]
 8000794:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000796:	2200      	movs	r2, #0
 8000798:	210f      	movs	r1, #15
 800079a:	f06f 0001 	mvn.w	r0, #1
 800079e:	f000 f988 	bl	8000ab2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007a2:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <HAL_MspInit+0x6c>)
 80007a4:	685b      	ldr	r3, [r3, #4]
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	4a04      	ldr	r2, [pc, #16]	@ (80007cc <HAL_MspInit+0x6c>)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	bf00      	nop
 80007c0:	3710      	adds	r7, #16
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40021000 	.word	0x40021000
 80007cc:	40010000 	.word	0x40010000

080007d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d0:	b480      	push	{r7}
 80007d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007d4:	bf00      	nop
 80007d6:	e7fd      	b.n	80007d4 <NMI_Handler+0x4>

080007d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007dc:	bf00      	nop
 80007de:	e7fd      	b.n	80007dc <HardFault_Handler+0x4>

080007e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e4:	bf00      	nop
 80007e6:	e7fd      	b.n	80007e4 <MemManage_Handler+0x4>

080007e8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ec:	bf00      	nop
 80007ee:	e7fd      	b.n	80007ec <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000808:	f000 f87c 	bl	8000904 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800080c:	f001 fee8 	bl	80025e0 <xTaskGetSchedulerState>
 8000810:	4603      	mov	r3, r0
 8000812:	2b01      	cmp	r3, #1
 8000814:	d001      	beq.n	800081a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000816:	f002 f86f 	bl	80028f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	bd80      	pop	{r7, pc}

0800081e <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000822:	bf00      	nop
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
	...

0800082c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800082c:	f7ff fff7 	bl	800081e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000830:	480b      	ldr	r0, [pc, #44]	@ (8000860 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000832:	490c      	ldr	r1, [pc, #48]	@ (8000864 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000834:	4a0c      	ldr	r2, [pc, #48]	@ (8000868 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000836:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000838:	e002      	b.n	8000840 <LoopCopyDataInit>

0800083a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800083a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800083c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800083e:	3304      	adds	r3, #4

08000840 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000840:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000842:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000844:	d3f9      	bcc.n	800083a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000846:	4a09      	ldr	r2, [pc, #36]	@ (800086c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000848:	4c09      	ldr	r4, [pc, #36]	@ (8000870 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800084a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800084c:	e001      	b.n	8000852 <LoopFillZerobss>

0800084e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800084e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000850:	3204      	adds	r2, #4

08000852 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000852:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000854:	d3fb      	bcc.n	800084e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000856:	f003 ff25 	bl	80046a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800085a:	f7ff fcb5 	bl	80001c8 <main>
  bx lr
 800085e:	4770      	bx	lr
  ldr r0, =_sdata
 8000860:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000864:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000868:	08004850 	.word	0x08004850
  ldr r2, =_sbss
 800086c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000870:	20003760 	.word	0x20003760

08000874 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000874:	e7fe      	b.n	8000874 <ADC1_2_IRQHandler>
	...

08000878 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800087c:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <HAL_Init+0x28>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a07      	ldr	r2, [pc, #28]	@ (80008a0 <HAL_Init+0x28>)
 8000882:	f043 0310 	orr.w	r3, r3, #16
 8000886:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000888:	2003      	movs	r0, #3
 800088a:	f000 f907 	bl	8000a9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800088e:	200f      	movs	r0, #15
 8000890:	f000 f808 	bl	80008a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000894:	f7ff ff64 	bl	8000760 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40022000 	.word	0x40022000

080008a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80008ac:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <HAL_InitTick+0x54>)
 80008ae:	681a      	ldr	r2, [r3, #0]
 80008b0:	4b12      	ldr	r3, [pc, #72]	@ (80008fc <HAL_InitTick+0x58>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	4619      	mov	r1, r3
 80008b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80008be:	fbb2 f3f3 	udiv	r3, r2, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f911 	bl	8000aea <HAL_SYSTICK_Config>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e00e      	b.n	80008f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b0f      	cmp	r3, #15
 80008d6:	d80a      	bhi.n	80008ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008d8:	2200      	movs	r2, #0
 80008da:	6879      	ldr	r1, [r7, #4]
 80008dc:	f04f 30ff 	mov.w	r0, #4294967295
 80008e0:	f000 f8e7 	bl	8000ab2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008e4:	4a06      	ldr	r2, [pc, #24]	@ (8000900 <HAL_InitTick+0x5c>)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008ea:	2300      	movs	r3, #0
 80008ec:	e000      	b.n	80008f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ee:	2301      	movs	r3, #1
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3708      	adds	r7, #8
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000004 	.word	0x20000004
 80008fc:	2000000c 	.word	0x2000000c
 8000900:	20000008 	.word	0x20000008

08000904 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000908:	4b05      	ldr	r3, [pc, #20]	@ (8000920 <HAL_IncTick+0x1c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	4b05      	ldr	r3, [pc, #20]	@ (8000924 <HAL_IncTick+0x20>)
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4413      	add	r3, r2
 8000914:	4a03      	ldr	r2, [pc, #12]	@ (8000924 <HAL_IncTick+0x20>)
 8000916:	6013      	str	r3, [r2, #0]
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	2000000c 	.word	0x2000000c
 8000924:	20000398 	.word	0x20000398

08000928 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  return uwTick;
 800092c:	4b02      	ldr	r3, [pc, #8]	@ (8000938 <HAL_GetTick+0x10>)
 800092e:	681b      	ldr	r3, [r3, #0]
}
 8000930:	4618      	mov	r0, r3
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	20000398 	.word	0x20000398

0800093c <__NVIC_SetPriorityGrouping>:
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	f003 0307 	and.w	r3, r3, #7
 800094a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000952:	68ba      	ldr	r2, [r7, #8]
 8000954:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000958:	4013      	ands	r3, r2
 800095a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000964:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000968:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800096c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800096e:	4a04      	ldr	r2, [pc, #16]	@ (8000980 <__NVIC_SetPriorityGrouping+0x44>)
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	60d3      	str	r3, [r2, #12]
}
 8000974:	bf00      	nop
 8000976:	3714      	adds	r7, #20
 8000978:	46bd      	mov	sp, r7
 800097a:	bc80      	pop	{r7}
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000988:	4b04      	ldr	r3, [pc, #16]	@ (800099c <__NVIC_GetPriorityGrouping+0x18>)
 800098a:	68db      	ldr	r3, [r3, #12]
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	f003 0307 	and.w	r3, r3, #7
}
 8000992:	4618      	mov	r0, r3
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db0a      	blt.n	80009ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	490c      	ldr	r1, [pc, #48]	@ (80009ec <__NVIC_SetPriority+0x4c>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	0112      	lsls	r2, r2, #4
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c8:	e00a      	b.n	80009e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4908      	ldr	r1, [pc, #32]	@ (80009f0 <__NVIC_SetPriority+0x50>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	3b04      	subs	r3, #4
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	440b      	add	r3, r1
 80009de:	761a      	strb	r2, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bc80      	pop	{r7}
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b089      	sub	sp, #36	@ 0x24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f1c3 0307 	rsb	r3, r3, #7
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	bf28      	it	cs
 8000a12:	2304      	movcs	r3, #4
 8000a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d902      	bls.n	8000a24 <NVIC_EncodePriority+0x30>
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3b03      	subs	r3, #3
 8000a22:	e000      	b.n	8000a26 <NVIC_EncodePriority+0x32>
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43da      	mvns	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43d9      	mvns	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	4313      	orrs	r3, r2
         );
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	@ 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bc80      	pop	{r7}
 8000a56:	4770      	bx	lr

08000a58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000a68:	d301      	bcc.n	8000a6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e00f      	b.n	8000a8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <SysTick_Config+0x40>)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	3b01      	subs	r3, #1
 8000a74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a76:	210f      	movs	r1, #15
 8000a78:	f04f 30ff 	mov.w	r0, #4294967295
 8000a7c:	f7ff ff90 	bl	80009a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <SysTick_Config+0x40>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a86:	4b04      	ldr	r3, [pc, #16]	@ (8000a98 <SysTick_Config+0x40>)
 8000a88:	2207      	movs	r2, #7
 8000a8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a8c:	2300      	movs	r3, #0
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3708      	adds	r7, #8
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	e000e010 	.word	0xe000e010

08000a9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f7ff ff49 	bl	800093c <__NVIC_SetPriorityGrouping>
}
 8000aaa:	bf00      	nop
 8000aac:	3708      	adds	r7, #8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b086      	sub	sp, #24
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	4603      	mov	r3, r0
 8000aba:	60b9      	str	r1, [r7, #8]
 8000abc:	607a      	str	r2, [r7, #4]
 8000abe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac4:	f7ff ff5e 	bl	8000984 <__NVIC_GetPriorityGrouping>
 8000ac8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000aca:	687a      	ldr	r2, [r7, #4]
 8000acc:	68b9      	ldr	r1, [r7, #8]
 8000ace:	6978      	ldr	r0, [r7, #20]
 8000ad0:	f7ff ff90 	bl	80009f4 <NVIC_EncodePriority>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ada:	4611      	mov	r1, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff5f 	bl	80009a0 <__NVIC_SetPriority>
}
 8000ae2:	bf00      	nop
 8000ae4:	3718      	adds	r7, #24
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000af2:	6878      	ldr	r0, [r7, #4]
 8000af4:	f7ff ffb0 	bl	8000a58 <SysTick_Config>
 8000af8:	4603      	mov	r3, r0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b08b      	sub	sp, #44	@ 0x2c
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000b12:	2300      	movs	r3, #0
 8000b14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b16:	e169      	b.n	8000dec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	69fa      	ldr	r2, [r7, #28]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b2c:	69ba      	ldr	r2, [r7, #24]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	f040 8158 	bne.w	8000de6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	4a9a      	ldr	r2, [pc, #616]	@ (8000da4 <HAL_GPIO_Init+0x2a0>)
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	d05e      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b40:	4a98      	ldr	r2, [pc, #608]	@ (8000da4 <HAL_GPIO_Init+0x2a0>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d875      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b46:	4a98      	ldr	r2, [pc, #608]	@ (8000da8 <HAL_GPIO_Init+0x2a4>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d058      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b4c:	4a96      	ldr	r2, [pc, #600]	@ (8000da8 <HAL_GPIO_Init+0x2a4>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d86f      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b52:	4a96      	ldr	r2, [pc, #600]	@ (8000dac <HAL_GPIO_Init+0x2a8>)
 8000b54:	4293      	cmp	r3, r2
 8000b56:	d052      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b58:	4a94      	ldr	r2, [pc, #592]	@ (8000dac <HAL_GPIO_Init+0x2a8>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d869      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b5e:	4a94      	ldr	r2, [pc, #592]	@ (8000db0 <HAL_GPIO_Init+0x2ac>)
 8000b60:	4293      	cmp	r3, r2
 8000b62:	d04c      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b64:	4a92      	ldr	r2, [pc, #584]	@ (8000db0 <HAL_GPIO_Init+0x2ac>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d863      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b6a:	4a92      	ldr	r2, [pc, #584]	@ (8000db4 <HAL_GPIO_Init+0x2b0>)
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	d046      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
 8000b70:	4a90      	ldr	r2, [pc, #576]	@ (8000db4 <HAL_GPIO_Init+0x2b0>)
 8000b72:	4293      	cmp	r3, r2
 8000b74:	d85d      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b76:	2b12      	cmp	r3, #18
 8000b78:	d82a      	bhi.n	8000bd0 <HAL_GPIO_Init+0xcc>
 8000b7a:	2b12      	cmp	r3, #18
 8000b7c:	d859      	bhi.n	8000c32 <HAL_GPIO_Init+0x12e>
 8000b7e:	a201      	add	r2, pc, #4	@ (adr r2, 8000b84 <HAL_GPIO_Init+0x80>)
 8000b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b84:	08000bff 	.word	0x08000bff
 8000b88:	08000bd9 	.word	0x08000bd9
 8000b8c:	08000beb 	.word	0x08000beb
 8000b90:	08000c2d 	.word	0x08000c2d
 8000b94:	08000c33 	.word	0x08000c33
 8000b98:	08000c33 	.word	0x08000c33
 8000b9c:	08000c33 	.word	0x08000c33
 8000ba0:	08000c33 	.word	0x08000c33
 8000ba4:	08000c33 	.word	0x08000c33
 8000ba8:	08000c33 	.word	0x08000c33
 8000bac:	08000c33 	.word	0x08000c33
 8000bb0:	08000c33 	.word	0x08000c33
 8000bb4:	08000c33 	.word	0x08000c33
 8000bb8:	08000c33 	.word	0x08000c33
 8000bbc:	08000c33 	.word	0x08000c33
 8000bc0:	08000c33 	.word	0x08000c33
 8000bc4:	08000c33 	.word	0x08000c33
 8000bc8:	08000be1 	.word	0x08000be1
 8000bcc:	08000bf5 	.word	0x08000bf5
 8000bd0:	4a79      	ldr	r2, [pc, #484]	@ (8000db8 <HAL_GPIO_Init+0x2b4>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d013      	beq.n	8000bfe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bd6:	e02c      	b.n	8000c32 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	623b      	str	r3, [r7, #32]
          break;
 8000bde:	e029      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	3304      	adds	r3, #4
 8000be6:	623b      	str	r3, [r7, #32]
          break;
 8000be8:	e024      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	3308      	adds	r3, #8
 8000bf0:	623b      	str	r3, [r7, #32]
          break;
 8000bf2:	e01f      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	68db      	ldr	r3, [r3, #12]
 8000bf8:	330c      	adds	r3, #12
 8000bfa:	623b      	str	r3, [r7, #32]
          break;
 8000bfc:	e01a      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d102      	bne.n	8000c0c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c06:	2304      	movs	r3, #4
 8000c08:	623b      	str	r3, [r7, #32]
          break;
 8000c0a:	e013      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d105      	bne.n	8000c20 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c14:	2308      	movs	r3, #8
 8000c16:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	69fa      	ldr	r2, [r7, #28]
 8000c1c:	611a      	str	r2, [r3, #16]
          break;
 8000c1e:	e009      	b.n	8000c34 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c20:	2308      	movs	r3, #8
 8000c22:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	69fa      	ldr	r2, [r7, #28]
 8000c28:	615a      	str	r2, [r3, #20]
          break;
 8000c2a:	e003      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	623b      	str	r3, [r7, #32]
          break;
 8000c30:	e000      	b.n	8000c34 <HAL_GPIO_Init+0x130>
          break;
 8000c32:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	2bff      	cmp	r3, #255	@ 0xff
 8000c38:	d801      	bhi.n	8000c3e <HAL_GPIO_Init+0x13a>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	e001      	b.n	8000c42 <HAL_GPIO_Init+0x13e>
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	3304      	adds	r3, #4
 8000c42:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2bff      	cmp	r3, #255	@ 0xff
 8000c48:	d802      	bhi.n	8000c50 <HAL_GPIO_Init+0x14c>
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c4c:	009b      	lsls	r3, r3, #2
 8000c4e:	e002      	b.n	8000c56 <HAL_GPIO_Init+0x152>
 8000c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c52:	3b08      	subs	r3, #8
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	210f      	movs	r1, #15
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	401a      	ands	r2, r3
 8000c68:	6a39      	ldr	r1, [r7, #32]
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c70:	431a      	orrs	r2, r3
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 80b1 	beq.w	8000de6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c84:	4b4d      	ldr	r3, [pc, #308]	@ (8000dbc <HAL_GPIO_Init+0x2b8>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a4c      	ldr	r2, [pc, #304]	@ (8000dbc <HAL_GPIO_Init+0x2b8>)
 8000c8a:	f043 0301 	orr.w	r3, r3, #1
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b4a      	ldr	r3, [pc, #296]	@ (8000dbc <HAL_GPIO_Init+0x2b8>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f003 0301 	and.w	r3, r3, #1
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c9c:	4a48      	ldr	r2, [pc, #288]	@ (8000dc0 <HAL_GPIO_Init+0x2bc>)
 8000c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ca0:	089b      	lsrs	r3, r3, #2
 8000ca2:	3302      	adds	r3, #2
 8000ca4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ca8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cac:	f003 0303 	and.w	r3, r3, #3
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	220f      	movs	r2, #15
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	4a40      	ldr	r2, [pc, #256]	@ (8000dc4 <HAL_GPIO_Init+0x2c0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d013      	beq.n	8000cf0 <HAL_GPIO_Init+0x1ec>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	4a3f      	ldr	r2, [pc, #252]	@ (8000dc8 <HAL_GPIO_Init+0x2c4>)
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d00d      	beq.n	8000cec <HAL_GPIO_Init+0x1e8>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	4a3e      	ldr	r2, [pc, #248]	@ (8000dcc <HAL_GPIO_Init+0x2c8>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d007      	beq.n	8000ce8 <HAL_GPIO_Init+0x1e4>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	4a3d      	ldr	r2, [pc, #244]	@ (8000dd0 <HAL_GPIO_Init+0x2cc>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d101      	bne.n	8000ce4 <HAL_GPIO_Init+0x1e0>
 8000ce0:	2303      	movs	r3, #3
 8000ce2:	e006      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000ce4:	2304      	movs	r3, #4
 8000ce6:	e004      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000ce8:	2302      	movs	r3, #2
 8000cea:	e002      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000cec:	2301      	movs	r3, #1
 8000cee:	e000      	b.n	8000cf2 <HAL_GPIO_Init+0x1ee>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000cf4:	f002 0203 	and.w	r2, r2, #3
 8000cf8:	0092      	lsls	r2, r2, #2
 8000cfa:	4093      	lsls	r3, r2
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d02:	492f      	ldr	r1, [pc, #188]	@ (8000dc0 <HAL_GPIO_Init+0x2bc>)
 8000d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d06:	089b      	lsrs	r3, r3, #2
 8000d08:	3302      	adds	r3, #2
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d006      	beq.n	8000d2a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d1c:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d1e:	689a      	ldr	r2, [r3, #8]
 8000d20:	492c      	ldr	r1, [pc, #176]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	608b      	str	r3, [r1, #8]
 8000d28:	e006      	b.n	8000d38 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d2c:	689a      	ldr	r2, [r3, #8]
 8000d2e:	69bb      	ldr	r3, [r7, #24]
 8000d30:	43db      	mvns	r3, r3
 8000d32:	4928      	ldr	r1, [pc, #160]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d34:	4013      	ands	r3, r2
 8000d36:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d006      	beq.n	8000d52 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d44:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d46:	68da      	ldr	r2, [r3, #12]
 8000d48:	4922      	ldr	r1, [pc, #136]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	60cb      	str	r3, [r1, #12]
 8000d50:	e006      	b.n	8000d60 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d54:	68da      	ldr	r2, [r3, #12]
 8000d56:	69bb      	ldr	r3, [r7, #24]
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	491e      	ldr	r1, [pc, #120]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d006      	beq.n	8000d7a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d6c:	4b19      	ldr	r3, [pc, #100]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	4918      	ldr	r1, [pc, #96]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	604b      	str	r3, [r1, #4]
 8000d78:	e006      	b.n	8000d88 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d7a:	4b16      	ldr	r3, [pc, #88]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	69bb      	ldr	r3, [r7, #24]
 8000d80:	43db      	mvns	r3, r3
 8000d82:	4914      	ldr	r1, [pc, #80]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d84:	4013      	ands	r3, r2
 8000d86:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d021      	beq.n	8000dd8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d94:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d96:	681a      	ldr	r2, [r3, #0]
 8000d98:	490e      	ldr	r1, [pc, #56]	@ (8000dd4 <HAL_GPIO_Init+0x2d0>)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	600b      	str	r3, [r1, #0]
 8000da0:	e021      	b.n	8000de6 <HAL_GPIO_Init+0x2e2>
 8000da2:	bf00      	nop
 8000da4:	10320000 	.word	0x10320000
 8000da8:	10310000 	.word	0x10310000
 8000dac:	10220000 	.word	0x10220000
 8000db0:	10210000 	.word	0x10210000
 8000db4:	10120000 	.word	0x10120000
 8000db8:	10110000 	.word	0x10110000
 8000dbc:	40021000 	.word	0x40021000
 8000dc0:	40010000 	.word	0x40010000
 8000dc4:	40010800 	.word	0x40010800
 8000dc8:	40010c00 	.word	0x40010c00
 8000dcc:	40011000 	.word	0x40011000
 8000dd0:	40011400 	.word	0x40011400
 8000dd4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e08 <HAL_GPIO_Init+0x304>)
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	43db      	mvns	r3, r3
 8000de0:	4909      	ldr	r1, [pc, #36]	@ (8000e08 <HAL_GPIO_Init+0x304>)
 8000de2:	4013      	ands	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de8:	3301      	adds	r3, #1
 8000dea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df2:	fa22 f303 	lsr.w	r3, r2, r3
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	f47f ae8e 	bne.w	8000b18 <HAL_GPIO_Init+0x14>
  }
}
 8000dfc:	bf00      	nop
 8000dfe:	bf00      	nop
 8000e00:	372c      	adds	r7, #44	@ 0x2c
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bc80      	pop	{r7}
 8000e06:	4770      	bx	lr
 8000e08:	40010400 	.word	0x40010400

08000e0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b083      	sub	sp, #12
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e1c:	787b      	ldrb	r3, [r7, #1]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e22:	887a      	ldrh	r2, [r7, #2]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e28:	e003      	b.n	8000e32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e2a:	887b      	ldrh	r3, [r7, #2]
 8000e2c:	041a      	lsls	r2, r3, #16
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	611a      	str	r2, [r3, #16]
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr

08000e3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e272      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	f003 0301 	and.w	r3, r3, #1
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	f000 8087 	beq.w	8000f6a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e5c:	4b92      	ldr	r3, [pc, #584]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 030c 	and.w	r3, r3, #12
 8000e64:	2b04      	cmp	r3, #4
 8000e66:	d00c      	beq.n	8000e82 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000e68:	4b8f      	ldr	r3, [pc, #572]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 030c 	and.w	r3, r3, #12
 8000e70:	2b08      	cmp	r3, #8
 8000e72:	d112      	bne.n	8000e9a <HAL_RCC_OscConfig+0x5e>
 8000e74:	4b8c      	ldr	r3, [pc, #560]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000e80:	d10b      	bne.n	8000e9a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e82:	4b89      	ldr	r3, [pc, #548]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d06c      	beq.n	8000f68 <HAL_RCC_OscConfig+0x12c>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d168      	bne.n	8000f68 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	e24c      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000ea2:	d106      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x76>
 8000ea4:	4b80      	ldr	r3, [pc, #512]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a7f      	ldr	r2, [pc, #508]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000eaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	e02e      	b.n	8000f10 <HAL_RCC_OscConfig+0xd4>
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d10c      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x98>
 8000eba:	4b7b      	ldr	r3, [pc, #492]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a7a      	ldr	r2, [pc, #488]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ec0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000ec4:	6013      	str	r3, [r2, #0]
 8000ec6:	4b78      	ldr	r3, [pc, #480]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a77      	ldr	r2, [pc, #476]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ecc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	e01d      	b.n	8000f10 <HAL_RCC_OscConfig+0xd4>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0xbc>
 8000ede:	4b72      	ldr	r3, [pc, #456]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a71      	ldr	r2, [pc, #452]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ee4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ee8:	6013      	str	r3, [r2, #0]
 8000eea:	4b6f      	ldr	r3, [pc, #444]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a6e      	ldr	r2, [pc, #440]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ef4:	6013      	str	r3, [r2, #0]
 8000ef6:	e00b      	b.n	8000f10 <HAL_RCC_OscConfig+0xd4>
 8000ef8:	4b6b      	ldr	r3, [pc, #428]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a6a      	ldr	r2, [pc, #424]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000efe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f02:	6013      	str	r3, [r2, #0]
 8000f04:	4b68      	ldr	r3, [pc, #416]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a67      	ldr	r2, [pc, #412]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f0a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f0e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d013      	beq.n	8000f40 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f18:	f7ff fd06 	bl	8000928 <HAL_GetTick>
 8000f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1e:	e008      	b.n	8000f32 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f20:	f7ff fd02 	bl	8000928 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	1ad3      	subs	r3, r2, r3
 8000f2a:	2b64      	cmp	r3, #100	@ 0x64
 8000f2c:	d901      	bls.n	8000f32 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e200      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f32:	4b5d      	ldr	r3, [pc, #372]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d0f0      	beq.n	8000f20 <HAL_RCC_OscConfig+0xe4>
 8000f3e:	e014      	b.n	8000f6a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f40:	f7ff fcf2 	bl	8000928 <HAL_GetTick>
 8000f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f46:	e008      	b.n	8000f5a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f48:	f7ff fcee 	bl	8000928 <HAL_GetTick>
 8000f4c:	4602      	mov	r2, r0
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	1ad3      	subs	r3, r2, r3
 8000f52:	2b64      	cmp	r3, #100	@ 0x64
 8000f54:	d901      	bls.n	8000f5a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000f56:	2303      	movs	r3, #3
 8000f58:	e1ec      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f5a:	4b53      	ldr	r3, [pc, #332]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1f0      	bne.n	8000f48 <HAL_RCC_OscConfig+0x10c>
 8000f66:	e000      	b.n	8000f6a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d063      	beq.n	800103e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000f76:	4b4c      	ldr	r3, [pc, #304]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f78:	685b      	ldr	r3, [r3, #4]
 8000f7a:	f003 030c 	and.w	r3, r3, #12
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d00b      	beq.n	8000f9a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000f82:	4b49      	ldr	r3, [pc, #292]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b08      	cmp	r3, #8
 8000f8c:	d11c      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x18c>
 8000f8e:	4b46      	ldr	r3, [pc, #280]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d116      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f9a:	4b43      	ldr	r3, [pc, #268]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d005      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x176>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	691b      	ldr	r3, [r3, #16]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d001      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e1c0      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fb2:	4b3d      	ldr	r3, [pc, #244]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	00db      	lsls	r3, r3, #3
 8000fc0:	4939      	ldr	r1, [pc, #228]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fc6:	e03a      	b.n	800103e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	691b      	ldr	r3, [r3, #16]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d020      	beq.n	8001012 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000fd0:	4b36      	ldr	r3, [pc, #216]	@ (80010ac <HAL_RCC_OscConfig+0x270>)
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd6:	f7ff fca7 	bl	8000928 <HAL_GetTick>
 8000fda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fdc:	e008      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000fde:	f7ff fca3 	bl	8000928 <HAL_GetTick>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	1ad3      	subs	r3, r2, r3
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d901      	bls.n	8000ff0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000fec:	2303      	movs	r3, #3
 8000fee:	e1a1      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0302 	and.w	r3, r3, #2
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0f0      	beq.n	8000fde <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	695b      	ldr	r3, [r3, #20]
 8001008:	00db      	lsls	r3, r3, #3
 800100a:	4927      	ldr	r1, [pc, #156]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 800100c:	4313      	orrs	r3, r2
 800100e:	600b      	str	r3, [r1, #0]
 8001010:	e015      	b.n	800103e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001012:	4b26      	ldr	r3, [pc, #152]	@ (80010ac <HAL_RCC_OscConfig+0x270>)
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fc86 	bl	8000928 <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001020:	f7ff fc82 	bl	8000928 <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e180      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001032:	4b1d      	ldr	r3, [pc, #116]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	2b00      	cmp	r3, #0
 800103c:	d1f0      	bne.n	8001020 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f003 0308 	and.w	r3, r3, #8
 8001046:	2b00      	cmp	r3, #0
 8001048:	d03a      	beq.n	80010c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	699b      	ldr	r3, [r3, #24]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d019      	beq.n	8001086 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001052:	4b17      	ldr	r3, [pc, #92]	@ (80010b0 <HAL_RCC_OscConfig+0x274>)
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001058:	f7ff fc66 	bl	8000928 <HAL_GetTick>
 800105c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105e:	e008      	b.n	8001072 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001060:	f7ff fc62 	bl	8000928 <HAL_GetTick>
 8001064:	4602      	mov	r2, r0
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	1ad3      	subs	r3, r2, r3
 800106a:	2b02      	cmp	r3, #2
 800106c:	d901      	bls.n	8001072 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800106e:	2303      	movs	r3, #3
 8001070:	e160      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001072:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <HAL_RCC_OscConfig+0x26c>)
 8001074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f0      	beq.n	8001060 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800107e:	2001      	movs	r0, #1
 8001080:	f000 face 	bl	8001620 <RCC_Delay>
 8001084:	e01c      	b.n	80010c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001086:	4b0a      	ldr	r3, [pc, #40]	@ (80010b0 <HAL_RCC_OscConfig+0x274>)
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800108c:	f7ff fc4c 	bl	8000928 <HAL_GetTick>
 8001090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001092:	e00f      	b.n	80010b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001094:	f7ff fc48 	bl	8000928 <HAL_GetTick>
 8001098:	4602      	mov	r2, r0
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d908      	bls.n	80010b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80010a2:	2303      	movs	r3, #3
 80010a4:	e146      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000
 80010ac:	42420000 	.word	0x42420000
 80010b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010b4:	4b92      	ldr	r3, [pc, #584]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d1e9      	bne.n	8001094 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f003 0304 	and.w	r3, r3, #4
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80a6 	beq.w	800121a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80010ce:	2300      	movs	r3, #0
 80010d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010d2:	4b8b      	ldr	r3, [pc, #556]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010d4:	69db      	ldr	r3, [r3, #28]
 80010d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10d      	bne.n	80010fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010de:	4b88      	ldr	r3, [pc, #544]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010e0:	69db      	ldr	r3, [r3, #28]
 80010e2:	4a87      	ldr	r2, [pc, #540]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	61d3      	str	r3, [r2, #28]
 80010ea:	4b85      	ldr	r3, [pc, #532]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80010ec:	69db      	ldr	r3, [r3, #28]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80010f6:	2301      	movs	r3, #1
 80010f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fa:	4b82      	ldr	r3, [pc, #520]	@ (8001304 <HAL_RCC_OscConfig+0x4c8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001102:	2b00      	cmp	r3, #0
 8001104:	d118      	bne.n	8001138 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001106:	4b7f      	ldr	r3, [pc, #508]	@ (8001304 <HAL_RCC_OscConfig+0x4c8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	4a7e      	ldr	r2, [pc, #504]	@ (8001304 <HAL_RCC_OscConfig+0x4c8>)
 800110c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001110:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001112:	f7ff fc09 	bl	8000928 <HAL_GetTick>
 8001116:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001118:	e008      	b.n	800112c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800111a:	f7ff fc05 	bl	8000928 <HAL_GetTick>
 800111e:	4602      	mov	r2, r0
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	1ad3      	subs	r3, r2, r3
 8001124:	2b64      	cmp	r3, #100	@ 0x64
 8001126:	d901      	bls.n	800112c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001128:	2303      	movs	r3, #3
 800112a:	e103      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800112c:	4b75      	ldr	r3, [pc, #468]	@ (8001304 <HAL_RCC_OscConfig+0x4c8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001134:	2b00      	cmp	r3, #0
 8001136:	d0f0      	beq.n	800111a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d106      	bne.n	800114e <HAL_RCC_OscConfig+0x312>
 8001140:	4b6f      	ldr	r3, [pc, #444]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001142:	6a1b      	ldr	r3, [r3, #32]
 8001144:	4a6e      	ldr	r2, [pc, #440]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6213      	str	r3, [r2, #32]
 800114c:	e02d      	b.n	80011aa <HAL_RCC_OscConfig+0x36e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d10c      	bne.n	8001170 <HAL_RCC_OscConfig+0x334>
 8001156:	4b6a      	ldr	r3, [pc, #424]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001158:	6a1b      	ldr	r3, [r3, #32]
 800115a:	4a69      	ldr	r2, [pc, #420]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	6213      	str	r3, [r2, #32]
 8001162:	4b67      	ldr	r3, [pc, #412]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001164:	6a1b      	ldr	r3, [r3, #32]
 8001166:	4a66      	ldr	r2, [pc, #408]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001168:	f023 0304 	bic.w	r3, r3, #4
 800116c:	6213      	str	r3, [r2, #32]
 800116e:	e01c      	b.n	80011aa <HAL_RCC_OscConfig+0x36e>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b05      	cmp	r3, #5
 8001176:	d10c      	bne.n	8001192 <HAL_RCC_OscConfig+0x356>
 8001178:	4b61      	ldr	r3, [pc, #388]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800117a:	6a1b      	ldr	r3, [r3, #32]
 800117c:	4a60      	ldr	r2, [pc, #384]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	6213      	str	r3, [r2, #32]
 8001184:	4b5e      	ldr	r3, [pc, #376]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001186:	6a1b      	ldr	r3, [r3, #32]
 8001188:	4a5d      	ldr	r2, [pc, #372]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	f043 0301 	orr.w	r3, r3, #1
 800118e:	6213      	str	r3, [r2, #32]
 8001190:	e00b      	b.n	80011aa <HAL_RCC_OscConfig+0x36e>
 8001192:	4b5b      	ldr	r3, [pc, #364]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4a5a      	ldr	r2, [pc, #360]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001198:	f023 0301 	bic.w	r3, r3, #1
 800119c:	6213      	str	r3, [r2, #32]
 800119e:	4b58      	ldr	r3, [pc, #352]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80011a0:	6a1b      	ldr	r3, [r3, #32]
 80011a2:	4a57      	ldr	r2, [pc, #348]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	f023 0304 	bic.w	r3, r3, #4
 80011a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	68db      	ldr	r3, [r3, #12]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d015      	beq.n	80011de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b2:	f7ff fbb9 	bl	8000928 <HAL_GetTick>
 80011b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b8:	e00a      	b.n	80011d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011ba:	f7ff fbb5 	bl	8000928 <HAL_GetTick>
 80011be:	4602      	mov	r2, r0
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e0b1      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80011d2:	6a1b      	ldr	r3, [r3, #32]
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d0ee      	beq.n	80011ba <HAL_RCC_OscConfig+0x37e>
 80011dc:	e014      	b.n	8001208 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011de:	f7ff fba3 	bl	8000928 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011e4:	e00a      	b.n	80011fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80011e6:	f7ff fb9f 	bl	8000928 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e09b      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011fc:	4b40      	ldr	r3, [pc, #256]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80011fe:	6a1b      	ldr	r3, [r3, #32]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1ee      	bne.n	80011e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d105      	bne.n	800121a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800120e:	4b3c      	ldr	r3, [pc, #240]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001210:	69db      	ldr	r3, [r3, #28]
 8001212:	4a3b      	ldr	r2, [pc, #236]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001214:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001218:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	69db      	ldr	r3, [r3, #28]
 800121e:	2b00      	cmp	r3, #0
 8001220:	f000 8087 	beq.w	8001332 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001224:	4b36      	ldr	r3, [pc, #216]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b08      	cmp	r3, #8
 800122e:	d061      	beq.n	80012f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	69db      	ldr	r3, [r3, #28]
 8001234:	2b02      	cmp	r3, #2
 8001236:	d146      	bne.n	80012c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001238:	4b33      	ldr	r3, [pc, #204]	@ (8001308 <HAL_RCC_OscConfig+0x4cc>)
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800123e:	f7ff fb73 	bl	8000928 <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001244:	e008      	b.n	8001258 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001246:	f7ff fb6f 	bl	8000928 <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	2b02      	cmp	r3, #2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e06d      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001258:	4b29      	ldr	r3, [pc, #164]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1f0      	bne.n	8001246 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800126c:	d108      	bne.n	8001280 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800126e:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	689b      	ldr	r3, [r3, #8]
 800127a:	4921      	ldr	r1, [pc, #132]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001280:	4b1f      	ldr	r3, [pc, #124]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a19      	ldr	r1, [r3, #32]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001290:	430b      	orrs	r3, r1
 8001292:	491b      	ldr	r1, [pc, #108]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 8001294:	4313      	orrs	r3, r2
 8001296:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <HAL_RCC_OscConfig+0x4cc>)
 800129a:	2201      	movs	r2, #1
 800129c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7ff fb43 	bl	8000928 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012a6:	f7ff fb3f 	bl	8000928 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e03d      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80012b8:	4b11      	ldr	r3, [pc, #68]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x46a>
 80012c4:	e035      	b.n	8001332 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012c6:	4b10      	ldr	r3, [pc, #64]	@ (8001308 <HAL_RCC_OscConfig+0x4cc>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fb2c 	bl	8000928 <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012d4:	f7ff fb28 	bl	8000928 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b02      	cmp	r3, #2
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e026      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <HAL_RCC_OscConfig+0x4c4>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d1f0      	bne.n	80012d4 <HAL_RCC_OscConfig+0x498>
 80012f2:	e01e      	b.n	8001332 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	69db      	ldr	r3, [r3, #28]
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d107      	bne.n	800130c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e019      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
 8001300:	40021000 	.word	0x40021000
 8001304:	40007000 	.word	0x40007000
 8001308:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800130c:	4b0b      	ldr	r3, [pc, #44]	@ (800133c <HAL_RCC_OscConfig+0x500>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	429a      	cmp	r2, r3
 800131e:	d106      	bne.n	800132e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800132a:	429a      	cmp	r2, r3
 800132c:	d001      	beq.n	8001332 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	3718      	adds	r7, #24
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40021000 	.word	0x40021000

08001340 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d101      	bne.n	8001354 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001350:	2301      	movs	r3, #1
 8001352:	e0d0      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001354:	4b6a      	ldr	r3, [pc, #424]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f003 0307 	and.w	r3, r3, #7
 800135c:	683a      	ldr	r2, [r7, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d910      	bls.n	8001384 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001362:	4b67      	ldr	r3, [pc, #412]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f023 0207 	bic.w	r2, r3, #7
 800136a:	4965      	ldr	r1, [pc, #404]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001372:	4b63      	ldr	r3, [pc, #396]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	683a      	ldr	r2, [r7, #0]
 800137c:	429a      	cmp	r2, r3
 800137e:	d001      	beq.n	8001384 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0b8      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d020      	beq.n	80013d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0304 	and.w	r3, r3, #4
 8001398:	2b00      	cmp	r3, #0
 800139a:	d005      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800139c:	4b59      	ldr	r3, [pc, #356]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	4a58      	ldr	r2, [pc, #352]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80013a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f003 0308 	and.w	r3, r3, #8
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013b4:	4b53      	ldr	r3, [pc, #332]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	4a52      	ldr	r2, [pc, #328]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013ba:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80013be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013c0:	4b50      	ldr	r3, [pc, #320]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	494d      	ldr	r1, [pc, #308]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013ce:	4313      	orrs	r3, r2
 80013d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d040      	beq.n	8001460 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d107      	bne.n	80013f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013e6:	4b47      	ldr	r3, [pc, #284]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d115      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e07f      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d107      	bne.n	800140e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013fe:	4b41      	ldr	r3, [pc, #260]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d109      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e073      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800140e:	4b3d      	ldr	r3, [pc, #244]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	2b00      	cmp	r3, #0
 8001418:	d101      	bne.n	800141e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e06b      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800141e:	4b39      	ldr	r3, [pc, #228]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f023 0203 	bic.w	r2, r3, #3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	4936      	ldr	r1, [pc, #216]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 800142c:	4313      	orrs	r3, r2
 800142e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001430:	f7ff fa7a 	bl	8000928 <HAL_GetTick>
 8001434:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001436:	e00a      	b.n	800144e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001438:	f7ff fa76 	bl	8000928 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001446:	4293      	cmp	r3, r2
 8001448:	d901      	bls.n	800144e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800144a:	2303      	movs	r3, #3
 800144c:	e053      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800144e:	4b2d      	ldr	r3, [pc, #180]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f003 020c 	and.w	r2, r3, #12
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	429a      	cmp	r2, r3
 800145e:	d1eb      	bne.n	8001438 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001460:	4b27      	ldr	r3, [pc, #156]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d210      	bcs.n	8001490 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f023 0207 	bic.w	r2, r3, #7
 8001476:	4922      	ldr	r1, [pc, #136]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b20      	ldr	r3, [pc, #128]	@ (8001500 <HAL_RCC_ClockConfig+0x1c0>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e032      	b.n	80014f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0304 	and.w	r3, r3, #4
 8001498:	2b00      	cmp	r3, #0
 800149a:	d008      	beq.n	80014ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800149c:	4b19      	ldr	r3, [pc, #100]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	4916      	ldr	r1, [pc, #88]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d009      	beq.n	80014ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014ba:	4b12      	ldr	r3, [pc, #72]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	490e      	ldr	r1, [pc, #56]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014ca:	4313      	orrs	r3, r2
 80014cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ce:	f000 f821 	bl	8001514 <HAL_RCC_GetSysClockFreq>
 80014d2:	4602      	mov	r2, r0
 80014d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001504 <HAL_RCC_ClockConfig+0x1c4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	091b      	lsrs	r3, r3, #4
 80014da:	f003 030f 	and.w	r3, r3, #15
 80014de:	490a      	ldr	r1, [pc, #40]	@ (8001508 <HAL_RCC_ClockConfig+0x1c8>)
 80014e0:	5ccb      	ldrb	r3, [r1, r3]
 80014e2:	fa22 f303 	lsr.w	r3, r2, r3
 80014e6:	4a09      	ldr	r2, [pc, #36]	@ (800150c <HAL_RCC_ClockConfig+0x1cc>)
 80014e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80014ea:	4b09      	ldr	r3, [pc, #36]	@ (8001510 <HAL_RCC_ClockConfig+0x1d0>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff f9d8 	bl	80008a4 <HAL_InitTick>

  return HAL_OK;
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40022000 	.word	0x40022000
 8001504:	40021000 	.word	0x40021000
 8001508:	080047f4 	.word	0x080047f4
 800150c:	20000004 	.word	0x20000004
 8001510:	20000008 	.word	0x20000008

08001514 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001514:	b480      	push	{r7}
 8001516:	b087      	sub	sp, #28
 8001518:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800152a:	2300      	movs	r3, #0
 800152c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800152e:	4b1e      	ldr	r3, [pc, #120]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 030c 	and.w	r3, r3, #12
 800153a:	2b04      	cmp	r3, #4
 800153c:	d002      	beq.n	8001544 <HAL_RCC_GetSysClockFreq+0x30>
 800153e:	2b08      	cmp	r3, #8
 8001540:	d003      	beq.n	800154a <HAL_RCC_GetSysClockFreq+0x36>
 8001542:	e027      	b.n	8001594 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001544:	4b19      	ldr	r3, [pc, #100]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001546:	613b      	str	r3, [r7, #16]
      break;
 8001548:	e027      	b.n	800159a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	0c9b      	lsrs	r3, r3, #18
 800154e:	f003 030f 	and.w	r3, r3, #15
 8001552:	4a17      	ldr	r2, [pc, #92]	@ (80015b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001554:	5cd3      	ldrb	r3, [r2, r3]
 8001556:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d010      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001562:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	0c5b      	lsrs	r3, r3, #17
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	4a11      	ldr	r2, [pc, #68]	@ (80015b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800156e:	5cd3      	ldrb	r3, [r2, r3]
 8001570:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a0d      	ldr	r2, [pc, #52]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001576:	fb03 f202 	mul.w	r2, r3, r2
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001580:	617b      	str	r3, [r7, #20]
 8001582:	e004      	b.n	800158e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a0c      	ldr	r2, [pc, #48]	@ (80015b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001588:	fb02 f303 	mul.w	r3, r2, r3
 800158c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	613b      	str	r3, [r7, #16]
      break;
 8001592:	e002      	b.n	800159a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001594:	4b05      	ldr	r3, [pc, #20]	@ (80015ac <HAL_RCC_GetSysClockFreq+0x98>)
 8001596:	613b      	str	r3, [r7, #16]
      break;
 8001598:	bf00      	nop
    }
  }
  return sysclockfreq;
 800159a:	693b      	ldr	r3, [r7, #16]
}
 800159c:	4618      	mov	r0, r3
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bc80      	pop	{r7}
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40021000 	.word	0x40021000
 80015ac:	007a1200 	.word	0x007a1200
 80015b0:	0800480c 	.word	0x0800480c
 80015b4:	0800481c 	.word	0x0800481c
 80015b8:	003d0900 	.word	0x003d0900

080015bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015c0:	4b02      	ldr	r3, [pc, #8]	@ (80015cc <HAL_RCC_GetHCLKFreq+0x10>)
 80015c2:	681b      	ldr	r3, [r3, #0]
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	20000004 	.word	0x20000004

080015d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015d4:	f7ff fff2 	bl	80015bc <HAL_RCC_GetHCLKFreq>
 80015d8:	4602      	mov	r2, r0
 80015da:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	0a1b      	lsrs	r3, r3, #8
 80015e0:	f003 0307 	and.w	r3, r3, #7
 80015e4:	4903      	ldr	r1, [pc, #12]	@ (80015f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015e6:	5ccb      	ldrb	r3, [r1, r3]
 80015e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40021000 	.word	0x40021000
 80015f4:	08004804 	.word	0x08004804

080015f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015fc:	f7ff ffde 	bl	80015bc <HAL_RCC_GetHCLKFreq>
 8001600:	4602      	mov	r2, r0
 8001602:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	0adb      	lsrs	r3, r3, #11
 8001608:	f003 0307 	and.w	r3, r3, #7
 800160c:	4903      	ldr	r1, [pc, #12]	@ (800161c <HAL_RCC_GetPCLK2Freq+0x24>)
 800160e:	5ccb      	ldrb	r3, [r1, r3]
 8001610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001614:	4618      	mov	r0, r3
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40021000 	.word	0x40021000
 800161c:	08004804 	.word	0x08004804

08001620 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001628:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <RCC_Delay+0x34>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <RCC_Delay+0x38>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	0a5b      	lsrs	r3, r3, #9
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800163c:	bf00      	nop
  }
  while (Delay --);
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1e5a      	subs	r2, r3, #1
 8001642:	60fa      	str	r2, [r7, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f9      	bne.n	800163c <RCC_Delay+0x1c>
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	20000004 	.word	0x20000004
 8001658:	10624dd3 	.word	0x10624dd3

0800165c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e076      	b.n	800175c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001672:	2b00      	cmp	r3, #0
 8001674:	d108      	bne.n	8001688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800167e:	d009      	beq.n	8001694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
 8001686:	e005      	b.n	8001694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f858 	bl	8001764 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80016ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	689b      	ldr	r3, [r3, #8]
 80016d8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80016dc:	431a      	orrs	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	431a      	orrs	r2, r3
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800170e:	431a      	orrs	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001718:	ea42 0103 	orr.w	r1, r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001720:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	430a      	orrs	r2, r1
 800172a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	0c1a      	lsrs	r2, r3, #16
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f002 0204 	and.w	r2, r2, #4
 800173a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	69da      	ldr	r2, [r3, #28]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800174a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	bc80      	pop	{r7}
 8001774:	4770      	bx	lr

08001776 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e042      	b.n	800180e <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800178e:	b2db      	uxtb	r3, r3
 8001790:	2b00      	cmp	r3, #0
 8001792:	d106      	bne.n	80017a2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f000 f83a 	bl	8001816 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2224      	movs	r2, #36	@ 0x24
 80017a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68da      	ldr	r2, [r3, #12]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80017b8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f934 	bl	8001a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80017ce:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	695a      	ldr	r2, [r3, #20]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80017de:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80017ee:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2200      	movs	r2, #0
 80017f4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2220      	movs	r2, #32
 80017fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2220      	movs	r2, #32
 8001802:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800180c:	2300      	movs	r3, #0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}

08001816 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af02      	add	r7, sp, #8
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	603b      	str	r3, [r7, #0]
 8001834:	4613      	mov	r3, r2
 8001836:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b20      	cmp	r3, #32
 8001846:	d17c      	bne.n	8001942 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d002      	beq.n	8001854 <HAL_UART_Receive+0x2c>
 800184e:	88fb      	ldrh	r3, [r7, #6]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d101      	bne.n	8001858 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8001854:	2301      	movs	r3, #1
 8001856:	e075      	b.n	8001944 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	2222      	movs	r2, #34	@ 0x22
 8001862:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2200      	movs	r2, #0
 800186a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800186c:	f7ff f85c 	bl	8000928 <HAL_GetTick>
 8001870:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	88fa      	ldrh	r2, [r7, #6]
 8001876:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	88fa      	ldrh	r2, [r7, #6]
 800187c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001886:	d108      	bne.n	800189a <HAL_UART_Receive+0x72>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	691b      	ldr	r3, [r3, #16]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d104      	bne.n	800189a <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	61bb      	str	r3, [r7, #24]
 8001898:	e003      	b.n	80018a2 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800189e:	2300      	movs	r3, #0
 80018a0:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80018a2:	e043      	b.n	800192c <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	9300      	str	r3, [sp, #0]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2200      	movs	r2, #0
 80018ac:	2120      	movs	r1, #32
 80018ae:	68f8      	ldr	r0, [r7, #12]
 80018b0:	f000 f84c 	bl	800194c <UART_WaitOnFlagUntilTimeout>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e042      	b.n	8001944 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10c      	bne.n	80018de <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	b29b      	uxth	r3, r3
 80018cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	3302      	adds	r3, #2
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	e01f      	b.n	800191e <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018e6:	d007      	beq.n	80018f8 <HAL_UART_Receive+0xd0>
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10a      	bne.n	8001906 <HAL_UART_Receive+0xde>
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d106      	bne.n	8001906 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	b2da      	uxtb	r2, r3
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e008      	b.n	8001918 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001912:	b2da      	uxtb	r2, r3
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	3301      	adds	r3, #1
 800191c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001922:	b29b      	uxth	r3, r3
 8001924:	3b01      	subs	r3, #1
 8001926:	b29a      	uxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8001930:	b29b      	uxth	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1b6      	bne.n	80018a4 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	2220      	movs	r2, #32
 800193a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001942:	2302      	movs	r3, #2
  }
}
 8001944:	4618      	mov	r0, r3
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}

0800194c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b090      	sub	sp, #64	@ 0x40
 8001950:	af00      	add	r7, sp, #0
 8001952:	60f8      	str	r0, [r7, #12]
 8001954:	60b9      	str	r1, [r7, #8]
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	4613      	mov	r3, r2
 800195a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800195c:	e050      	b.n	8001a00 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800195e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001964:	d04c      	beq.n	8001a00 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001968:	2b00      	cmp	r3, #0
 800196a:	d007      	beq.n	800197c <UART_WaitOnFlagUntilTimeout+0x30>
 800196c:	f7fe ffdc 	bl	8000928 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001978:	429a      	cmp	r2, r3
 800197a:	d241      	bcs.n	8001a00 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	330c      	adds	r3, #12
 8001982:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001986:	e853 3f00 	ldrex	r3, [r3]
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800198c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800198e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8001992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	330c      	adds	r3, #12
 800199a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800199c:	637a      	str	r2, [r7, #52]	@ 0x34
 800199e:	633b      	str	r3, [r7, #48]	@ 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80019a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019a4:	e841 2300 	strex	r3, r2, [r1]
 80019a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80019aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d1e5      	bne.n	800197c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	3314      	adds	r3, #20
 80019b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	e853 3f00 	ldrex	r3, [r3]
 80019be:	613b      	str	r3, [r7, #16]
   return(result);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	f023 0301 	bic.w	r3, r3, #1
 80019c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	3314      	adds	r3, #20
 80019ce:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80019d0:	623a      	str	r2, [r7, #32]
 80019d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80019d4:	69f9      	ldr	r1, [r7, #28]
 80019d6:	6a3a      	ldr	r2, [r7, #32]
 80019d8:	e841 2300 	strex	r3, r2, [r1]
 80019dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d1e5      	bne.n	80019b0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2220      	movs	r2, #32
 80019e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2220      	movs	r2, #32
 80019f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e00f      	b.n	8001a20 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	4013      	ands	r3, r2
 8001a0a:	68ba      	ldr	r2, [r7, #8]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	bf0c      	ite	eq
 8001a10:	2301      	moveq	r3, #1
 8001a12:	2300      	movne	r3, #0
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	461a      	mov	r2, r3
 8001a18:	79fb      	ldrb	r3, [r7, #7]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	d09f      	beq.n	800195e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001a1e:	2300      	movs	r3, #0
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3740      	adds	r7, #64	@ 0x40
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	691b      	ldr	r3, [r3, #16]
 8001a36:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68da      	ldr	r2, [r3, #12]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689a      	ldr	r2, [r3, #8]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	695b      	ldr	r3, [r3, #20]
 8001a54:	4313      	orrs	r3, r2
 8001a56:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001a62:	f023 030c 	bic.w	r3, r3, #12
 8001a66:	687a      	ldr	r2, [r7, #4]
 8001a68:	6812      	ldr	r2, [r2, #0]
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699a      	ldr	r2, [r3, #24]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	430a      	orrs	r2, r1
 8001a84:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a2c      	ldr	r2, [pc, #176]	@ (8001b3c <UART_SetConfig+0x114>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d103      	bne.n	8001a98 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a90:	f7ff fdb2 	bl	80015f8 <HAL_RCC_GetPCLK2Freq>
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	e002      	b.n	8001a9e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a98:	f7ff fd9a 	bl	80015d0 <HAL_RCC_GetPCLK1Freq>
 8001a9c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009a      	lsls	r2, r3, #2
 8001aa8:	441a      	add	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab4:	4a22      	ldr	r2, [pc, #136]	@ (8001b40 <UART_SetConfig+0x118>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	095b      	lsrs	r3, r3, #5
 8001abc:	0119      	lsls	r1, r3, #4
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	009a      	lsls	r2, r3, #2
 8001ac8:	441a      	add	r2, r3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <UART_SetConfig+0x118>)
 8001ad6:	fba3 0302 	umull	r0, r3, r3, r2
 8001ada:	095b      	lsrs	r3, r3, #5
 8001adc:	2064      	movs	r0, #100	@ 0x64
 8001ade:	fb00 f303 	mul.w	r3, r0, r3
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	3332      	adds	r3, #50	@ 0x32
 8001ae8:	4a15      	ldr	r2, [pc, #84]	@ (8001b40 <UART_SetConfig+0x118>)
 8001aea:	fba2 2303 	umull	r2, r3, r2, r3
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001af4:	4419      	add	r1, r3
 8001af6:	68fa      	ldr	r2, [r7, #12]
 8001af8:	4613      	mov	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	4413      	add	r3, r2
 8001afe:	009a      	lsls	r2, r3, #2
 8001b00:	441a      	add	r2, r3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	fbb2 f2f3 	udiv	r2, r2, r3
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <UART_SetConfig+0x118>)
 8001b0e:	fba3 0302 	umull	r0, r3, r3, r2
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2064      	movs	r0, #100	@ 0x64
 8001b16:	fb00 f303 	mul.w	r3, r0, r3
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	3332      	adds	r3, #50	@ 0x32
 8001b20:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <UART_SetConfig+0x118>)
 8001b22:	fba2 2303 	umull	r2, r3, r2, r3
 8001b26:	095b      	lsrs	r3, r3, #5
 8001b28:	f003 020f 	and.w	r2, r3, #15
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	440a      	add	r2, r1
 8001b32:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001b34:	bf00      	nop
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40013800 	.word	0x40013800
 8001b40:	51eb851f 	.word	0x51eb851f

08001b44 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f103 0208 	add.w	r2, r3, #8
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f103 0208 	add.w	r2, r3, #8
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f103 0208 	add.w	r2, r3, #8
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001b90:	bf00      	nop
 8001b92:	370c      	adds	r7, #12
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bc80      	pop	{r7}
 8001b98:	4770      	bx	lr

08001b9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	b085      	sub	sp, #20
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	68fa      	ldr	r2, [r7, #12]
 8001bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	683a      	ldr	r2, [r7, #0]
 8001bc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	1c5a      	adds	r2, r3, #1
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	601a      	str	r2, [r3, #0]
}
 8001bd6:	bf00      	nop
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001be0:	b480      	push	{r7}
 8001be2:	b085      	sub	sp, #20
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6892      	ldr	r2, [r2, #8]
 8001bf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	6852      	ldr	r2, [r2, #4]
 8001c00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d103      	bne.n	8001c14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2200      	movs	r2, #0
 8001c18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	1e5a      	subs	r2, r3, #1
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bc80      	pop	{r7}
 8001c30:	4770      	bx	lr

08001c32 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b08e      	sub	sp, #56	@ 0x38
 8001c36:	af04      	add	r7, sp, #16
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	60b9      	str	r1, [r7, #8]
 8001c3c:	607a      	str	r2, [r7, #4]
 8001c3e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10b      	bne.n	8001c5e <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c4a:	f383 8811 	msr	BASEPRI, r3
 8001c4e:	f3bf 8f6f 	isb	sy
 8001c52:	f3bf 8f4f 	dsb	sy
 8001c56:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001c58:	bf00      	nop
 8001c5a:	bf00      	nop
 8001c5c:	e7fd      	b.n	8001c5a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10b      	bne.n	8001c7c <xTaskCreateStatic+0x4a>
	__asm volatile
 8001c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c68:	f383 8811 	msr	BASEPRI, r3
 8001c6c:	f3bf 8f6f 	isb	sy
 8001c70:	f3bf 8f4f 	dsb	sy
 8001c74:	61fb      	str	r3, [r7, #28]
}
 8001c76:	bf00      	nop
 8001c78:	bf00      	nop
 8001c7a:	e7fd      	b.n	8001c78 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001c7c:	2354      	movs	r3, #84	@ 0x54
 8001c7e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	2b54      	cmp	r3, #84	@ 0x54
 8001c84:	d00b      	beq.n	8001c9e <xTaskCreateStatic+0x6c>
	__asm volatile
 8001c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001c8a:	f383 8811 	msr	BASEPRI, r3
 8001c8e:	f3bf 8f6f 	isb	sy
 8001c92:	f3bf 8f4f 	dsb	sy
 8001c96:	61bb      	str	r3, [r7, #24]
}
 8001c98:	bf00      	nop
 8001c9a:	bf00      	nop
 8001c9c:	e7fd      	b.n	8001c9a <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d01e      	beq.n	8001ce2 <xTaskCreateStatic+0xb0>
 8001ca4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d01b      	beq.n	8001ce2 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001cac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001cb2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	9303      	str	r3, [sp, #12]
 8001cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc2:	9302      	str	r3, [sp, #8]
 8001cc4:	f107 0314 	add.w	r3, r7, #20
 8001cc8:	9301      	str	r3, [sp, #4]
 8001cca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	68b9      	ldr	r1, [r7, #8]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f000 f850 	bl	8001d7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001cda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001cdc:	f000 f8ce 	bl	8001e7c <prvAddNewTaskToReadyList>
 8001ce0:	e001      	b.n	8001ce6 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001ce6:	697b      	ldr	r3, [r7, #20]
	}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3728      	adds	r7, #40	@ 0x28
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08c      	sub	sp, #48	@ 0x30
 8001cf4:	af04      	add	r7, sp, #16
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	60b9      	str	r1, [r7, #8]
 8001cfa:	603b      	str	r3, [r7, #0]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fe83 	bl	8002a10 <pvPortMalloc>
 8001d0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d00e      	beq.n	8001d30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001d12:	2054      	movs	r0, #84	@ 0x54
 8001d14:	f000 fe7c 	bl	8002a10 <pvPortMalloc>
 8001d18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d003      	beq.n	8001d28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	697a      	ldr	r2, [r7, #20]
 8001d24:	631a      	str	r2, [r3, #48]	@ 0x30
 8001d26:	e005      	b.n	8001d34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001d28:	6978      	ldr	r0, [r7, #20]
 8001d2a:	f000 ff39 	bl	8002ba0 <vPortFree>
 8001d2e:	e001      	b.n	8001d34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001d30:	2300      	movs	r3, #0
 8001d32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d017      	beq.n	8001d6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001d42:	88fa      	ldrh	r2, [r7, #6]
 8001d44:	2300      	movs	r3, #0
 8001d46:	9303      	str	r3, [sp, #12]
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	68b9      	ldr	r1, [r7, #8]
 8001d58:	68f8      	ldr	r0, [r7, #12]
 8001d5a:	f000 f80e 	bl	8001d7a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001d5e:	69f8      	ldr	r0, [r7, #28]
 8001d60:	f000 f88c 	bl	8001e7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001d64:	2301      	movs	r3, #1
 8001d66:	61bb      	str	r3, [r7, #24]
 8001d68:	e002      	b.n	8001d70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001d70:	69bb      	ldr	r3, [r7, #24]
	}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3720      	adds	r7, #32
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001d7a:	b580      	push	{r7, lr}
 8001d7c:	b088      	sub	sp, #32
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	60f8      	str	r0, [r7, #12]
 8001d82:	60b9      	str	r1, [r7, #8]
 8001d84:	607a      	str	r2, [r7, #4]
 8001d86:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001d88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001d92:	3b01      	subs	r3, #1
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	4413      	add	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	f023 0307 	bic.w	r3, r3, #7
 8001da0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	f003 0307 	and.w	r3, r3, #7
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00b      	beq.n	8001dc4 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8001dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001db0:	f383 8811 	msr	BASEPRI, r3
 8001db4:	f3bf 8f6f 	isb	sy
 8001db8:	f3bf 8f4f 	dsb	sy
 8001dbc:	617b      	str	r3, [r7, #20]
}
 8001dbe:	bf00      	nop
 8001dc0:	bf00      	nop
 8001dc2:	e7fd      	b.n	8001dc0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
 8001dc8:	e012      	b.n	8001df0 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	69fb      	ldr	r3, [r7, #28]
 8001dce:	4413      	add	r3, r2
 8001dd0:	7819      	ldrb	r1, [r3, #0]
 8001dd2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3334      	adds	r3, #52	@ 0x34
 8001dda:	460a      	mov	r2, r1
 8001ddc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	4413      	add	r3, r2
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d006      	beq.n	8001df8 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	d9e9      	bls.n	8001dca <prvInitialiseNewTask+0x50>
 8001df6:	e000      	b.n	8001dfa <prvInitialiseNewTask+0x80>
		{
			break;
 8001df8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e04:	2b06      	cmp	r3, #6
 8001e06:	d901      	bls.n	8001e0c <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001e08:	2306      	movs	r3, #6
 8001e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e10:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001e16:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e20:	3304      	adds	r3, #4
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fead 	bl	8001b82 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001e28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e2a:	3318      	adds	r3, #24
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fea8 	bl	8001b82 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e36:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3a:	f1c3 0207 	rsb	r2, r3, #7
 8001e3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e40:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e46:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001e48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001e4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	68f9      	ldr	r1, [r7, #12]
 8001e5a:	69b8      	ldr	r0, [r7, #24]
 8001e5c:	f000 fbde 	bl	800261c <pxPortInitialiseStack>
 8001e60:	4602      	mov	r2, r0
 8001e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e64:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001e6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001e70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e72:	bf00      	nop
 8001e74:	3720      	adds	r7, #32
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001e7c:	b5b0      	push	{r4, r5, r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af02      	add	r7, sp, #8
 8001e82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001e84:	f000 fcba 	bl	80027fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001e88:	4b39      	ldr	r3, [pc, #228]	@ (8001f70 <prvAddNewTaskToReadyList+0xf4>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	4a38      	ldr	r2, [pc, #224]	@ (8001f70 <prvAddNewTaskToReadyList+0xf4>)
 8001e90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001e92:	4b38      	ldr	r3, [pc, #224]	@ (8001f74 <prvAddNewTaskToReadyList+0xf8>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d109      	bne.n	8001eae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001e9a:	4a36      	ldr	r2, [pc, #216]	@ (8001f74 <prvAddNewTaskToReadyList+0xf8>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ea0:	4b33      	ldr	r3, [pc, #204]	@ (8001f70 <prvAddNewTaskToReadyList+0xf4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d110      	bne.n	8001eca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001ea8:	f000 fad8 	bl	800245c <prvInitialiseTaskLists>
 8001eac:	e00d      	b.n	8001eca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001eae:	4b32      	ldr	r3, [pc, #200]	@ (8001f78 <prvAddNewTaskToReadyList+0xfc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d109      	bne.n	8001eca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001eb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001f74 <prvAddNewTaskToReadyList+0xf8>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d802      	bhi.n	8001eca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001ec4:	4a2b      	ldr	r2, [pc, #172]	@ (8001f74 <prvAddNewTaskToReadyList+0xf8>)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001eca:	4b2c      	ldr	r3, [pc, #176]	@ (8001f7c <prvAddNewTaskToReadyList+0x100>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	4a2a      	ldr	r2, [pc, #168]	@ (8001f7c <prvAddNewTaskToReadyList+0x100>)
 8001ed2:	6013      	str	r3, [r2, #0]
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d016      	beq.n	8001f08 <prvAddNewTaskToReadyList+0x8c>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 f9c1 	bl	8004264 <SEGGER_SYSVIEW_OnTaskCreate>
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	461d      	mov	r5, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	461c      	mov	r4, r3
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	1ae3      	subs	r3, r4, r3
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	462b      	mov	r3, r5
 8001f04:	f001 f812 	bl	8002f2c <SYSVIEW_AddTask>

		prvAddTaskToReadyList( pxNewTCB );
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f002 fa2e 	bl	800436c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f14:	2201      	movs	r2, #1
 8001f16:	409a      	lsls	r2, r3
 8001f18:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <prvAddNewTaskToReadyList+0x104>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	4a18      	ldr	r2, [pc, #96]	@ (8001f80 <prvAddNewTaskToReadyList+0x104>)
 8001f20:	6013      	str	r3, [r2, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	4a15      	ldr	r2, [pc, #84]	@ (8001f84 <prvAddNewTaskToReadyList+0x108>)
 8001f30:	441a      	add	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3304      	adds	r3, #4
 8001f36:	4619      	mov	r1, r3
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f7ff fe2e 	bl	8001b9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001f3e:	f000 fc8d 	bl	800285c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001f42:	4b0d      	ldr	r3, [pc, #52]	@ (8001f78 <prvAddNewTaskToReadyList+0xfc>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00e      	beq.n	8001f68 <prvAddNewTaskToReadyList+0xec>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f74 <prvAddNewTaskToReadyList+0xf8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d207      	bcs.n	8001f68 <prvAddNewTaskToReadyList+0xec>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001f58:	4b0b      	ldr	r3, [pc, #44]	@ (8001f88 <prvAddNewTaskToReadyList+0x10c>)
 8001f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f5e:	601a      	str	r2, [r3, #0]
 8001f60:	f3bf 8f4f 	dsb	sy
 8001f64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f68:	bf00      	nop
 8001f6a:	3708      	adds	r7, #8
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f70:	2000049c 	.word	0x2000049c
 8001f74:	2000039c 	.word	0x2000039c
 8001f78:	200004a8 	.word	0x200004a8
 8001f7c:	200004b8 	.word	0x200004b8
 8001f80:	200004a4 	.word	0x200004a4
 8001f84:	200003a0 	.word	0x200003a0
 8001f88:	e000ed04 	.word	0xe000ed04

08001f8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	@ 0x28
 8001f90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8001f96:	2300      	movs	r3, #0
 8001f98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8001f9a:	463a      	mov	r2, r7
 8001f9c:	1d39      	adds	r1, r7, #4
 8001f9e:	f107 0308 	add.w	r3, r7, #8
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe f8d4 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8001fa8:	6839      	ldr	r1, [r7, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68ba      	ldr	r2, [r7, #8]
 8001fae:	9202      	str	r2, [sp, #8]
 8001fb0:	9301      	str	r3, [sp, #4]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	9300      	str	r3, [sp, #0]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	460a      	mov	r2, r1
 8001fba:	491f      	ldr	r1, [pc, #124]	@ (8002038 <vTaskStartScheduler+0xac>)
 8001fbc:	481f      	ldr	r0, [pc, #124]	@ (800203c <vTaskStartScheduler+0xb0>)
 8001fbe:	f7ff fe38 	bl	8001c32 <xTaskCreateStatic>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4a1e      	ldr	r2, [pc, #120]	@ (8002040 <vTaskStartScheduler+0xb4>)
 8001fc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8001fc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002040 <vTaskStartScheduler+0xb4>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e001      	b.n	8001fda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d116      	bne.n	800200e <vTaskStartScheduler+0x82>
	__asm volatile
 8001fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 8001fe8:	f3bf 8f6f 	isb	sy
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	613b      	str	r3, [r7, #16]
}
 8001ff2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001ff4:	4b13      	ldr	r3, [pc, #76]	@ (8002044 <vTaskStartScheduler+0xb8>)
 8001ff6:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	@ (8002048 <vTaskStartScheduler+0xbc>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002002:	4b12      	ldr	r3, [pc, #72]	@ (800204c <vTaskStartScheduler+0xc0>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002008:	f000 fb86 	bl	8002718 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800200c:	e00f      	b.n	800202e <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002014:	d10b      	bne.n	800202e <vTaskStartScheduler+0xa2>
	__asm volatile
 8002016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800201a:	f383 8811 	msr	BASEPRI, r3
 800201e:	f3bf 8f6f 	isb	sy
 8002022:	f3bf 8f4f 	dsb	sy
 8002026:	60fb      	str	r3, [r7, #12]
}
 8002028:	bf00      	nop
 800202a:	bf00      	nop
 800202c:	e7fd      	b.n	800202a <vTaskStartScheduler+0x9e>
}
 800202e:	bf00      	nop
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	08004730 	.word	0x08004730
 800203c:	0800242d 	.word	0x0800242d
 8002040:	200004c0 	.word	0x200004c0
 8002044:	200004bc 	.word	0x200004bc
 8002048:	200004a8 	.word	0x200004a8
 800204c:	200004a0 	.word	0x200004a0

08002050 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8002054:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <vTaskSuspendAll+0x18>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	4a03      	ldr	r2, [pc, #12]	@ (8002068 <vTaskSuspendAll+0x18>)
 800205c:	6013      	str	r3, [r2, #0]
}
 800205e:	bf00      	nop
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	200004c4 	.word	0x200004c4

0800206c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002072:	2300      	movs	r3, #0
 8002074:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800207a:	4b44      	ldr	r3, [pc, #272]	@ (800218c <xTaskResumeAll+0x120>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10b      	bne.n	800209a <xTaskResumeAll+0x2e>
	__asm volatile
 8002082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002086:	f383 8811 	msr	BASEPRI, r3
 800208a:	f3bf 8f6f 	isb	sy
 800208e:	f3bf 8f4f 	dsb	sy
 8002092:	603b      	str	r3, [r7, #0]
}
 8002094:	bf00      	nop
 8002096:	bf00      	nop
 8002098:	e7fd      	b.n	8002096 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800209a:	f000 fbaf 	bl	80027fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800209e:	4b3b      	ldr	r3, [pc, #236]	@ (800218c <xTaskResumeAll+0x120>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	4a39      	ldr	r2, [pc, #228]	@ (800218c <xTaskResumeAll+0x120>)
 80020a6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80020a8:	4b38      	ldr	r3, [pc, #224]	@ (800218c <xTaskResumeAll+0x120>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d165      	bne.n	800217c <xTaskResumeAll+0x110>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80020b0:	4b37      	ldr	r3, [pc, #220]	@ (8002190 <xTaskResumeAll+0x124>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d061      	beq.n	800217c <xTaskResumeAll+0x110>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80020b8:	e032      	b.n	8002120 <xTaskResumeAll+0xb4>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80020ba:	4b36      	ldr	r3, [pc, #216]	@ (8002194 <xTaskResumeAll+0x128>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	3318      	adds	r3, #24
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fd8a 	bl	8001be0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3304      	adds	r3, #4
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7ff fd85 	bl	8001be0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 f947 	bl	800436c <SEGGER_SYSVIEW_OnTaskStartReady>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e2:	2201      	movs	r2, #1
 80020e4:	409a      	lsls	r2, r3
 80020e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002198 <xTaskResumeAll+0x12c>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	4a2a      	ldr	r2, [pc, #168]	@ (8002198 <xTaskResumeAll+0x12c>)
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80020f4:	4613      	mov	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	4a27      	ldr	r2, [pc, #156]	@ (800219c <xTaskResumeAll+0x130>)
 80020fe:	441a      	add	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3304      	adds	r3, #4
 8002104:	4619      	mov	r1, r3
 8002106:	4610      	mov	r0, r2
 8002108:	f7ff fd47 	bl	8001b9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002110:	4b23      	ldr	r3, [pc, #140]	@ (80021a0 <xTaskResumeAll+0x134>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002116:	429a      	cmp	r2, r3
 8002118:	d302      	bcc.n	8002120 <xTaskResumeAll+0xb4>
					{
						xYieldPending = pdTRUE;
 800211a:	4b22      	ldr	r3, [pc, #136]	@ (80021a4 <xTaskResumeAll+0x138>)
 800211c:	2201      	movs	r2, #1
 800211e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002120:	4b1c      	ldr	r3, [pc, #112]	@ (8002194 <xTaskResumeAll+0x128>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1c8      	bne.n	80020ba <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <xTaskResumeAll+0xc6>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800212e:	f000 fa33 	bl	8002598 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002132:	4b1d      	ldr	r3, [pc, #116]	@ (80021a8 <xTaskResumeAll+0x13c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d010      	beq.n	8002160 <xTaskResumeAll+0xf4>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800213e:	f000 f849 	bl	80021d4 <xTaskIncrementTick>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <xTaskResumeAll+0xe2>
							{
								xYieldPending = pdTRUE;
 8002148:	4b16      	ldr	r3, [pc, #88]	@ (80021a4 <xTaskResumeAll+0x138>)
 800214a:	2201      	movs	r2, #1
 800214c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	3b01      	subs	r3, #1
 8002152:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d1f1      	bne.n	800213e <xTaskResumeAll+0xd2>

						uxPendedTicks = 0;
 800215a:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <xTaskResumeAll+0x13c>)
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002160:	4b10      	ldr	r3, [pc, #64]	@ (80021a4 <xTaskResumeAll+0x138>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d009      	beq.n	800217c <xTaskResumeAll+0x110>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002168:	2301      	movs	r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800216c:	4b0f      	ldr	r3, [pc, #60]	@ (80021ac <xTaskResumeAll+0x140>)
 800216e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	f3bf 8f4f 	dsb	sy
 8002178:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800217c:	f000 fb6e 	bl	800285c <vPortExitCritical>

	return xAlreadyYielded;
 8002180:	68bb      	ldr	r3, [r7, #8]
}
 8002182:	4618      	mov	r0, r3
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	200004c4 	.word	0x200004c4
 8002190:	2000049c 	.word	0x2000049c
 8002194:	2000045c 	.word	0x2000045c
 8002198:	200004a4 	.word	0x200004a4
 800219c:	200003a0 	.word	0x200003a0
 80021a0:	2000039c 	.word	0x2000039c
 80021a4:	200004b0 	.word	0x200004b0
 80021a8:	200004ac 	.word	0x200004ac
 80021ac:	e000ed04 	.word	0xe000ed04

080021b0 <xTaskGetTickCountFromISR>:
	return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b082      	sub	sp, #8
 80021b4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021b6:	f000 fbeb 	bl	8002990 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80021be:	4b04      	ldr	r3, [pc, #16]	@ (80021d0 <xTaskGetTickCountFromISR+0x20>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80021c4:	683b      	ldr	r3, [r7, #0]
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3708      	adds	r7, #8
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	200004a0 	.word	0x200004a0

080021d4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021de:	4b53      	ldr	r3, [pc, #332]	@ (800232c <xTaskIncrementTick+0x158>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f040 8092 	bne.w	800230c <xTaskIncrementTick+0x138>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80021e8:	4b51      	ldr	r3, [pc, #324]	@ (8002330 <xTaskIncrementTick+0x15c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	3301      	adds	r3, #1
 80021ee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80021f0:	4a4f      	ldr	r2, [pc, #316]	@ (8002330 <xTaskIncrementTick+0x15c>)
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d121      	bne.n	8002240 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80021fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002334 <xTaskIncrementTick+0x160>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00b      	beq.n	800221e <xTaskIncrementTick+0x4a>
	__asm volatile
 8002206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800220a:	f383 8811 	msr	BASEPRI, r3
 800220e:	f3bf 8f6f 	isb	sy
 8002212:	f3bf 8f4f 	dsb	sy
 8002216:	603b      	str	r3, [r7, #0]
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	e7fd      	b.n	800221a <xTaskIncrementTick+0x46>
 800221e:	4b45      	ldr	r3, [pc, #276]	@ (8002334 <xTaskIncrementTick+0x160>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	4b44      	ldr	r3, [pc, #272]	@ (8002338 <xTaskIncrementTick+0x164>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a42      	ldr	r2, [pc, #264]	@ (8002334 <xTaskIncrementTick+0x160>)
 800222a:	6013      	str	r3, [r2, #0]
 800222c:	4a42      	ldr	r2, [pc, #264]	@ (8002338 <xTaskIncrementTick+0x164>)
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6013      	str	r3, [r2, #0]
 8002232:	4b42      	ldr	r3, [pc, #264]	@ (800233c <xTaskIncrementTick+0x168>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3301      	adds	r3, #1
 8002238:	4a40      	ldr	r2, [pc, #256]	@ (800233c <xTaskIncrementTick+0x168>)
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	f000 f9ac 	bl	8002598 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002240:	4b3f      	ldr	r3, [pc, #252]	@ (8002340 <xTaskIncrementTick+0x16c>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	429a      	cmp	r2, r3
 8002248:	d351      	bcc.n	80022ee <xTaskIncrementTick+0x11a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800224a:	4b3a      	ldr	r3, [pc, #232]	@ (8002334 <xTaskIncrementTick+0x160>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d101      	bne.n	8002258 <xTaskIncrementTick+0x84>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <xTaskIncrementTick+0x86>
 8002258:	2300      	movs	r3, #0
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800225e:	4b38      	ldr	r3, [pc, #224]	@ (8002340 <xTaskIncrementTick+0x16c>)
 8002260:	f04f 32ff 	mov.w	r2, #4294967295
 8002264:	601a      	str	r2, [r3, #0]
					break;
 8002266:	e042      	b.n	80022ee <xTaskIncrementTick+0x11a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002268:	4b32      	ldr	r3, [pc, #200]	@ (8002334 <xTaskIncrementTick+0x160>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	d203      	bcs.n	8002288 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002280:	4a2f      	ldr	r2, [pc, #188]	@ (8002340 <xTaskIncrementTick+0x16c>)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6013      	str	r3, [r2, #0]
						break;
 8002286:	e032      	b.n	80022ee <xTaskIncrementTick+0x11a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	3304      	adds	r3, #4
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fca7 	bl	8001be0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002296:	2b00      	cmp	r3, #0
 8002298:	d004      	beq.n	80022a4 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	3318      	adds	r3, #24
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff fc9e 	bl	8001be0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 f860 	bl	800436c <SEGGER_SYSVIEW_OnTaskStartReady>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022b0:	2201      	movs	r2, #1
 80022b2:	409a      	lsls	r2, r3
 80022b4:	4b23      	ldr	r3, [pc, #140]	@ (8002344 <xTaskIncrementTick+0x170>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	4a22      	ldr	r2, [pc, #136]	@ (8002344 <xTaskIncrementTick+0x170>)
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022c2:	4613      	mov	r3, r2
 80022c4:	009b      	lsls	r3, r3, #2
 80022c6:	4413      	add	r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002348 <xTaskIncrementTick+0x174>)
 80022cc:	441a      	add	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	3304      	adds	r3, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	4610      	mov	r0, r2
 80022d6:	f7ff fc60 	bl	8001b9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022de:	4b1b      	ldr	r3, [pc, #108]	@ (800234c <xTaskIncrementTick+0x178>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d3b0      	bcc.n	800224a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80022e8:	2301      	movs	r3, #1
 80022ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022ec:	e7ad      	b.n	800224a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80022ee:	4b17      	ldr	r3, [pc, #92]	@ (800234c <xTaskIncrementTick+0x178>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80022f4:	4914      	ldr	r1, [pc, #80]	@ (8002348 <xTaskIncrementTick+0x174>)
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	440b      	add	r3, r1
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d907      	bls.n	8002316 <xTaskIncrementTick+0x142>
			{
				xSwitchRequired = pdTRUE;
 8002306:	2301      	movs	r3, #1
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	e004      	b.n	8002316 <xTaskIncrementTick+0x142>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800230c:	4b10      	ldr	r3, [pc, #64]	@ (8002350 <xTaskIncrementTick+0x17c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	3301      	adds	r3, #1
 8002312:	4a0f      	ldr	r2, [pc, #60]	@ (8002350 <xTaskIncrementTick+0x17c>)
 8002314:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002316:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <xTaskIncrementTick+0x180>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <xTaskIncrementTick+0x14e>
		{
			xSwitchRequired = pdTRUE;
 800231e:	2301      	movs	r3, #1
 8002320:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8002322:	697b      	ldr	r3, [r7, #20]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	200004c4 	.word	0x200004c4
 8002330:	200004a0 	.word	0x200004a0
 8002334:	20000454 	.word	0x20000454
 8002338:	20000458 	.word	0x20000458
 800233c:	200004b4 	.word	0x200004b4
 8002340:	200004bc 	.word	0x200004bc
 8002344:	200004a4 	.word	0x200004a4
 8002348:	200003a0 	.word	0x200003a0
 800234c:	2000039c 	.word	0x2000039c
 8002350:	200004ac 	.word	0x200004ac
 8002354:	200004b0 	.word	0x200004b0

08002358 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800235e:	4b2d      	ldr	r3, [pc, #180]	@ (8002414 <vTaskSwitchContext+0xbc>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002366:	4b2c      	ldr	r3, [pc, #176]	@ (8002418 <vTaskSwitchContext+0xc0>)
 8002368:	2201      	movs	r2, #1
 800236a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800236c:	e04e      	b.n	800240c <vTaskSwitchContext+0xb4>
		xYieldPending = pdFALSE;
 800236e:	4b2a      	ldr	r3, [pc, #168]	@ (8002418 <vTaskSwitchContext+0xc0>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002374:	4b29      	ldr	r3, [pc, #164]	@ (800241c <vTaskSwitchContext+0xc4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002382:	7afb      	ldrb	r3, [r7, #11]
 8002384:	f1c3 031f 	rsb	r3, r3, #31
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	4925      	ldr	r1, [pc, #148]	@ (8002420 <vTaskSwitchContext+0xc8>)
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10b      	bne.n	80023b6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800239e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	607b      	str	r3, [r7, #4]
}
 80023b0:	bf00      	nop
 80023b2:	bf00      	nop
 80023b4:	e7fd      	b.n	80023b2 <vTaskSwitchContext+0x5a>
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	4a17      	ldr	r2, [pc, #92]	@ (8002420 <vTaskSwitchContext+0xc8>)
 80023c2:	4413      	add	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	605a      	str	r2, [r3, #4]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	3308      	adds	r3, #8
 80023d8:	429a      	cmp	r2, r3
 80023da:	d104      	bne.n	80023e6 <vTaskSwitchContext+0x8e>
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002424 <vTaskSwitchContext+0xcc>)
 80023ee:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 80023f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002424 <vTaskSwitchContext+0xcc>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4b0c      	ldr	r3, [pc, #48]	@ (8002428 <vTaskSwitchContext+0xd0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d102      	bne.n	8002402 <vTaskSwitchContext+0xaa>
 80023fc:	f001 ff16 	bl	800422c <SEGGER_SYSVIEW_OnIdle>
}
 8002400:	e004      	b.n	800240c <vTaskSwitchContext+0xb4>
		traceTASK_SWITCHED_IN();
 8002402:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <vTaskSwitchContext+0xcc>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f001 ff6e 	bl	80042e8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800240c:	bf00      	nop
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	200004c4 	.word	0x200004c4
 8002418:	200004b0 	.word	0x200004b0
 800241c:	200004a4 	.word	0x200004a4
 8002420:	200003a0 	.word	0x200003a0
 8002424:	2000039c 	.word	0x2000039c
 8002428:	200004c0 	.word	0x200004c0

0800242c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002434:	f000 f852 	bl	80024dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002438:	4b06      	ldr	r3, [pc, #24]	@ (8002454 <prvIdleTask+0x28>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b01      	cmp	r3, #1
 800243e:	d9f9      	bls.n	8002434 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002440:	4b05      	ldr	r3, [pc, #20]	@ (8002458 <prvIdleTask+0x2c>)
 8002442:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	f3bf 8f4f 	dsb	sy
 800244c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002450:	e7f0      	b.n	8002434 <prvIdleTask+0x8>
 8002452:	bf00      	nop
 8002454:	200003a0 	.word	0x200003a0
 8002458:	e000ed04 	.word	0xe000ed04

0800245c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002462:	2300      	movs	r3, #0
 8002464:	607b      	str	r3, [r7, #4]
 8002466:	e00c      	b.n	8002482 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	4a12      	ldr	r2, [pc, #72]	@ (80024bc <prvInitialiseTaskLists+0x60>)
 8002474:	4413      	add	r3, r2
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff fb64 	bl	8001b44 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3301      	adds	r3, #1
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2b06      	cmp	r3, #6
 8002486:	d9ef      	bls.n	8002468 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002488:	480d      	ldr	r0, [pc, #52]	@ (80024c0 <prvInitialiseTaskLists+0x64>)
 800248a:	f7ff fb5b 	bl	8001b44 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800248e:	480d      	ldr	r0, [pc, #52]	@ (80024c4 <prvInitialiseTaskLists+0x68>)
 8002490:	f7ff fb58 	bl	8001b44 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002494:	480c      	ldr	r0, [pc, #48]	@ (80024c8 <prvInitialiseTaskLists+0x6c>)
 8002496:	f7ff fb55 	bl	8001b44 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800249a:	480c      	ldr	r0, [pc, #48]	@ (80024cc <prvInitialiseTaskLists+0x70>)
 800249c:	f7ff fb52 	bl	8001b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80024a0:	480b      	ldr	r0, [pc, #44]	@ (80024d0 <prvInitialiseTaskLists+0x74>)
 80024a2:	f7ff fb4f 	bl	8001b44 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80024a6:	4b0b      	ldr	r3, [pc, #44]	@ (80024d4 <prvInitialiseTaskLists+0x78>)
 80024a8:	4a05      	ldr	r2, [pc, #20]	@ (80024c0 <prvInitialiseTaskLists+0x64>)
 80024aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80024ac:	4b0a      	ldr	r3, [pc, #40]	@ (80024d8 <prvInitialiseTaskLists+0x7c>)
 80024ae:	4a05      	ldr	r2, [pc, #20]	@ (80024c4 <prvInitialiseTaskLists+0x68>)
 80024b0:	601a      	str	r2, [r3, #0]
}
 80024b2:	bf00      	nop
 80024b4:	3708      	adds	r7, #8
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	200003a0 	.word	0x200003a0
 80024c0:	2000042c 	.word	0x2000042c
 80024c4:	20000440 	.word	0x20000440
 80024c8:	2000045c 	.word	0x2000045c
 80024cc:	20000470 	.word	0x20000470
 80024d0:	20000488 	.word	0x20000488
 80024d4:	20000454 	.word	0x20000454
 80024d8:	20000458 	.word	0x20000458

080024dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80024e2:	e019      	b.n	8002518 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80024e4:	f000 f98a 	bl	80027fc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80024e8:	4b10      	ldr	r3, [pc, #64]	@ (800252c <prvCheckTasksWaitingTermination+0x50>)
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3304      	adds	r3, #4
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fb73 	bl	8001be0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <prvCheckTasksWaitingTermination+0x54>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	3b01      	subs	r3, #1
 8002500:	4a0b      	ldr	r2, [pc, #44]	@ (8002530 <prvCheckTasksWaitingTermination+0x54>)
 8002502:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002504:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <prvCheckTasksWaitingTermination+0x58>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3b01      	subs	r3, #1
 800250a:	4a0a      	ldr	r2, [pc, #40]	@ (8002534 <prvCheckTasksWaitingTermination+0x58>)
 800250c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800250e:	f000 f9a5 	bl	800285c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f810 	bl	8002538 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002518:	4b06      	ldr	r3, [pc, #24]	@ (8002534 <prvCheckTasksWaitingTermination+0x58>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1e1      	bne.n	80024e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002520:	bf00      	nop
 8002522:	bf00      	nop
 8002524:	3708      	adds	r7, #8
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	20000470 	.word	0x20000470
 8002530:	2000049c 	.word	0x2000049c
 8002534:	20000484 	.word	0x20000484

08002538 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002546:	2b00      	cmp	r3, #0
 8002548:	d108      	bne.n	800255c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fb26 	bl	8002ba0 <vPortFree>
				vPortFree( pxTCB );
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f000 fb23 	bl	8002ba0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800255a:	e019      	b.n	8002590 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002562:	2b01      	cmp	r3, #1
 8002564:	d103      	bne.n	800256e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fb1a 	bl	8002ba0 <vPortFree>
	}
 800256c:	e010      	b.n	8002590 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002574:	2b02      	cmp	r3, #2
 8002576:	d00b      	beq.n	8002590 <prvDeleteTCB+0x58>
	__asm volatile
 8002578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800257c:	f383 8811 	msr	BASEPRI, r3
 8002580:	f3bf 8f6f 	isb	sy
 8002584:	f3bf 8f4f 	dsb	sy
 8002588:	60fb      	str	r3, [r7, #12]
}
 800258a:	bf00      	nop
 800258c:	bf00      	nop
 800258e:	e7fd      	b.n	800258c <prvDeleteTCB+0x54>
	}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}

08002598 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800259e:	4b0e      	ldr	r3, [pc, #56]	@ (80025d8 <prvResetNextTaskUnblockTime+0x40>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <prvResetNextTaskUnblockTime+0x14>
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <prvResetNextTaskUnblockTime+0x16>
 80025ac:	2300      	movs	r3, #0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d004      	beq.n	80025bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80025b2:	4b0a      	ldr	r3, [pc, #40]	@ (80025dc <prvResetNextTaskUnblockTime+0x44>)
 80025b4:	f04f 32ff 	mov.w	r2, #4294967295
 80025b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80025ba:	e008      	b.n	80025ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80025bc:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <prvResetNextTaskUnblockTime+0x40>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <prvResetNextTaskUnblockTime+0x44>)
 80025cc:	6013      	str	r3, [r2, #0]
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	20000454 	.word	0x20000454
 80025dc:	200004bc 	.word	0x200004bc

080025e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80025e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <xTaskGetSchedulerState+0x34>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d102      	bne.n	80025f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80025ee:	2301      	movs	r3, #1
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	e008      	b.n	8002606 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80025f4:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <xTaskGetSchedulerState+0x38>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d102      	bne.n	8002602 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80025fc:	2302      	movs	r3, #2
 80025fe:	607b      	str	r3, [r7, #4]
 8002600:	e001      	b.n	8002606 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002602:	2300      	movs	r3, #0
 8002604:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8002606:	687b      	ldr	r3, [r7, #4]
	}
 8002608:	4618      	mov	r0, r3
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	bc80      	pop	{r7}
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	200004a8 	.word	0x200004a8
 8002618:	200004c4 	.word	0x200004c4

0800261c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	60f8      	str	r0, [r7, #12]
 8002624:	60b9      	str	r1, [r7, #8]
 8002626:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	3b04      	subs	r3, #4
 800262c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	3b04      	subs	r3, #4
 800263a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f023 0201 	bic.w	r2, r3, #1
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	3b04      	subs	r3, #4
 800264a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800264c:	4a08      	ldr	r2, [pc, #32]	@ (8002670 <pxPortInitialiseStack+0x54>)
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3b14      	subs	r3, #20
 8002656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	3b20      	subs	r3, #32
 8002662:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002664:	68fb      	ldr	r3, [r7, #12]
}
 8002666:	4618      	mov	r0, r3
 8002668:	3714      	adds	r7, #20
 800266a:	46bd      	mov	sp, r7
 800266c:	bc80      	pop	{r7}
 800266e:	4770      	bx	lr
 8002670:	08002675 	.word	0x08002675

08002674 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800267a:	2300      	movs	r3, #0
 800267c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800267e:	4b12      	ldr	r3, [pc, #72]	@ (80026c8 <prvTaskExitError+0x54>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002686:	d00b      	beq.n	80026a0 <prvTaskExitError+0x2c>
	__asm volatile
 8002688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800268c:	f383 8811 	msr	BASEPRI, r3
 8002690:	f3bf 8f6f 	isb	sy
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	60fb      	str	r3, [r7, #12]
}
 800269a:	bf00      	nop
 800269c:	bf00      	nop
 800269e:	e7fd      	b.n	800269c <prvTaskExitError+0x28>
	__asm volatile
 80026a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026a4:	f383 8811 	msr	BASEPRI, r3
 80026a8:	f3bf 8f6f 	isb	sy
 80026ac:	f3bf 8f4f 	dsb	sy
 80026b0:	60bb      	str	r3, [r7, #8]
}
 80026b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80026b4:	bf00      	nop
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d0fc      	beq.n	80026b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	20000010 	.word	0x20000010
 80026cc:	00000000 	.word	0x00000000

080026d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80026d0:	4b07      	ldr	r3, [pc, #28]	@ (80026f0 <pxCurrentTCBConst2>)
 80026d2:	6819      	ldr	r1, [r3, #0]
 80026d4:	6808      	ldr	r0, [r1, #0]
 80026d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80026da:	f380 8809 	msr	PSP, r0
 80026de:	f3bf 8f6f 	isb	sy
 80026e2:	f04f 0000 	mov.w	r0, #0
 80026e6:	f380 8811 	msr	BASEPRI, r0
 80026ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80026ee:	4770      	bx	lr

080026f0 <pxCurrentTCBConst2>:
 80026f0:	2000039c 	.word	0x2000039c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop

080026f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80026f8:	4806      	ldr	r0, [pc, #24]	@ (8002714 <prvPortStartFirstTask+0x1c>)
 80026fa:	6800      	ldr	r0, [r0, #0]
 80026fc:	6800      	ldr	r0, [r0, #0]
 80026fe:	f380 8808 	msr	MSP, r0
 8002702:	b662      	cpsie	i
 8002704:	b661      	cpsie	f
 8002706:	f3bf 8f4f 	dsb	sy
 800270a:	f3bf 8f6f 	isb	sy
 800270e:	df00      	svc	0
 8002710:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8002712:	bf00      	nop
 8002714:	e000ed08 	.word	0xe000ed08

08002718 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800271e:	4b32      	ldr	r3, [pc, #200]	@ (80027e8 <xPortStartScheduler+0xd0>)
 8002720:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	b2db      	uxtb	r3, r3
 8002728:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	22ff      	movs	r2, #255	@ 0xff
 800272e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	b2db      	uxtb	r3, r3
 8002736:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002738:	78fb      	ldrb	r3, [r7, #3]
 800273a:	b2db      	uxtb	r3, r3
 800273c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4b2a      	ldr	r3, [pc, #168]	@ (80027ec <xPortStartScheduler+0xd4>)
 8002744:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002746:	4b2a      	ldr	r3, [pc, #168]	@ (80027f0 <xPortStartScheduler+0xd8>)
 8002748:	2207      	movs	r2, #7
 800274a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800274c:	e009      	b.n	8002762 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800274e:	4b28      	ldr	r3, [pc, #160]	@ (80027f0 <xPortStartScheduler+0xd8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3b01      	subs	r3, #1
 8002754:	4a26      	ldr	r2, [pc, #152]	@ (80027f0 <xPortStartScheduler+0xd8>)
 8002756:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002758:	78fb      	ldrb	r3, [r7, #3]
 800275a:	b2db      	uxtb	r3, r3
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	b2db      	uxtb	r3, r3
 8002766:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800276a:	2b80      	cmp	r3, #128	@ 0x80
 800276c:	d0ef      	beq.n	800274e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <xPortStartScheduler+0xd8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f1c3 0307 	rsb	r3, r3, #7
 8002776:	2b04      	cmp	r3, #4
 8002778:	d00b      	beq.n	8002792 <xPortStartScheduler+0x7a>
	__asm volatile
 800277a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	60bb      	str	r3, [r7, #8]
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	e7fd      	b.n	800278e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002792:	4b17      	ldr	r3, [pc, #92]	@ (80027f0 <xPortStartScheduler+0xd8>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	021b      	lsls	r3, r3, #8
 8002798:	4a15      	ldr	r2, [pc, #84]	@ (80027f0 <xPortStartScheduler+0xd8>)
 800279a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800279c:	4b14      	ldr	r3, [pc, #80]	@ (80027f0 <xPortStartScheduler+0xd8>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80027a4:	4a12      	ldr	r2, [pc, #72]	@ (80027f0 <xPortStartScheduler+0xd8>)
 80027a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80027b0:	4b10      	ldr	r3, [pc, #64]	@ (80027f4 <xPortStartScheduler+0xdc>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0f      	ldr	r2, [pc, #60]	@ (80027f4 <xPortStartScheduler+0xdc>)
 80027b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80027bc:	4b0d      	ldr	r3, [pc, #52]	@ (80027f4 <xPortStartScheduler+0xdc>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0c      	ldr	r2, [pc, #48]	@ (80027f4 <xPortStartScheduler+0xdc>)
 80027c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80027c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80027c8:	f000 f8c0 	bl	800294c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80027cc:	4b0a      	ldr	r3, [pc, #40]	@ (80027f8 <xPortStartScheduler+0xe0>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80027d2:	f7ff ff91 	bl	80026f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80027d6:	f7ff fdbf 	bl	8002358 <vTaskSwitchContext>
	prvTaskExitError();
 80027da:	f7ff ff4b 	bl	8002674 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	e000e400 	.word	0xe000e400
 80027ec:	200004c8 	.word	0x200004c8
 80027f0:	200004cc 	.word	0x200004cc
 80027f4:	e000ed20 	.word	0xe000ed20
 80027f8:	20000010 	.word	0x20000010

080027fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
	__asm volatile
 8002802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002806:	f383 8811 	msr	BASEPRI, r3
 800280a:	f3bf 8f6f 	isb	sy
 800280e:	f3bf 8f4f 	dsb	sy
 8002812:	607b      	str	r3, [r7, #4]
}
 8002814:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002816:	4b0f      	ldr	r3, [pc, #60]	@ (8002854 <vPortEnterCritical+0x58>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3301      	adds	r3, #1
 800281c:	4a0d      	ldr	r2, [pc, #52]	@ (8002854 <vPortEnterCritical+0x58>)
 800281e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002820:	4b0c      	ldr	r3, [pc, #48]	@ (8002854 <vPortEnterCritical+0x58>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b01      	cmp	r3, #1
 8002826:	d110      	bne.n	800284a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002828:	4b0b      	ldr	r3, [pc, #44]	@ (8002858 <vPortEnterCritical+0x5c>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b00      	cmp	r3, #0
 8002830:	d00b      	beq.n	800284a <vPortEnterCritical+0x4e>
	__asm volatile
 8002832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002836:	f383 8811 	msr	BASEPRI, r3
 800283a:	f3bf 8f6f 	isb	sy
 800283e:	f3bf 8f4f 	dsb	sy
 8002842:	603b      	str	r3, [r7, #0]
}
 8002844:	bf00      	nop
 8002846:	bf00      	nop
 8002848:	e7fd      	b.n	8002846 <vPortEnterCritical+0x4a>
	}
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	20000010 	.word	0x20000010
 8002858:	e000ed04 	.word	0xe000ed04

0800285c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002862:	4b12      	ldr	r3, [pc, #72]	@ (80028ac <vPortExitCritical+0x50>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10b      	bne.n	8002882 <vPortExitCritical+0x26>
	__asm volatile
 800286a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800286e:	f383 8811 	msr	BASEPRI, r3
 8002872:	f3bf 8f6f 	isb	sy
 8002876:	f3bf 8f4f 	dsb	sy
 800287a:	607b      	str	r3, [r7, #4]
}
 800287c:	bf00      	nop
 800287e:	bf00      	nop
 8002880:	e7fd      	b.n	800287e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002882:	4b0a      	ldr	r3, [pc, #40]	@ (80028ac <vPortExitCritical+0x50>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	3b01      	subs	r3, #1
 8002888:	4a08      	ldr	r2, [pc, #32]	@ (80028ac <vPortExitCritical+0x50>)
 800288a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800288c:	4b07      	ldr	r3, [pc, #28]	@ (80028ac <vPortExitCritical+0x50>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d105      	bne.n	80028a0 <vPortExitCritical+0x44>
 8002894:	2300      	movs	r3, #0
 8002896:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800289e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bc80      	pop	{r7}
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000010 	.word	0x20000010

080028b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80028b0:	f3ef 8009 	mrs	r0, PSP
 80028b4:	f3bf 8f6f 	isb	sy
 80028b8:	4b0d      	ldr	r3, [pc, #52]	@ (80028f0 <pxCurrentTCBConst>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028c0:	6010      	str	r0, [r2, #0]
 80028c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80028c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80028ca:	f380 8811 	msr	BASEPRI, r0
 80028ce:	f7ff fd43 	bl	8002358 <vTaskSwitchContext>
 80028d2:	f04f 0000 	mov.w	r0, #0
 80028d6:	f380 8811 	msr	BASEPRI, r0
 80028da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80028de:	6819      	ldr	r1, [r3, #0]
 80028e0:	6808      	ldr	r0, [r1, #0]
 80028e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80028e6:	f380 8809 	msr	PSP, r0
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	4770      	bx	lr

080028f0 <pxCurrentTCBConst>:
 80028f0:	2000039c 	.word	0x2000039c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80028f4:	bf00      	nop
 80028f6:	bf00      	nop

080028f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
	__asm volatile
 80028fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002902:	f383 8811 	msr	BASEPRI, r3
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	f3bf 8f4f 	dsb	sy
 800290e:	607b      	str	r3, [r7, #4]
}
 8002910:	bf00      	nop
	/* The SysTick runs at the lowest interrupt priority, so when this interrupt
	executes all interrupts must be unmasked.  There is therefore no need to
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
 8002912:	f001 fc11 	bl	8004138 <SEGGER_SYSVIEW_RecordEnterISR>
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002916:	f7ff fc5d 	bl	80021d4 <xTaskIncrementTick>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d006      	beq.n	800292e <xPortSysTickHandler+0x36>
		{
      traceISR_EXIT_TO_SCHEDULER();
 8002920:	f001 fc68 	bl	80041f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002924:	4b08      	ldr	r3, [pc, #32]	@ (8002948 <xPortSysTickHandler+0x50>)
 8002926:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800292a:	601a      	str	r2, [r3, #0]
 800292c:	e001      	b.n	8002932 <xPortSysTickHandler+0x3a>
		}
		else
		{
			traceISR_EXIT();
 800292e:	f001 fc45 	bl	80041bc <SEGGER_SYSVIEW_RecordExitISR>
 8002932:	2300      	movs	r3, #0
 8002934:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f383 8811 	msr	BASEPRI, r3
}
 800293c:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800293e:	bf00      	nop
 8002940:	3708      	adds	r7, #8
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	e000ed04 	.word	0xe000ed04

0800294c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002950:	4b0a      	ldr	r3, [pc, #40]	@ (800297c <vPortSetupTimerInterrupt+0x30>)
 8002952:	2200      	movs	r2, #0
 8002954:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002956:	4b0a      	ldr	r3, [pc, #40]	@ (8002980 <vPortSetupTimerInterrupt+0x34>)
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800295c:	4b09      	ldr	r3, [pc, #36]	@ (8002984 <vPortSetupTimerInterrupt+0x38>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a09      	ldr	r2, [pc, #36]	@ (8002988 <vPortSetupTimerInterrupt+0x3c>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	4a08      	ldr	r2, [pc, #32]	@ (800298c <vPortSetupTimerInterrupt+0x40>)
 800296a:	3b01      	subs	r3, #1
 800296c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800296e:	4b03      	ldr	r3, [pc, #12]	@ (800297c <vPortSetupTimerInterrupt+0x30>)
 8002970:	2207      	movs	r2, #7
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	e000e010 	.word	0xe000e010
 8002980:	e000e018 	.word	0xe000e018
 8002984:	20000004 	.word	0x20000004
 8002988:	10624dd3 	.word	0x10624dd3
 800298c:	e000e014 	.word	0xe000e014

08002990 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8002990:	b480      	push	{r7}
 8002992:	b085      	sub	sp, #20
 8002994:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8002996:	f3ef 8305 	mrs	r3, IPSR
 800299a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2b0f      	cmp	r3, #15
 80029a0:	d915      	bls.n	80029ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80029a2:	4a17      	ldr	r2, [pc, #92]	@ (8002a00 <vPortValidateInterruptPriority+0x70>)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	4413      	add	r3, r2
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80029ac:	4b15      	ldr	r3, [pc, #84]	@ (8002a04 <vPortValidateInterruptPriority+0x74>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	7afa      	ldrb	r2, [r7, #11]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d20b      	bcs.n	80029ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	607b      	str	r3, [r7, #4]
}
 80029c8:	bf00      	nop
 80029ca:	bf00      	nop
 80029cc:	e7fd      	b.n	80029ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80029ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002a08 <vPortValidateInterruptPriority+0x78>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80029d6:	4b0d      	ldr	r3, [pc, #52]	@ (8002a0c <vPortValidateInterruptPriority+0x7c>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d90b      	bls.n	80029f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80029de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029e2:	f383 8811 	msr	BASEPRI, r3
 80029e6:	f3bf 8f6f 	isb	sy
 80029ea:	f3bf 8f4f 	dsb	sy
 80029ee:	603b      	str	r3, [r7, #0]
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	e7fd      	b.n	80029f2 <vPortValidateInterruptPriority+0x62>
	}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	e000e3f0 	.word	0xe000e3f0
 8002a04:	200004c8 	.word	0x200004c8
 8002a08:	e000ed0c 	.word	0xe000ed0c
 8002a0c:	200004cc 	.word	0x200004cc

08002a10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	@ 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002a1c:	f7ff fb18 	bl	8002050 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002a20:	4b5a      	ldr	r3, [pc, #360]	@ (8002b8c <pvPortMalloc+0x17c>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002a28:	f000 f916 	bl	8002c58 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002a2c:	4b58      	ldr	r3, [pc, #352]	@ (8002b90 <pvPortMalloc+0x180>)
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4013      	ands	r3, r2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f040 8090 	bne.w	8002b5a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d01e      	beq.n	8002a7e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8002a40:	2208      	movs	r2, #8
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4413      	add	r3, r2
 8002a46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d015      	beq.n	8002a7e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	f023 0307 	bic.w	r3, r3, #7
 8002a58:	3308      	adds	r3, #8
 8002a5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <pvPortMalloc+0x6e>
	__asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	617b      	str	r3, [r7, #20]
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	e7fd      	b.n	8002a7a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d06a      	beq.n	8002b5a <pvPortMalloc+0x14a>
 8002a84:	4b43      	ldr	r3, [pc, #268]	@ (8002b94 <pvPortMalloc+0x184>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d865      	bhi.n	8002b5a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002a8e:	4b42      	ldr	r3, [pc, #264]	@ (8002b98 <pvPortMalloc+0x188>)
 8002a90:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002a92:	4b41      	ldr	r3, [pc, #260]	@ (8002b98 <pvPortMalloc+0x188>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002a98:	e004      	b.n	8002aa4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8002a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d903      	bls.n	8002ab6 <pvPortMalloc+0xa6>
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f1      	bne.n	8002a9a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002ab6:	4b35      	ldr	r3, [pc, #212]	@ (8002b8c <pvPortMalloc+0x17c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d04c      	beq.n	8002b5a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002ac0:	6a3b      	ldr	r3, [r7, #32]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2208      	movs	r2, #8
 8002ac6:	4413      	add	r3, r2
 8002ac8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	6a3b      	ldr	r3, [r7, #32]
 8002ad0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	1ad2      	subs	r2, r2, r3
 8002ada:	2308      	movs	r3, #8
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d920      	bls.n	8002b24 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002ae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002aea:	69bb      	ldr	r3, [r7, #24]
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d00b      	beq.n	8002b0c <pvPortMalloc+0xfc>
	__asm volatile
 8002af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	613b      	str	r3, [r7, #16]
}
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0e:	685a      	ldr	r2, [r3, #4]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	1ad2      	subs	r2, r2, r3
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002b1e:	69b8      	ldr	r0, [r7, #24]
 8002b20:	f000 f8fc 	bl	8002d1c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	@ (8002b94 <pvPortMalloc+0x184>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	4a19      	ldr	r2, [pc, #100]	@ (8002b94 <pvPortMalloc+0x184>)
 8002b30:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002b32:	4b18      	ldr	r3, [pc, #96]	@ (8002b94 <pvPortMalloc+0x184>)
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	4b19      	ldr	r3, [pc, #100]	@ (8002b9c <pvPortMalloc+0x18c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d203      	bcs.n	8002b46 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002b3e:	4b15      	ldr	r3, [pc, #84]	@ (8002b94 <pvPortMalloc+0x184>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a16      	ldr	r2, [pc, #88]	@ (8002b9c <pvPortMalloc+0x18c>)
 8002b44:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	4b11      	ldr	r3, [pc, #68]	@ (8002b90 <pvPortMalloc+0x180>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002b5a:	f7ff fa87 	bl	800206c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	f003 0307 	and.w	r3, r3, #7
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00b      	beq.n	8002b80 <pvPortMalloc+0x170>
	__asm volatile
 8002b68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b6c:	f383 8811 	msr	BASEPRI, r3
 8002b70:	f3bf 8f6f 	isb	sy
 8002b74:	f3bf 8f4f 	dsb	sy
 8002b78:	60fb      	str	r3, [r7, #12]
}
 8002b7a:	bf00      	nop
 8002b7c:	bf00      	nop
 8002b7e:	e7fd      	b.n	8002b7c <pvPortMalloc+0x16c>
	return pvReturn;
 8002b80:	69fb      	ldr	r3, [r7, #28]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3728      	adds	r7, #40	@ 0x28
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	200010d8 	.word	0x200010d8
 8002b90:	200010e4 	.word	0x200010e4
 8002b94:	200010dc 	.word	0x200010dc
 8002b98:	200010d0 	.word	0x200010d0
 8002b9c:	200010e0 	.word	0x200010e0

08002ba0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b086      	sub	sp, #24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d04a      	beq.n	8002c48 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002bb2:	2308      	movs	r3, #8
 8002bb4:	425b      	negs	r3, r3
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4413      	add	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	685a      	ldr	r2, [r3, #4]
 8002bc4:	4b22      	ldr	r3, [pc, #136]	@ (8002c50 <vPortFree+0xb0>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10b      	bne.n	8002be6 <vPortFree+0x46>
	__asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	60fb      	str	r3, [r7, #12]
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	e7fd      	b.n	8002be2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <vPortFree+0x66>
	__asm volatile
 8002bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bf2:	f383 8811 	msr	BASEPRI, r3
 8002bf6:	f3bf 8f6f 	isb	sy
 8002bfa:	f3bf 8f4f 	dsb	sy
 8002bfe:	60bb      	str	r3, [r7, #8]
}
 8002c00:	bf00      	nop
 8002c02:	bf00      	nop
 8002c04:	e7fd      	b.n	8002c02 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	4b11      	ldr	r3, [pc, #68]	@ (8002c50 <vPortFree+0xb0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d019      	beq.n	8002c48 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d115      	bne.n	8002c48 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	685a      	ldr	r2, [r3, #4]
 8002c20:	4b0b      	ldr	r3, [pc, #44]	@ (8002c50 <vPortFree+0xb0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	401a      	ands	r2, r3
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002c2c:	f7ff fa10 	bl	8002050 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	4b07      	ldr	r3, [pc, #28]	@ (8002c54 <vPortFree+0xb4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4413      	add	r3, r2
 8002c3a:	4a06      	ldr	r2, [pc, #24]	@ (8002c54 <vPortFree+0xb4>)
 8002c3c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002c3e:	6938      	ldr	r0, [r7, #16]
 8002c40:	f000 f86c 	bl	8002d1c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002c44:	f7ff fa12 	bl	800206c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002c48:	bf00      	nop
 8002c4a:	3718      	adds	r7, #24
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	200010e4 	.word	0x200010e4
 8002c54:	200010dc 	.word	0x200010dc

08002c58 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002c5e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002c62:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002c64:	4b27      	ldr	r3, [pc, #156]	@ (8002d04 <prvHeapInit+0xac>)
 8002c66:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f003 0307 	and.w	r3, r3, #7
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00c      	beq.n	8002c8c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3307      	adds	r3, #7
 8002c76:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0307 	bic.w	r3, r3, #7
 8002c7e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	4a1f      	ldr	r2, [pc, #124]	@ (8002d04 <prvHeapInit+0xac>)
 8002c88:	4413      	add	r3, r2
 8002c8a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002c90:	4a1d      	ldr	r2, [pc, #116]	@ (8002d08 <prvHeapInit+0xb0>)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	@ (8002d08 <prvHeapInit+0xb0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002ca4:	2208      	movs	r2, #8
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1a9b      	subs	r3, r3, r2
 8002caa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0307 	bic.w	r3, r3, #7
 8002cb2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4a15      	ldr	r2, [pc, #84]	@ (8002d0c <prvHeapInit+0xb4>)
 8002cb8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002cba:	4b14      	ldr	r3, [pc, #80]	@ (8002d0c <prvHeapInit+0xb4>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002cc2:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <prvHeapInit+0xb4>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68fa      	ldr	r2, [r7, #12]
 8002cd2:	1ad2      	subs	r2, r2, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8002d0c <prvHeapInit+0xb4>)
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	@ (8002d10 <prvHeapInit+0xb8>)
 8002ce6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	4a09      	ldr	r2, [pc, #36]	@ (8002d14 <prvHeapInit+0xbc>)
 8002cee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002cf0:	4b09      	ldr	r3, [pc, #36]	@ (8002d18 <prvHeapInit+0xc0>)
 8002cf2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8002cf6:	601a      	str	r2, [r3, #0]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	200004d0 	.word	0x200004d0
 8002d08:	200010d0 	.word	0x200010d0
 8002d0c:	200010d8 	.word	0x200010d8
 8002d10:	200010e0 	.word	0x200010e0
 8002d14:	200010dc 	.word	0x200010dc
 8002d18:	200010e4 	.word	0x200010e4

08002d1c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002d24:	4b27      	ldr	r3, [pc, #156]	@ (8002dc4 <prvInsertBlockIntoFreeList+0xa8>)
 8002d26:	60fb      	str	r3, [r7, #12]
 8002d28:	e002      	b.n	8002d30 <prvInsertBlockIntoFreeList+0x14>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	60fb      	str	r3, [r7, #12]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d8f7      	bhi.n	8002d2a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	68ba      	ldr	r2, [r7, #8]
 8002d44:	4413      	add	r3, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d108      	bne.n	8002d5e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	685a      	ldr	r2, [r3, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	441a      	add	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	441a      	add	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d118      	bne.n	8002da4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4b14      	ldr	r3, [pc, #80]	@ (8002dc8 <prvInsertBlockIntoFreeList+0xac>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d00d      	beq.n	8002d9a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	441a      	add	r2, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e008      	b.n	8002dac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc8 <prvInsertBlockIntoFreeList+0xac>)
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e003      	b.n	8002dac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d002      	beq.n	8002dba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002dba:	bf00      	nop
 8002dbc:	3714      	adds	r7, #20
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr
 8002dc4:	200010d0 	.word	0x200010d0
 8002dc8:	200010d8 	.word	0x200010d8

08002dcc <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002dd0:	4803      	ldr	r0, [pc, #12]	@ (8002de0 <_cbSendSystemDesc+0x14>)
 8002dd2:	f001 f95b 	bl	800408c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002dd6:	4803      	ldr	r0, [pc, #12]	@ (8002de4 <_cbSendSystemDesc+0x18>)
 8002dd8:	f001 f958 	bl	800408c <SEGGER_SYSVIEW_SendSysDesc>
}
 8002ddc:	bf00      	nop
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	08004738 	.word	0x08004738
 8002de4:	08004770 	.word	0x08004770

08002de8 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002dec:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <SEGGER_SYSVIEW_Conf+0x20>)
 8002dee:	6818      	ldr	r0, [r3, #0]
 8002df0:	4b05      	ldr	r3, [pc, #20]	@ (8002e08 <SEGGER_SYSVIEW_Conf+0x20>)
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <SEGGER_SYSVIEW_Conf+0x24>)
 8002df6:	4a06      	ldr	r2, [pc, #24]	@ (8002e10 <SEGGER_SYSVIEW_Conf+0x28>)
 8002df8:	f000 fdd0 	bl	800399c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002dfc:	f04f 5000 	mov.w	r0, #536870912	@ 0x20000000
 8002e00:	f000 fe10 	bl	8003a24 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002e04:	bf00      	nop
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000004 	.word	0x20000004
 8002e0c:	08002dcd 	.word	0x08002dcd
 8002e10:	08004820 	.word	0x08004820

08002e14 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e16:	b085      	sub	sp, #20
 8002e18:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	607b      	str	r3, [r7, #4]
 8002e1e:	e033      	b.n	8002e88 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002e20:	491e      	ldr	r1, [pc, #120]	@ (8002e9c <_cbSendTaskList+0x88>)
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	440b      	add	r3, r1
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	491a      	ldr	r1, [pc, #104]	@ (8002e9c <_cbSendTaskList+0x88>)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4413      	add	r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3304      	adds	r3, #4
 8002e40:	6819      	ldr	r1, [r3, #0]
 8002e42:	4c16      	ldr	r4, [pc, #88]	@ (8002e9c <_cbSendTaskList+0x88>)
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4413      	add	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4423      	add	r3, r4
 8002e50:	3308      	adds	r3, #8
 8002e52:	681c      	ldr	r4, [r3, #0]
 8002e54:	4d11      	ldr	r5, [pc, #68]	@ (8002e9c <_cbSendTaskList+0x88>)
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	4613      	mov	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4413      	add	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	442b      	add	r3, r5
 8002e62:	330c      	adds	r3, #12
 8002e64:	681d      	ldr	r5, [r3, #0]
 8002e66:	4e0d      	ldr	r6, [pc, #52]	@ (8002e9c <_cbSendTaskList+0x88>)
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	4433      	add	r3, r6
 8002e74:	3310      	adds	r3, #16
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	462b      	mov	r3, r5
 8002e7c:	4622      	mov	r2, r4
 8002e7e:	f000 f8bd 	bl	8002ffc <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3301      	adds	r3, #1
 8002e86:	607b      	str	r3, [r7, #4]
 8002e88:	4b05      	ldr	r3, [pc, #20]	@ (8002ea0 <_cbSendTaskList+0x8c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d3c6      	bcc.n	8002e20 <_cbSendTaskList+0xc>
  }
}
 8002e92:	bf00      	nop
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e9c:	200010e8 	.word	0x200010e8
 8002ea0:	20001188 	.word	0x20001188

08002ea4 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002ea4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002eac:	f7ff f980 	bl	80021b0 <xTaskGetTickCountFromISR>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	469a      	mov	sl, r3
 8002eb6:	4693      	mov	fp, r2
 8002eb8:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002ebc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	f04f 0a00 	mov.w	sl, #0
 8002ec8:	f04f 0b00 	mov.w	fp, #0
 8002ecc:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002ed0:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002ed4:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002ed8:	4652      	mov	r2, sl
 8002eda:	465b      	mov	r3, fp
 8002edc:	1a14      	subs	r4, r2, r0
 8002ede:	eb63 0501 	sbc.w	r5, r3, r1
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	00ab      	lsls	r3, r5, #2
 8002eec:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002ef0:	00a2      	lsls	r2, r4, #2
 8002ef2:	4614      	mov	r4, r2
 8002ef4:	461d      	mov	r5, r3
 8002ef6:	eb14 0800 	adds.w	r8, r4, r0
 8002efa:	eb45 0901 	adc.w	r9, r5, r1
 8002efe:	f04f 0200 	mov.w	r2, #0
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f12:	4690      	mov	r8, r2
 8002f14:	4699      	mov	r9, r3
 8002f16:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002f1a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002f2c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b086      	sub	sp, #24
 8002f30:	af02      	add	r7, sp, #8
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002f3a:	2205      	movs	r2, #5
 8002f3c:	492b      	ldr	r1, [pc, #172]	@ (8002fec <SYSVIEW_AddTask+0xc0>)
 8002f3e:	68b8      	ldr	r0, [r7, #8]
 8002f40:	f001 fb98 	bl	8004674 <memcmp>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d04b      	beq.n	8002fe2 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002f4a:	4b29      	ldr	r3, [pc, #164]	@ (8002ff0 <SYSVIEW_AddTask+0xc4>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2b07      	cmp	r3, #7
 8002f50:	d903      	bls.n	8002f5a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002f52:	4828      	ldr	r0, [pc, #160]	@ (8002ff4 <SYSVIEW_AddTask+0xc8>)
 8002f54:	f001 fb32 	bl	80045bc <SEGGER_SYSVIEW_Warn>
    return;
 8002f58:	e044      	b.n	8002fe4 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002f5a:	4b25      	ldr	r3, [pc, #148]	@ (8002ff0 <SYSVIEW_AddTask+0xc4>)
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	4926      	ldr	r1, [pc, #152]	@ (8002ff8 <SYSVIEW_AddTask+0xcc>)
 8002f60:	4613      	mov	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002f6e:	4b20      	ldr	r3, [pc, #128]	@ (8002ff0 <SYSVIEW_AddTask+0xc4>)
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	4921      	ldr	r1, [pc, #132]	@ (8002ff8 <SYSVIEW_AddTask+0xcc>)
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3304      	adds	r3, #4
 8002f80:	68ba      	ldr	r2, [r7, #8]
 8002f82:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002f84:	4b1a      	ldr	r3, [pc, #104]	@ (8002ff0 <SYSVIEW_AddTask+0xc4>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	491b      	ldr	r1, [pc, #108]	@ (8002ff8 <SYSVIEW_AddTask+0xcc>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	4413      	add	r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	3308      	adds	r3, #8
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002f9a:	4b15      	ldr	r3, [pc, #84]	@ (8002ff0 <SYSVIEW_AddTask+0xc4>)
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4916      	ldr	r1, [pc, #88]	@ (8002ff8 <SYSVIEW_AddTask+0xcc>)
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4413      	add	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	440b      	add	r3, r1
 8002faa:	330c      	adds	r3, #12
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff0 <SYSVIEW_AddTask+0xc4>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	4910      	ldr	r1, [pc, #64]	@ (8002ff8 <SYSVIEW_AddTask+0xcc>)
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3310      	adds	r3, #16
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002fc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff0 <SYSVIEW_AddTask+0xc4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	4a08      	ldr	r2, [pc, #32]	@ (8002ff0 <SYSVIEW_AddTask+0xc4>)
 8002fce:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	9300      	str	r3, [sp, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	68b9      	ldr	r1, [r7, #8]
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 f80e 	bl	8002ffc <SYSVIEW_SendTaskInfo>
 8002fe0:	e000      	b.n	8002fe4 <SYSVIEW_AddTask+0xb8>
    return;
 8002fe2:	bf00      	nop

}
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	08004780 	.word	0x08004780
 8002ff0:	20001188 	.word	0x20001188
 8002ff4:	08004788 	.word	0x08004788
 8002ff8:	200010e8 	.word	0x200010e8

08002ffc <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b08a      	sub	sp, #40	@ 0x28
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	2214      	movs	r2, #20
 8003010:	2100      	movs	r1, #0
 8003012:	4618      	mov	r0, r3
 8003014:	f001 fb3e 	bl	8004694 <memset>
  TaskInfo.TaskID     = TaskID;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8003028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800302c:	f107 0314 	add.w	r3, r7, #20
 8003030:	4618      	mov	r0, r3
 8003032:	f000 ff33 	bl	8003e9c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8003036:	bf00      	nop
 8003038:	3728      	adds	r7, #40	@ 0x28
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
	...

08003040 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 8003040:	b580      	push	{r7, lr}
 8003042:	b082      	sub	sp, #8
 8003044:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8003046:	4b25      	ldr	r3, [pc, #148]	@ (80030dc <_DoInit+0x9c>)
 8003048:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800304a:	22a8      	movs	r2, #168	@ 0xa8
 800304c:	2100      	movs	r1, #0
 800304e:	6838      	ldr	r0, [r7, #0]
 8003050:	f001 fb20 	bl	8004694 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	2203      	movs	r2, #3
 8003058:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2203      	movs	r2, #3
 800305e:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4a1f      	ldr	r2, [pc, #124]	@ (80030e0 <_DoInit+0xa0>)
 8003064:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	4a1e      	ldr	r2, [pc, #120]	@ (80030e4 <_DoInit+0xa4>)
 800306a:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003072:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2200      	movs	r2, #0
 800307e:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	2200      	movs	r2, #0
 8003084:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	4a15      	ldr	r2, [pc, #84]	@ (80030e0 <_DoInit+0xa0>)
 800308a:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	4a16      	ldr	r2, [pc, #88]	@ (80030e8 <_DoInit+0xa8>)
 8003090:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2210      	movs	r2, #16
 8003096:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	2200      	movs	r2, #0
 800309c:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2200      	movs	r2, #0
 80030a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	2200      	movs	r2, #0
 80030a8:	675a      	str	r2, [r3, #116]	@ 0x74
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80030aa:	2300      	movs	r3, #0
 80030ac:	607b      	str	r3, [r7, #4]
 80030ae:	e00c      	b.n	80030ca <_DoInit+0x8a>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f1c3 030f 	rsb	r3, r3, #15
 80030b6:	4a0d      	ldr	r2, [pc, #52]	@ (80030ec <_DoInit+0xac>)
 80030b8:	5cd1      	ldrb	r1, [r2, r3]
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4413      	add	r3, r2
 80030c0:	460a      	mov	r2, r1
 80030c2:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3301      	adds	r3, #1
 80030c8:	607b      	str	r3, [r7, #4]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b0f      	cmp	r3, #15
 80030ce:	d9ef      	bls.n	80030b0 <_DoInit+0x70>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3708      	adds	r7, #8
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	2000118c 	.word	0x2000118c
 80030e0:	080047d8 	.word	0x080047d8
 80030e4:	20001234 	.word	0x20001234
 80030e8:	20001634 	.word	0x20001634
 80030ec:	08004828 	.word	0x08004828

080030f0 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b08c      	sub	sp, #48	@ 0x30
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	60b9      	str	r1, [r7, #8]
 80030fa:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80030fc:	4b3e      	ldr	r3, [pc, #248]	@ (80031f8 <SEGGER_RTT_ReadNoLock+0x108>)
 80030fe:	623b      	str	r3, [r7, #32]
 8003100:	6a3b      	ldr	r3, [r7, #32]
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b53      	cmp	r3, #83	@ 0x53
 8003108:	d001      	beq.n	800310e <SEGGER_RTT_ReadNoLock+0x1e>
 800310a:	f7ff ff99 	bl	8003040 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	00db      	lsls	r3, r3, #3
 8003118:	3360      	adds	r3, #96	@ 0x60
 800311a:	4a37      	ldr	r2, [pc, #220]	@ (80031f8 <SEGGER_RTT_ReadNoLock+0x108>)
 800311c:	4413      	add	r3, r2
 800311e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8003130:	2300      	movs	r3, #0
 8003132:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003134:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	429a      	cmp	r2, r3
 800313a:	d92b      	bls.n	8003194 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003146:	697a      	ldr	r2, [r7, #20]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4293      	cmp	r3, r2
 800314c:	bf28      	it	cs
 800314e:	4613      	movcs	r3, r2
 8003150:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	685a      	ldr	r2, [r3, #4]
 8003156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003158:	4413      	add	r3, r2
 800315a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	6939      	ldr	r1, [r7, #16]
 8003160:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003162:	f001 fac3 	bl	80046ec <memcpy>
    NumBytesRead += NumBytesRem;
 8003166:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	4413      	add	r3, r2
 800316c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800316e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	4413      	add	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800317e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	4413      	add	r3, r2
 8003184:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800318c:	429a      	cmp	r2, r3
 800318e:	d101      	bne.n	8003194 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8003190:	2300      	movs	r3, #0
 8003192:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4293      	cmp	r3, r2
 80031a2:	bf28      	it	cs
 80031a4:	4613      	movcs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d019      	beq.n	80031e2 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b4:	4413      	add	r3, r2
 80031b6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	6939      	ldr	r1, [r7, #16]
 80031bc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80031be:	f001 fa95 	bl	80046ec <memcpy>
    NumBytesRead += NumBytesRem;
 80031c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	4413      	add	r3, r2
 80031c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80031ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4413      	add	r3, r2
 80031d0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80031da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	4413      	add	r3, r2
 80031e0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80031e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031ec:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80031ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3730      	adds	r7, #48	@ 0x30
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}
 80031f8:	2000118c 	.word	0x2000118c

080031fc <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b08c      	sub	sp, #48	@ 0x30
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  //   4) RdOff >  WrOff => Space is sufficient
  //   5) RdOff >  WrOff => No space in buf
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	4613      	mov	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4413      	add	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4a35      	ldr	r2, [pc, #212]	@ (80032f0 <SEGGER_RTT_WriteSkipNoLock+0xf4>)
 800321a:	4413      	add	r3, r2
 800321c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RdOff = pRing->RdOff;
 800321e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003220:	691b      	ldr	r3, [r3, #16]
 8003222:	627b      	str	r3, [r7, #36]	@ 0x24
  WrOff = pRing->WrOff;
 8003224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	623b      	str	r3, [r7, #32]
  pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800322a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	4413      	add	r3, r2
 8003232:	61fb      	str	r3, [r7, #28]
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 8003234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	429a      	cmp	r2, r3
 800323a:	d83e      	bhi.n	80032ba <SEGGER_RTT_WriteSkipNoLock+0xbe>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	6a3b      	ldr	r3, [r7, #32]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	3b01      	subs	r3, #1
 8003246:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 1)?
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	429a      	cmp	r2, r3
 800324e:	d30b      	bcc.n	8003268 <SEGGER_RTT_WriteSkipNoLock+0x6c>
      memcpy((void*)pDst, pData, NumBytes);
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003254:	69f8      	ldr	r0, [r7, #28]
 8003256:	f001 fa49 	bl	80046ec <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
 800325a:	6a3a      	ldr	r2, [r7, #32]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	441a      	add	r2, r3
 8003260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003262:	60da      	str	r2, [r3, #12]
      return 1;
 8003264:	2301      	movs	r3, #1
 8003266:	e03e      	b.n	80032e6 <SEGGER_RTT_WriteSkipNoLock+0xea>
    }
    Avail += RdOff;                                     // Space incl. wrap-around
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800326c:	4413      	add	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
 8003270:	69ba      	ldr	r2, [r7, #24]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	429a      	cmp	r2, r3
 8003276:	d335      	bcc.n	80032e4 <SEGGER_RTT_WriteSkipNoLock+0xe8>
      Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 8003278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	6a3b      	ldr	r3, [r7, #32]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	617b      	str	r3, [r7, #20]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 8003282:	697a      	ldr	r2, [r7, #20]
 8003284:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003286:	69f8      	ldr	r0, [r7, #28]
 8003288:	f001 fa30 	bl	80046ec <memcpy>
      NumBytes -= Rem;
 800328c:	687a      	ldr	r2, [r7, #4]
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	607b      	str	r3, [r7, #4]
      // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
      // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
      // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <SEGGER_RTT_WriteSkipNoLock+0xb4>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800329a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	61fb      	str	r3, [r7, #28]
        memcpy((void*)pDst, pData + Rem, NumBytes);
 80032a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	4413      	add	r3, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	4619      	mov	r1, r3
 80032aa:	69f8      	ldr	r0, [r7, #28]
 80032ac:	f001 fa1e 	bl	80046ec <memcpy>
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
 80032b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	60da      	str	r2, [r3, #12]
      return 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e015      	b.n	80032e6 <SEGGER_RTT_WriteSkipNoLock+0xea>
    }
  } else {                                             // Potential case 4)
    Avail = RdOff - WrOff - 1u;
 80032ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032bc:	6a3b      	ldr	r3, [r7, #32]
 80032be:	1ad3      	subs	r3, r2, r3
 80032c0:	3b01      	subs	r3, #1
 80032c2:	61bb      	str	r3, [r7, #24]
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d30b      	bcc.n	80032e4 <SEGGER_RTT_WriteSkipNoLock+0xe8>
      memcpy((void*)pDst, pData, NumBytes);
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80032d0:	69f8      	ldr	r0, [r7, #28]
 80032d2:	f001 fa0b 	bl	80046ec <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
 80032d6:	6a3a      	ldr	r2, [r7, #32]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	441a      	add	r2, r3
 80032dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032de:	60da      	str	r2, [r3, #12]
      return 1;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e000      	b.n	80032e6 <SEGGER_RTT_WriteSkipNoLock+0xea>
    }
  }
  return 0;     // No space in buffer
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3730      	adds	r7, #48	@ 0x30
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	2000118c 	.word	0x2000118c

080032f4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b088      	sub	sp, #32
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	607a      	str	r2, [r7, #4]
 8003300:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003302:	4b3c      	ldr	r3, [pc, #240]	@ (80033f4 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8003304:	61bb      	str	r3, [r7, #24]
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	b2db      	uxtb	r3, r3
 800330c:	2b53      	cmp	r3, #83	@ 0x53
 800330e:	d001      	beq.n	8003314 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003310:	f7ff fe96 	bl	8003040 <_DoInit>
  SEGGER_RTT_LOCK();
 8003314:	f3ef 8311 	mrs	r3, BASEPRI
 8003318:	f04f 0120 	mov.w	r1, #32
 800331c:	f381 8811 	msr	BASEPRI, r1
 8003320:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003322:	4b34      	ldr	r3, [pc, #208]	@ (80033f4 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8003324:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8003326:	2300      	movs	r3, #0
 8003328:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800332a:	6939      	ldr	r1, [r7, #16]
 800332c:	69fb      	ldr	r3, [r7, #28]
 800332e:	1c5a      	adds	r2, r3, #1
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	440b      	add	r3, r1
 800333a:	3304      	adds	r3, #4
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d008      	beq.n	8003354 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3301      	adds	r3, #1
 8003346:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	691b      	ldr	r3, [r3, #16]
 800334c:	69fa      	ldr	r2, [r7, #28]
 800334e:	429a      	cmp	r2, r3
 8003350:	dbeb      	blt.n	800332a <SEGGER_RTT_AllocUpBuffer+0x36>
 8003352:	e000      	b.n	8003356 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003354:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	69fa      	ldr	r2, [r7, #28]
 800335c:	429a      	cmp	r2, r3
 800335e:	da3d      	bge.n	80033dc <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003360:	6939      	ldr	r1, [r7, #16]
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	4613      	mov	r3, r2
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4413      	add	r3, r2
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	440b      	add	r3, r1
 8003370:	68fa      	ldr	r2, [r7, #12]
 8003372:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8003374:	6939      	ldr	r1, [r7, #16]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	1c5a      	adds	r2, r3, #1
 800337a:	4613      	mov	r3, r2
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	4413      	add	r3, r2
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	440b      	add	r3, r1
 8003384:	3304      	adds	r3, #4
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800338a:	6939      	ldr	r1, [r7, #16]
 800338c:	69fa      	ldr	r2, [r7, #28]
 800338e:	4613      	mov	r3, r2
 8003390:	005b      	lsls	r3, r3, #1
 8003392:	4413      	add	r3, r2
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	440b      	add	r3, r1
 8003398:	3320      	adds	r3, #32
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800339e:	6939      	ldr	r1, [r7, #16]
 80033a0:	69fa      	ldr	r2, [r7, #28]
 80033a2:	4613      	mov	r3, r2
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	4413      	add	r3, r2
 80033a8:	00db      	lsls	r3, r3, #3
 80033aa:	440b      	add	r3, r1
 80033ac:	3328      	adds	r3, #40	@ 0x28
 80033ae:	2200      	movs	r2, #0
 80033b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80033b2:	6939      	ldr	r1, [r7, #16]
 80033b4:	69fa      	ldr	r2, [r7, #28]
 80033b6:	4613      	mov	r3, r2
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	4413      	add	r3, r2
 80033bc:	00db      	lsls	r3, r3, #3
 80033be:	440b      	add	r3, r1
 80033c0:	3324      	adds	r3, #36	@ 0x24
 80033c2:	2200      	movs	r2, #0
 80033c4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80033c6:	6939      	ldr	r1, [r7, #16]
 80033c8:	69fa      	ldr	r2, [r7, #28]
 80033ca:	4613      	mov	r3, r2
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	4413      	add	r3, r2
 80033d0:	00db      	lsls	r3, r3, #3
 80033d2:	440b      	add	r3, r1
 80033d4:	332c      	adds	r3, #44	@ 0x2c
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	e002      	b.n	80033e2 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 80033dc:	f04f 33ff 	mov.w	r3, #4294967295
 80033e0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80033e8:	69fb      	ldr	r3, [r7, #28]
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3720      	adds	r7, #32
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2000118c 	.word	0x2000118c

080033f8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	@ 0x28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
 8003404:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8003406:	4b20      	ldr	r3, [pc, #128]	@ (8003488 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 8003408:	623b      	str	r3, [r7, #32]
 800340a:	6a3b      	ldr	r3, [r7, #32]
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b53      	cmp	r3, #83	@ 0x53
 8003412:	d001      	beq.n	8003418 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003414:	f7ff fe14 	bl	8003040 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003418:	4b1b      	ldr	r3, [pc, #108]	@ (8003488 <SEGGER_RTT_ConfigDownBuffer+0x90>)
 800341a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d82a      	bhi.n	8003478 <SEGGER_RTT_ConfigDownBuffer+0x80>
    SEGGER_RTT_LOCK();
 8003422:	f3ef 8311 	mrs	r3, BASEPRI
 8003426:	f04f 0120 	mov.w	r1, #32
 800342a:	f381 8811 	msr	BASEPRI, r1
 800342e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4613      	mov	r3, r2
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4413      	add	r3, r2
 8003438:	00db      	lsls	r3, r3, #3
 800343a:	3360      	adds	r3, #96	@ 0x60
 800343c:	69fa      	ldr	r2, [r7, #28]
 800343e:	4413      	add	r3, r2
 8003440:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d00e      	beq.n	8003466 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	683a      	ldr	r2, [r7, #0]
 8003458:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2200      	movs	r2, #0
 800345e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2200      	movs	r2, #0
 8003464:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800346a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8003472:	2300      	movs	r3, #0
 8003474:	627b      	str	r3, [r7, #36]	@ 0x24
 8003476:	e002      	b.n	800347e <SEGGER_RTT_ConfigDownBuffer+0x86>
  } else {
    r = -1;
 8003478:	f04f 33ff 	mov.w	r3, #4294967295
 800347c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800347e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003480:	4618      	mov	r0, r3
 8003482:	3728      	adds	r7, #40	@ 0x28
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	2000118c 	.word	0x2000118c

0800348c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800348c:	b480      	push	{r7}
 800348e:	b087      	sub	sp, #28
 8003490:	af00      	add	r7, sp, #0
 8003492:	60f8      	str	r0, [r7, #12]
 8003494:	60b9      	str	r1, [r7, #8]
 8003496:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	60fa      	str	r2, [r7, #12]
 80034a2:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b80      	cmp	r3, #128	@ 0x80
 80034a8:	d90a      	bls.n	80034c0 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 80034aa:	2380      	movs	r3, #128	@ 0x80
 80034ac:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 80034ae:	e007      	b.n	80034c0 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	1c53      	adds	r3, r2, #1
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	1c59      	adds	r1, r3, #1
 80034ba:	60f9      	str	r1, [r7, #12]
 80034bc:	7812      	ldrb	r2, [r2, #0]
 80034be:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	1e5a      	subs	r2, r3, #1
 80034c4:	607a      	str	r2, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <_EncodeStr+0x46>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1ee      	bne.n	80034b0 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	693b      	ldr	r3, [r7, #16]
 80034dc:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 80034de:	68fb      	ldr	r3, [r7, #12]
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	371c      	adds	r7, #28
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80034ea:	b480      	push	{r7}
 80034ec:	b083      	sub	sp, #12
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	3307      	adds	r3, #7
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bc80      	pop	{r7}
 80034fe:	4770      	bx	lr

08003500 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003506:	4b34      	ldr	r3, [pc, #208]	@ (80035d8 <_HandleIncomingPacket+0xd8>)
 8003508:	7e1b      	ldrb	r3, [r3, #24]
 800350a:	4618      	mov	r0, r3
 800350c:	1cfb      	adds	r3, r7, #3
 800350e:	2201      	movs	r2, #1
 8003510:	4619      	mov	r1, r3
 8003512:	f7ff fded 	bl	80030f0 <SEGGER_RTT_ReadNoLock>
 8003516:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d057      	beq.n	80035ce <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800351e:	78fb      	ldrb	r3, [r7, #3]
 8003520:	2b80      	cmp	r3, #128	@ 0x80
 8003522:	d031      	beq.n	8003588 <_HandleIncomingPacket+0x88>
 8003524:	2b80      	cmp	r3, #128	@ 0x80
 8003526:	dc40      	bgt.n	80035aa <_HandleIncomingPacket+0xaa>
 8003528:	2b07      	cmp	r3, #7
 800352a:	dc15      	bgt.n	8003558 <_HandleIncomingPacket+0x58>
 800352c:	2b00      	cmp	r3, #0
 800352e:	dd3c      	ble.n	80035aa <_HandleIncomingPacket+0xaa>
 8003530:	3b01      	subs	r3, #1
 8003532:	2b06      	cmp	r3, #6
 8003534:	d839      	bhi.n	80035aa <_HandleIncomingPacket+0xaa>
 8003536:	a201      	add	r2, pc, #4	@ (adr r2, 800353c <_HandleIncomingPacket+0x3c>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	0800355f 	.word	0x0800355f
 8003540:	08003565 	.word	0x08003565
 8003544:	0800356b 	.word	0x0800356b
 8003548:	08003571 	.word	0x08003571
 800354c:	08003577 	.word	0x08003577
 8003550:	0800357d 	.word	0x0800357d
 8003554:	08003583 	.word	0x08003583
 8003558:	2b7f      	cmp	r3, #127	@ 0x7f
 800355a:	d033      	beq.n	80035c4 <_HandleIncomingPacket+0xc4>
 800355c:	e025      	b.n	80035aa <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800355e:	f000 fb23 	bl	8003ba8 <SEGGER_SYSVIEW_Start>
      break;
 8003562:	e034      	b.n	80035ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003564:	f000 fbda 	bl	8003d1c <SEGGER_SYSVIEW_Stop>
      break;
 8003568:	e031      	b.n	80035ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800356a:	f000 fdb3 	bl	80040d4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800356e:	e02e      	b.n	80035ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8003570:	f000 fd78 	bl	8004064 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003574:	e02b      	b.n	80035ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003576:	f000 fbf7 	bl	8003d68 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800357a:	e028      	b.n	80035ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800357c:	f000 ffe0 	bl	8004540 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8003580:	e025      	b.n	80035ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8003582:	f000 ffbf 	bl	8004504 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003586:	e022      	b.n	80035ce <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003588:	4b13      	ldr	r3, [pc, #76]	@ (80035d8 <_HandleIncomingPacket+0xd8>)
 800358a:	7e1b      	ldrb	r3, [r3, #24]
 800358c:	4618      	mov	r0, r3
 800358e:	1cfb      	adds	r3, r7, #3
 8003590:	2201      	movs	r2, #1
 8003592:	4619      	mov	r1, r3
 8003594:	f7ff fdac 	bl	80030f0 <SEGGER_RTT_ReadNoLock>
 8003598:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	4618      	mov	r0, r3
 80035a4:	f000 ff24 	bl	80043f0 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 80035a8:	e00e      	b.n	80035c8 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	b25b      	sxtb	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	da0c      	bge.n	80035cc <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80035b2:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <_HandleIncomingPacket+0xd8>)
 80035b4:	7e1b      	ldrb	r3, [r3, #24]
 80035b6:	4618      	mov	r0, r3
 80035b8:	1cfb      	adds	r3, r7, #3
 80035ba:	2201      	movs	r2, #1
 80035bc:	4619      	mov	r1, r3
 80035be:	f7ff fd97 	bl	80030f0 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80035c2:	e003      	b.n	80035cc <_HandleIncomingPacket+0xcc>
      break;
 80035c4:	bf00      	nop
 80035c6:	e002      	b.n	80035ce <_HandleIncomingPacket+0xce>
      break;
 80035c8:	bf00      	nop
 80035ca:	e000      	b.n	80035ce <_HandleIncomingPacket+0xce>
      break;
 80035cc:	bf00      	nop
    }
  }
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	2000364c 	.word	0x2000364c

080035dc <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08c      	sub	sp, #48	@ 0x30
 80035e0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80035e2:	2301      	movs	r3, #1
 80035e4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80035e6:	1d3b      	adds	r3, r7, #4
 80035e8:	3301      	adds	r3, #1
 80035ea:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035f0:	4b31      	ldr	r3, [pc, #196]	@ (80036b8 <_TrySendOverflowPacket+0xdc>)
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035f6:	e00b      	b.n	8003610 <_TrySendOverflowPacket+0x34>
 80035f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fe:	1c59      	adds	r1, r3, #1
 8003600:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003602:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]
 800360a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360c:	09db      	lsrs	r3, r3, #7
 800360e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003610:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003612:	2b7f      	cmp	r3, #127	@ 0x7f
 8003614:	d8f0      	bhi.n	80035f8 <_TrySendOverflowPacket+0x1c>
 8003616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003618:	1c5a      	adds	r2, r3, #1
 800361a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800361c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	701a      	strb	r2, [r3, #0]
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003626:	4b25      	ldr	r3, [pc, #148]	@ (80036bc <_TrySendOverflowPacket+0xe0>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800362c:	4b22      	ldr	r3, [pc, #136]	@ (80036b8 <_TrySendOverflowPacket+0xdc>)
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	623b      	str	r3, [r7, #32]
 800363e:	e00b      	b.n	8003658 <_TrySendOverflowPacket+0x7c>
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	b2da      	uxtb	r2, r3
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	1c59      	adds	r1, r3, #1
 8003648:	6279      	str	r1, [r7, #36]	@ 0x24
 800364a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800364e:	b2d2      	uxtb	r2, r2
 8003650:	701a      	strb	r2, [r3, #0]
 8003652:	6a3b      	ldr	r3, [r7, #32]
 8003654:	09db      	lsrs	r3, r3, #7
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	6a3b      	ldr	r3, [r7, #32]
 800365a:	2b7f      	cmp	r3, #127	@ 0x7f
 800365c:	d8f0      	bhi.n	8003640 <_TrySendOverflowPacket+0x64>
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	1c5a      	adds	r2, r3, #1
 8003662:	627a      	str	r2, [r7, #36]	@ 0x24
 8003664:	6a3a      	ldr	r2, [r7, #32]
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	701a      	strb	r2, [r3, #0]
 800366a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800366e:	4b12      	ldr	r3, [pc, #72]	@ (80036b8 <_TrySendOverflowPacket+0xdc>)
 8003670:	785b      	ldrb	r3, [r3, #1]
 8003672:	4618      	mov	r0, r3
 8003674:	1d3b      	adds	r3, r7, #4
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	461a      	mov	r2, r3
 800367c:	1d3b      	adds	r3, r7, #4
 800367e:	4619      	mov	r1, r3
 8003680:	f7ff fdbc 	bl	80031fc <SEGGER_RTT_WriteSkipNoLock>
 8003684:	4603      	mov	r3, r0
 8003686:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800368e:	4a0a      	ldr	r2, [pc, #40]	@ (80036b8 <_TrySendOverflowPacket+0xdc>)
 8003690:	69bb      	ldr	r3, [r7, #24]
 8003692:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003694:	4b08      	ldr	r3, [pc, #32]	@ (80036b8 <_TrySendOverflowPacket+0xdc>)
 8003696:	781b      	ldrb	r3, [r3, #0]
 8003698:	3b01      	subs	r3, #1
 800369a:	b2da      	uxtb	r2, r3
 800369c:	4b06      	ldr	r3, [pc, #24]	@ (80036b8 <_TrySendOverflowPacket+0xdc>)
 800369e:	701a      	strb	r2, [r3, #0]
 80036a0:	e004      	b.n	80036ac <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 80036a2:	4b05      	ldr	r3, [pc, #20]	@ (80036b8 <_TrySendOverflowPacket+0xdc>)
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	3301      	adds	r3, #1
 80036a8:	4a03      	ldr	r2, [pc, #12]	@ (80036b8 <_TrySendOverflowPacket+0xdc>)
 80036aa:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 80036ac:	693b      	ldr	r3, [r7, #16]
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3730      	adds	r7, #48	@ 0x30
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	2000364c 	.word	0x2000364c
 80036bc:	e0001004 	.word	0xe0001004

080036c0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	@ 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 80036cc:	4b98      	ldr	r3, [pc, #608]	@ (8003930 <_SendPacket+0x270>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d010      	beq.n	80036f6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 80036d4:	4b96      	ldr	r3, [pc, #600]	@ (8003930 <_SendPacket+0x270>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 812d 	beq.w	8003938 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80036de:	4b94      	ldr	r3, [pc, #592]	@ (8003930 <_SendPacket+0x270>)
 80036e0:	781b      	ldrb	r3, [r3, #0]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d109      	bne.n	80036fa <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80036e6:	f7ff ff79 	bl	80035dc <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80036ea:	4b91      	ldr	r3, [pc, #580]	@ (8003930 <_SendPacket+0x270>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	f040 8124 	bne.w	800393c <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 80036f4:	e001      	b.n	80036fa <_SendPacket+0x3a>
    goto Send;
 80036f6:	bf00      	nop
 80036f8:	e000      	b.n	80036fc <_SendPacket+0x3c>
Send:
 80036fa:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b1f      	cmp	r3, #31
 8003700:	d809      	bhi.n	8003716 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8003702:	4b8b      	ldr	r3, [pc, #556]	@ (8003930 <_SendPacket+0x270>)
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
 800370c:	f003 0301 	and.w	r3, r3, #1
 8003710:	2b00      	cmp	r3, #0
 8003712:	f040 8115 	bne.w	8003940 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b17      	cmp	r3, #23
 800371a:	d807      	bhi.n	800372c <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	3b01      	subs	r3, #1
 8003720:	60fb      	str	r3, [r7, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	701a      	strb	r2, [r3, #0]
 800372a:	e0c4      	b.n	80038b6 <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2b7f      	cmp	r3, #127	@ 0x7f
 8003738:	d912      	bls.n	8003760 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	09da      	lsrs	r2, r3, #7
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	3b01      	subs	r3, #1
 8003742:	60fb      	str	r3, [r7, #12]
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	b2db      	uxtb	r3, r3
 800374e:	68fa      	ldr	r2, [r7, #12]
 8003750:	3a01      	subs	r2, #1
 8003752:	60fa      	str	r2, [r7, #12]
 8003754:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003758:	b2da      	uxtb	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	e006      	b.n	800376e <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	3b01      	subs	r3, #1
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	b2da      	uxtb	r2, r3
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2b7e      	cmp	r3, #126	@ 0x7e
 8003772:	d807      	bhi.n	8003784 <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	3b01      	subs	r3, #1
 8003778:	60fb      	str	r3, [r7, #12]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	701a      	strb	r2, [r3, #0]
 8003782:	e098      	b.n	80038b6 <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800378a:	d212      	bcs.n	80037b2 <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	09da      	lsrs	r2, r3, #7
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3b01      	subs	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	3a01      	subs	r2, #1
 80037a4:	60fa      	str	r2, [r7, #12]
 80037a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e081      	b.n	80038b6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037b8:	d21d      	bcs.n	80037f6 <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	0b9a      	lsrs	r2, r3, #14
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	09db      	lsrs	r3, r3, #7
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	3a01      	subs	r2, #1
 80037d4:	60fa      	str	r2, [r7, #12]
 80037d6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037da:	b2da      	uxtb	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	b2db      	uxtb	r3, r3
 80037e4:	68fa      	ldr	r2, [r7, #12]
 80037e6:	3a01      	subs	r2, #1
 80037e8:	60fa      	str	r2, [r7, #12]
 80037ea:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80037ee:	b2da      	uxtb	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	e05f      	b.n	80038b6 <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80037fc:	d228      	bcs.n	8003850 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	0d5a      	lsrs	r2, r3, #21
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	3b01      	subs	r3, #1
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	b2d2      	uxtb	r2, r2
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	0b9b      	lsrs	r3, r3, #14
 8003812:	b2db      	uxtb	r3, r3
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	3a01      	subs	r2, #1
 8003818:	60fa      	str	r2, [r7, #12]
 800381a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800381e:	b2da      	uxtb	r2, r3
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	09db      	lsrs	r3, r3, #7
 8003828:	b2db      	uxtb	r3, r3
 800382a:	68fa      	ldr	r2, [r7, #12]
 800382c:	3a01      	subs	r2, #1
 800382e:	60fa      	str	r2, [r7, #12]
 8003830:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003834:	b2da      	uxtb	r2, r3
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	b2db      	uxtb	r3, r3
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	3a01      	subs	r2, #1
 8003842:	60fa      	str	r2, [r7, #12]
 8003844:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003848:	b2da      	uxtb	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	701a      	strb	r2, [r3, #0]
 800384e:	e032      	b.n	80038b6 <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	0f1a      	lsrs	r2, r3, #28
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	3b01      	subs	r3, #1
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	b2d2      	uxtb	r2, r2
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	0d5b      	lsrs	r3, r3, #21
 8003864:	b2db      	uxtb	r3, r3
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	3a01      	subs	r2, #1
 800386a:	60fa      	str	r2, [r7, #12]
 800386c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003870:	b2da      	uxtb	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	0b9b      	lsrs	r3, r3, #14
 800387a:	b2db      	uxtb	r3, r3
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	3a01      	subs	r2, #1
 8003880:	60fa      	str	r2, [r7, #12]
 8003882:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003886:	b2da      	uxtb	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	09db      	lsrs	r3, r3, #7
 8003890:	b2db      	uxtb	r3, r3
 8003892:	68fa      	ldr	r2, [r7, #12]
 8003894:	3a01      	subs	r2, #1
 8003896:	60fa      	str	r2, [r7, #12]
 8003898:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	3a01      	subs	r2, #1
 80038aa:	60fa      	str	r2, [r7, #12]
 80038ac:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80038b0:	b2da      	uxtb	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80038b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003934 <_SendPacket+0x274>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80038bc:	4b1c      	ldr	r3, [pc, #112]	@ (8003930 <_SendPacket+0x270>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	623b      	str	r3, [r7, #32]
 80038ce:	e00b      	b.n	80038e8 <_SendPacket+0x228>
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038d6:	1c59      	adds	r1, r3, #1
 80038d8:	6279      	str	r1, [r7, #36]	@ 0x24
 80038da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80038de:	b2d2      	uxtb	r2, r2
 80038e0:	701a      	strb	r2, [r3, #0]
 80038e2:	6a3b      	ldr	r3, [r7, #32]
 80038e4:	09db      	lsrs	r3, r3, #7
 80038e6:	623b      	str	r3, [r7, #32]
 80038e8:	6a3b      	ldr	r3, [r7, #32]
 80038ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80038ec:	d8f0      	bhi.n	80038d0 <_SendPacket+0x210>
 80038ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f0:	1c5a      	adds	r2, r3, #1
 80038f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80038f4:	6a3a      	ldr	r2, [r7, #32]
 80038f6:	b2d2      	uxtb	r2, r2
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fc:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 80038fe:	4b0c      	ldr	r3, [pc, #48]	@ (8003930 <_SendPacket+0x270>)
 8003900:	785b      	ldrb	r3, [r3, #1]
 8003902:	4618      	mov	r0, r3
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	461a      	mov	r2, r3
 800390c:	68f9      	ldr	r1, [r7, #12]
 800390e:	f7ff fc75 	bl	80031fc <SEGGER_RTT_WriteSkipNoLock>
 8003912:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d003      	beq.n	8003922 <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800391a:	4a05      	ldr	r2, [pc, #20]	@ (8003930 <_SendPacket+0x270>)
 800391c:	69bb      	ldr	r3, [r7, #24]
 800391e:	60d3      	str	r3, [r2, #12]
 8003920:	e00f      	b.n	8003942 <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8003922:	4b03      	ldr	r3, [pc, #12]	@ (8003930 <_SendPacket+0x270>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	3301      	adds	r3, #1
 8003928:	b2da      	uxtb	r2, r3
 800392a:	4b01      	ldr	r3, [pc, #4]	@ (8003930 <_SendPacket+0x270>)
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	e008      	b.n	8003942 <_SendPacket+0x282>
 8003930:	2000364c 	.word	0x2000364c
 8003934:	e0001004 	.word	0xe0001004
    goto SendDone;
 8003938:	bf00      	nop
 800393a:	e002      	b.n	8003942 <_SendPacket+0x282>
      goto SendDone;
 800393c:	bf00      	nop
 800393e:	e000      	b.n	8003942 <_SendPacket+0x282>
      goto SendDone;
 8003940:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8003942:	4b14      	ldr	r3, [pc, #80]	@ (8003994 <_SendPacket+0x2d4>)
 8003944:	7e1b      	ldrb	r3, [r3, #24]
 8003946:	4619      	mov	r1, r3
 8003948:	4a13      	ldr	r2, [pc, #76]	@ (8003998 <_SendPacket+0x2d8>)
 800394a:	460b      	mov	r3, r1
 800394c:	005b      	lsls	r3, r3, #1
 800394e:	440b      	add	r3, r1
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	4413      	add	r3, r2
 8003954:	336c      	adds	r3, #108	@ 0x6c
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	4b0e      	ldr	r3, [pc, #56]	@ (8003994 <_SendPacket+0x2d4>)
 800395a:	7e1b      	ldrb	r3, [r3, #24]
 800395c:	4618      	mov	r0, r3
 800395e:	490e      	ldr	r1, [pc, #56]	@ (8003998 <_SendPacket+0x2d8>)
 8003960:	4603      	mov	r3, r0
 8003962:	005b      	lsls	r3, r3, #1
 8003964:	4403      	add	r3, r0
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	440b      	add	r3, r1
 800396a:	3370      	adds	r3, #112	@ 0x70
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d00b      	beq.n	800398a <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8003972:	4b08      	ldr	r3, [pc, #32]	@ (8003994 <_SendPacket+0x2d4>)
 8003974:	789b      	ldrb	r3, [r3, #2]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d107      	bne.n	800398a <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800397a:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <_SendPacket+0x2d4>)
 800397c:	2201      	movs	r2, #1
 800397e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8003980:	f7ff fdbe 	bl	8003500 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003984:	4b03      	ldr	r3, [pc, #12]	@ (8003994 <_SendPacket+0x2d4>)
 8003986:	2200      	movs	r2, #0
 8003988:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800398a:	bf00      	nop
 800398c:	3728      	adds	r7, #40	@ 0x28
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	2000364c 	.word	0x2000364c
 8003998:	2000118c 	.word	0x2000118c

0800399c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af02      	add	r7, sp, #8
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
 80039a8:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80039aa:	2300      	movs	r3, #0
 80039ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039b0:	4917      	ldr	r1, [pc, #92]	@ (8003a10 <SEGGER_SYSVIEW_Init+0x74>)
 80039b2:	4818      	ldr	r0, [pc, #96]	@ (8003a14 <SEGGER_SYSVIEW_Init+0x78>)
 80039b4:	f7ff fc9e 	bl	80032f4 <SEGGER_RTT_AllocUpBuffer>
 80039b8:	4603      	mov	r3, r0
 80039ba:	b2da      	uxtb	r2, r3
 80039bc:	4b16      	ldr	r3, [pc, #88]	@ (8003a18 <SEGGER_SYSVIEW_Init+0x7c>)
 80039be:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80039c0:	4b15      	ldr	r3, [pc, #84]	@ (8003a18 <SEGGER_SYSVIEW_Init+0x7c>)
 80039c2:	785a      	ldrb	r2, [r3, #1]
 80039c4:	4b14      	ldr	r3, [pc, #80]	@ (8003a18 <SEGGER_SYSVIEW_Init+0x7c>)
 80039c6:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80039c8:	4b13      	ldr	r3, [pc, #76]	@ (8003a18 <SEGGER_SYSVIEW_Init+0x7c>)
 80039ca:	7e1b      	ldrb	r3, [r3, #24]
 80039cc:	4618      	mov	r0, r3
 80039ce:	2300      	movs	r3, #0
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	2308      	movs	r3, #8
 80039d4:	4a11      	ldr	r2, [pc, #68]	@ (8003a1c <SEGGER_SYSVIEW_Init+0x80>)
 80039d6:	490f      	ldr	r1, [pc, #60]	@ (8003a14 <SEGGER_SYSVIEW_Init+0x78>)
 80039d8:	f7ff fd0e 	bl	80033f8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80039dc:	4b0e      	ldr	r3, [pc, #56]	@ (8003a18 <SEGGER_SYSVIEW_Init+0x7c>)
 80039de:	2200      	movs	r2, #0
 80039e0:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80039e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003a20 <SEGGER_SYSVIEW_Init+0x84>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a0c      	ldr	r2, [pc, #48]	@ (8003a18 <SEGGER_SYSVIEW_Init+0x7c>)
 80039e8:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80039ea:	4a0b      	ldr	r2, [pc, #44]	@ (8003a18 <SEGGER_SYSVIEW_Init+0x7c>)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80039f0:	4a09      	ldr	r2, [pc, #36]	@ (8003a18 <SEGGER_SYSVIEW_Init+0x7c>)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80039f6:	4a08      	ldr	r2, [pc, #32]	@ (8003a18 <SEGGER_SYSVIEW_Init+0x7c>)
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80039fc:	4a06      	ldr	r2, [pc, #24]	@ (8003a18 <SEGGER_SYSVIEW_Init+0x7c>)
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8003a02:	4b05      	ldr	r3, [pc, #20]	@ (8003a18 <SEGGER_SYSVIEW_Init+0x7c>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20001644 	.word	0x20001644
 8003a14:	080047ec 	.word	0x080047ec
 8003a18:	2000364c 	.word	0x2000364c
 8003a1c:	20003644 	.word	0x20003644
 8003a20:	e0001004 	.word	0xe0001004

08003a24 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8003a24:	b480      	push	{r7}
 8003a26:	b083      	sub	sp, #12
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8003a2c:	4a03      	ldr	r2, [pc, #12]	@ (8003a3c <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6113      	str	r3, [r2, #16]
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bc80      	pop	{r7}
 8003a3a:	4770      	bx	lr
 8003a3c:	2000364c 	.word	0x2000364c

08003a40 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003a48:	f3ef 8311 	mrs	r3, BASEPRI
 8003a4c:	f04f 0120 	mov.w	r1, #32
 8003a50:	f381 8811 	msr	BASEPRI, r1
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	4808      	ldr	r0, [pc, #32]	@ (8003a78 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003a58:	f7ff fd47 	bl	80034ea <_PreparePacket>
 8003a5c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	68b9      	ldr	r1, [r7, #8]
 8003a62:	68b8      	ldr	r0, [r7, #8]
 8003a64:	f7ff fe2c 	bl	80036c0 <_SendPacket>
  RECORD_END();
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f383 8811 	msr	BASEPRI, r3
}
 8003a6e:	bf00      	nop
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	2000367c 	.word	0x2000367c

08003a7c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003a86:	f3ef 8311 	mrs	r3, BASEPRI
 8003a8a:	f04f 0120 	mov.w	r1, #32
 8003a8e:	f381 8811 	msr	BASEPRI, r1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	4816      	ldr	r0, [pc, #88]	@ (8003af0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003a96:	f7ff fd28 	bl	80034ea <_PreparePacket>
 8003a9a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	61fb      	str	r3, [r7, #28]
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	61bb      	str	r3, [r7, #24]
 8003aa8:	e00b      	b.n	8003ac2 <SEGGER_SYSVIEW_RecordU32+0x46>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	1c59      	adds	r1, r3, #1
 8003ab2:	61f9      	str	r1, [r7, #28]
 8003ab4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ab8:	b2d2      	uxtb	r2, r2
 8003aba:	701a      	strb	r2, [r3, #0]
 8003abc:	69bb      	ldr	r3, [r7, #24]
 8003abe:	09db      	lsrs	r3, r3, #7
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ac6:	d8f0      	bhi.n	8003aaa <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	1c5a      	adds	r2, r3, #1
 8003acc:	61fa      	str	r2, [r7, #28]
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	701a      	strb	r2, [r3, #0]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	68f9      	ldr	r1, [r7, #12]
 8003adc:	6938      	ldr	r0, [r7, #16]
 8003ade:	f7ff fdef 	bl	80036c0 <_SendPacket>
  RECORD_END();
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	f383 8811 	msr	BASEPRI, r3
}
 8003ae8:	bf00      	nop
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	2000367c 	.word	0x2000367c

08003af4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b08c      	sub	sp, #48	@ 0x30
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b00:	f3ef 8311 	mrs	r3, BASEPRI
 8003b04:	f04f 0120 	mov.w	r1, #32
 8003b08:	f381 8811 	msr	BASEPRI, r1
 8003b0c:	61fb      	str	r3, [r7, #28]
 8003b0e:	4825      	ldr	r0, [pc, #148]	@ (8003ba4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8003b10:	f7ff fceb 	bl	80034ea <_PreparePacket>
 8003b14:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b22:	e00b      	b.n	8003b3c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8003b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b26:	b2da      	uxtb	r2, r3
 8003b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b2a:	1c59      	adds	r1, r3, #1
 8003b2c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003b2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003b32:	b2d2      	uxtb	r2, r2
 8003b34:	701a      	strb	r2, [r3, #0]
 8003b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b38:	09db      	lsrs	r3, r3, #7
 8003b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b40:	d8f0      	bhi.n	8003b24 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8003b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b44:	1c5a      	adds	r2, r3, #1
 8003b46:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b50:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	623b      	str	r3, [r7, #32]
 8003b5a:	e00b      	b.n	8003b74 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8003b5c:	6a3b      	ldr	r3, [r7, #32]
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b62:	1c59      	adds	r1, r3, #1
 8003b64:	6279      	str	r1, [r7, #36]	@ 0x24
 8003b66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	09db      	lsrs	r3, r3, #7
 8003b72:	623b      	str	r3, [r7, #32]
 8003b74:	6a3b      	ldr	r3, [r7, #32]
 8003b76:	2b7f      	cmp	r3, #127	@ 0x7f
 8003b78:	d8f0      	bhi.n	8003b5c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	1c5a      	adds	r2, r3, #1
 8003b7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	b2d2      	uxtb	r2, r2
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	6979      	ldr	r1, [r7, #20]
 8003b8e:	69b8      	ldr	r0, [r7, #24]
 8003b90:	f7ff fd96 	bl	80036c0 <_SendPacket>
  RECORD_END();
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	f383 8811 	msr	BASEPRI, r3
}
 8003b9a:	bf00      	nop
 8003b9c:	3730      	adds	r7, #48	@ 0x30
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	2000367c 	.word	0x2000367c

08003ba8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08c      	sub	sp, #48	@ 0x30
 8003bac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8003bae:	4b58      	ldr	r3, [pc, #352]	@ (8003d10 <SEGGER_SYSVIEW_Start+0x168>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003bb4:	f3ef 8311 	mrs	r3, BASEPRI
 8003bb8:	f04f 0120 	mov.w	r1, #32
 8003bbc:	f381 8811 	msr	BASEPRI, r1
 8003bc0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003bc2:	4b53      	ldr	r3, [pc, #332]	@ (8003d10 <SEGGER_SYSVIEW_Start+0x168>)
 8003bc4:	785b      	ldrb	r3, [r3, #1]
 8003bc6:	220a      	movs	r2, #10
 8003bc8:	4952      	ldr	r1, [pc, #328]	@ (8003d14 <SEGGER_SYSVIEW_Start+0x16c>)
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7ff fb16 	bl	80031fc <SEGGER_RTT_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003bd6:	200a      	movs	r0, #10
 8003bd8:	f7ff ff32 	bl	8003a40 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003bdc:	f3ef 8311 	mrs	r3, BASEPRI
 8003be0:	f04f 0120 	mov.w	r1, #32
 8003be4:	f381 8811 	msr	BASEPRI, r1
 8003be8:	60bb      	str	r3, [r7, #8]
 8003bea:	484b      	ldr	r0, [pc, #300]	@ (8003d18 <SEGGER_SYSVIEW_Start+0x170>)
 8003bec:	f7ff fc7d 	bl	80034ea <_PreparePacket>
 8003bf0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bfa:	4b45      	ldr	r3, [pc, #276]	@ (8003d10 <SEGGER_SYSVIEW_Start+0x168>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c00:	e00b      	b.n	8003c1a <SEGGER_SYSVIEW_Start+0x72>
 8003c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c04:	b2da      	uxtb	r2, r3
 8003c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c08:	1c59      	adds	r1, r3, #1
 8003c0a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003c0c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c16:	09db      	lsrs	r3, r3, #7
 8003c18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1c:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c1e:	d8f0      	bhi.n	8003c02 <SEGGER_SYSVIEW_Start+0x5a>
 8003c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c22:	1c5a      	adds	r2, r3, #1
 8003c24:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c28:	b2d2      	uxtb	r2, r2
 8003c2a:	701a      	strb	r2, [r3, #0]
 8003c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c2e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c34:	4b36      	ldr	r3, [pc, #216]	@ (8003d10 <SEGGER_SYSVIEW_Start+0x168>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	623b      	str	r3, [r7, #32]
 8003c3a:	e00b      	b.n	8003c54 <SEGGER_SYSVIEW_Start+0xac>
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c42:	1c59      	adds	r1, r3, #1
 8003c44:	6279      	str	r1, [r7, #36]	@ 0x24
 8003c46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	701a      	strb	r2, [r3, #0]
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	09db      	lsrs	r3, r3, #7
 8003c52:	623b      	str	r3, [r7, #32]
 8003c54:	6a3b      	ldr	r3, [r7, #32]
 8003c56:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c58:	d8f0      	bhi.n	8003c3c <SEGGER_SYSVIEW_Start+0x94>
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5c:	1c5a      	adds	r2, r3, #1
 8003c5e:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c60:	6a3a      	ldr	r2, [r7, #32]
 8003c62:	b2d2      	uxtb	r2, r2
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c68:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	4b28      	ldr	r3, [pc, #160]	@ (8003d10 <SEGGER_SYSVIEW_Start+0x168>)
 8003c70:	691b      	ldr	r3, [r3, #16]
 8003c72:	61bb      	str	r3, [r7, #24]
 8003c74:	e00b      	b.n	8003c8e <SEGGER_SYSVIEW_Start+0xe6>
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	b2da      	uxtb	r2, r3
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	1c59      	adds	r1, r3, #1
 8003c7e:	61f9      	str	r1, [r7, #28]
 8003c80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	701a      	strb	r2, [r3, #0]
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	09db      	lsrs	r3, r3, #7
 8003c8c:	61bb      	str	r3, [r7, #24]
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	2b7f      	cmp	r3, #127	@ 0x7f
 8003c92:	d8f0      	bhi.n	8003c76 <SEGGER_SYSVIEW_Start+0xce>
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	61fa      	str	r2, [r7, #28]
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	701a      	strb	r2, [r3, #0]
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	617b      	str	r3, [r7, #20]
 8003ca8:	2300      	movs	r3, #0
 8003caa:	613b      	str	r3, [r7, #16]
 8003cac:	e00b      	b.n	8003cc6 <SEGGER_SYSVIEW_Start+0x11e>
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	1c59      	adds	r1, r3, #1
 8003cb6:	6179      	str	r1, [r7, #20]
 8003cb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003cbc:	b2d2      	uxtb	r2, r2
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	09db      	lsrs	r3, r3, #7
 8003cc4:	613b      	str	r3, [r7, #16]
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8003cca:	d8f0      	bhi.n	8003cae <SEGGER_SYSVIEW_Start+0x106>
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	1c5a      	adds	r2, r3, #1
 8003cd0:	617a      	str	r2, [r7, #20]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	b2d2      	uxtb	r2, r2
 8003cd6:	701a      	strb	r2, [r3, #0]
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003cdc:	2218      	movs	r2, #24
 8003cde:	6839      	ldr	r1, [r7, #0]
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff fced 	bl	80036c0 <_SendPacket>
      RECORD_END();
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003cec:	4b08      	ldr	r3, [pc, #32]	@ (8003d10 <SEGGER_SYSVIEW_Start+0x168>)
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003cf4:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <SEGGER_SYSVIEW_Start+0x168>)
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003cfa:	f000 f9eb 	bl	80040d4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003cfe:	f000 f9b1 	bl	8004064 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003d02:	f000 fc1d 	bl	8004540 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003d06:	bf00      	nop
 8003d08:	3730      	adds	r7, #48	@ 0x30
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	2000364c 	.word	0x2000364c
 8003d14:	0800483c 	.word	0x0800483c
 8003d18:	2000367c 	.word	0x2000367c

08003d1c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003d22:	f3ef 8311 	mrs	r3, BASEPRI
 8003d26:	f04f 0120 	mov.w	r1, #32
 8003d2a:	f381 8811 	msr	BASEPRI, r1
 8003d2e:	607b      	str	r3, [r7, #4]
 8003d30:	480b      	ldr	r0, [pc, #44]	@ (8003d60 <SEGGER_SYSVIEW_Stop+0x44>)
 8003d32:	f7ff fbda 	bl	80034ea <_PreparePacket>
 8003d36:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003d38:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <SEGGER_SYSVIEW_Stop+0x48>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d007      	beq.n	8003d50 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003d40:	220b      	movs	r2, #11
 8003d42:	6839      	ldr	r1, [r7, #0]
 8003d44:	6838      	ldr	r0, [r7, #0]
 8003d46:	f7ff fcbb 	bl	80036c0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003d4a:	4b06      	ldr	r3, [pc, #24]	@ (8003d64 <SEGGER_SYSVIEW_Stop+0x48>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f383 8811 	msr	BASEPRI, r3
}
 8003d56:	bf00      	nop
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	2000367c 	.word	0x2000367c
 8003d64:	2000364c 	.word	0x2000364c

08003d68 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08c      	sub	sp, #48	@ 0x30
 8003d6c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003d6e:	f3ef 8311 	mrs	r3, BASEPRI
 8003d72:	f04f 0120 	mov.w	r1, #32
 8003d76:	f381 8811 	msr	BASEPRI, r1
 8003d7a:	60fb      	str	r3, [r7, #12]
 8003d7c:	4845      	ldr	r0, [pc, #276]	@ (8003e94 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003d7e:	f7ff fbb4 	bl	80034ea <_PreparePacket>
 8003d82:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003d8c:	4b42      	ldr	r3, [pc, #264]	@ (8003e98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d92:	e00b      	b.n	8003dac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003d94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d96:	b2da      	uxtb	r2, r3
 8003d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d9a:	1c59      	adds	r1, r3, #1
 8003d9c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003d9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003da2:	b2d2      	uxtb	r2, r2
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da8:	09db      	lsrs	r3, r3, #7
 8003daa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dae:	2b7f      	cmp	r3, #127	@ 0x7f
 8003db0:	d8f0      	bhi.n	8003d94 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003db2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db4:	1c5a      	adds	r2, r3, #1
 8003db6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003db8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003dba:	b2d2      	uxtb	r2, r2
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dc6:	4b34      	ldr	r3, [pc, #208]	@ (8003e98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	623b      	str	r3, [r7, #32]
 8003dcc:	e00b      	b.n	8003de6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003dce:	6a3b      	ldr	r3, [r7, #32]
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd4:	1c59      	adds	r1, r3, #1
 8003dd6:	6279      	str	r1, [r7, #36]	@ 0x24
 8003dd8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	701a      	strb	r2, [r3, #0]
 8003de0:	6a3b      	ldr	r3, [r7, #32]
 8003de2:	09db      	lsrs	r3, r3, #7
 8003de4:	623b      	str	r3, [r7, #32]
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	2b7f      	cmp	r3, #127	@ 0x7f
 8003dea:	d8f0      	bhi.n	8003dce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003df2:	6a3a      	ldr	r2, [r7, #32]
 8003df4:	b2d2      	uxtb	r2, r2
 8003df6:	701a      	strb	r2, [r3, #0]
 8003df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dfa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	61fb      	str	r3, [r7, #28]
 8003e00:	4b25      	ldr	r3, [pc, #148]	@ (8003e98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	61bb      	str	r3, [r7, #24]
 8003e06:	e00b      	b.n	8003e20 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	1c59      	adds	r1, r3, #1
 8003e10:	61f9      	str	r1, [r7, #28]
 8003e12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	701a      	strb	r2, [r3, #0]
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	09db      	lsrs	r3, r3, #7
 8003e1e:	61bb      	str	r3, [r7, #24]
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e24:	d8f0      	bhi.n	8003e08 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	61fa      	str	r2, [r7, #28]
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	613b      	str	r3, [r7, #16]
 8003e3e:	e00b      	b.n	8003e58 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	1c59      	adds	r1, r3, #1
 8003e48:	6179      	str	r1, [r7, #20]
 8003e4a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003e4e:	b2d2      	uxtb	r2, r2
 8003e50:	701a      	strb	r2, [r3, #0]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	09db      	lsrs	r3, r3, #7
 8003e56:	613b      	str	r3, [r7, #16]
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e5c:	d8f0      	bhi.n	8003e40 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	617a      	str	r2, [r7, #20]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003e6e:	2218      	movs	r2, #24
 8003e70:	6879      	ldr	r1, [r7, #4]
 8003e72:	68b8      	ldr	r0, [r7, #8]
 8003e74:	f7ff fc24 	bl	80036c0 <_SendPacket>
  RECORD_END();
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003e7e:	4b06      	ldr	r3, [pc, #24]	@ (8003e98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d002      	beq.n	8003e8c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003e86:	4b04      	ldr	r3, [pc, #16]	@ (8003e98 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e8a:	4798      	blx	r3
  }
}
 8003e8c:	bf00      	nop
 8003e8e:	3730      	adds	r7, #48	@ 0x30
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	2000367c 	.word	0x2000367c
 8003e98:	2000364c 	.word	0x2000364c

08003e9c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b092      	sub	sp, #72	@ 0x48
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003ea4:	f3ef 8311 	mrs	r3, BASEPRI
 8003ea8:	f04f 0120 	mov.w	r1, #32
 8003eac:	f381 8811 	msr	BASEPRI, r1
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	486a      	ldr	r0, [pc, #424]	@ (800405c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003eb4:	f7ff fb19 	bl	80034ea <_PreparePacket>
 8003eb8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	4b66      	ldr	r3, [pc, #408]	@ (8004060 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ece:	e00b      	b.n	8003ee8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003ed0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ed6:	1c59      	adds	r1, r3, #1
 8003ed8:	6479      	str	r1, [r7, #68]	@ 0x44
 8003eda:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]
 8003ee2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ee4:	09db      	lsrs	r3, r3, #7
 8003ee6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ee8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003eea:	2b7f      	cmp	r3, #127	@ 0x7f
 8003eec:	d8f0      	bhi.n	8003ed0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003eee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ef4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]
 8003efa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003efc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f08:	e00b      	b.n	8003f22 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f10:	1c59      	adds	r1, r3, #1
 8003f12:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8003f14:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]
 8003f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f1e:	09db      	lsrs	r3, r3, #7
 8003f20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f24:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f26:	d8f0      	bhi.n	8003f0a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003f28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f2e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]
 8003f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f36:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	4619      	mov	r1, r3
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f7ff faa3 	bl	800348c <_EncodeStr>
 8003f46:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003f48:	2209      	movs	r2, #9
 8003f4a:	68f9      	ldr	r1, [r7, #12]
 8003f4c:	6938      	ldr	r0, [r7, #16]
 8003f4e:	f7ff fbb7 	bl	80036c0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b40      	ldr	r3, [pc, #256]	@ (8004060 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	1ad3      	subs	r3, r2, r3
 8003f64:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f66:	e00b      	b.n	8003f80 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003f68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f6e:	1c59      	adds	r1, r3, #1
 8003f70:	6379      	str	r1, [r7, #52]	@ 0x34
 8003f72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003f76:	b2d2      	uxtb	r2, r2
 8003f78:	701a      	strb	r2, [r3, #0]
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	09db      	lsrs	r3, r3, #7
 8003f7e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f82:	2b7f      	cmp	r3, #127	@ 0x7f
 8003f84:	d8f0      	bhi.n	8003f68 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f88:	1c5a      	adds	r2, r3, #1
 8003f8a:	637a      	str	r2, [r7, #52]	@ 0x34
 8003f8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f94:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fa0:	e00b      	b.n	8003fba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fa4:	b2da      	uxtb	r2, r3
 8003fa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fa8:	1c59      	adds	r1, r3, #1
 8003faa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8003fac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	701a      	strb	r2, [r3, #0]
 8003fb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fb6:	09db      	lsrs	r3, r3, #7
 8003fb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fbc:	2b7f      	cmp	r3, #127	@ 0x7f
 8003fbe:	d8f0      	bhi.n	8003fa2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fc2:	1c5a      	adds	r2, r3, #1
 8003fc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003fc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	701a      	strb	r2, [r3, #0]
 8003fcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	623b      	str	r3, [r7, #32]
 8003fda:	e00b      	b.n	8003ff4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003fdc:	6a3b      	ldr	r3, [r7, #32]
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe2:	1c59      	adds	r1, r3, #1
 8003fe4:	6279      	str	r1, [r7, #36]	@ 0x24
 8003fe6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	09db      	lsrs	r3, r3, #7
 8003ff2:	623b      	str	r3, [r7, #32]
 8003ff4:	6a3b      	ldr	r3, [r7, #32]
 8003ff6:	2b7f      	cmp	r3, #127	@ 0x7f
 8003ff8:	d8f0      	bhi.n	8003fdc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	627a      	str	r2, [r7, #36]	@ 0x24
 8004000:	6a3a      	ldr	r2, [r7, #32]
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]
 8004006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004008:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	61fb      	str	r3, [r7, #28]
 800400e:	2300      	movs	r3, #0
 8004010:	61bb      	str	r3, [r7, #24]
 8004012:	e00b      	b.n	800402c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8004014:	69bb      	ldr	r3, [r7, #24]
 8004016:	b2da      	uxtb	r2, r3
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	1c59      	adds	r1, r3, #1
 800401c:	61f9      	str	r1, [r7, #28]
 800401e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	09db      	lsrs	r3, r3, #7
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004030:	d8f0      	bhi.n	8004014 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	1c5a      	adds	r2, r3, #1
 8004036:	61fa      	str	r2, [r7, #28]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	b2d2      	uxtb	r2, r2
 800403c:	701a      	strb	r2, [r3, #0]
 800403e:	69fb      	ldr	r3, [r7, #28]
 8004040:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8004042:	2215      	movs	r2, #21
 8004044:	68f9      	ldr	r1, [r7, #12]
 8004046:	6938      	ldr	r0, [r7, #16]
 8004048:	f7ff fb3a 	bl	80036c0 <_SendPacket>
  RECORD_END();
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	f383 8811 	msr	BASEPRI, r3
}
 8004052:	bf00      	nop
 8004054:	3748      	adds	r7, #72	@ 0x48
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	2000367c 	.word	0x2000367c
 8004060:	2000364c 	.word	0x2000364c

08004064 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8004064:	b580      	push	{r7, lr}
 8004066:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8004068:	4b07      	ldr	r3, [pc, #28]	@ (8004088 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d008      	beq.n	8004082 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8004070:	4b05      	ldr	r3, [pc, #20]	@ (8004088 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8004072:	6a1b      	ldr	r3, [r3, #32]
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800407a:	4b03      	ldr	r3, [pc, #12]	@ (8004088 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	4798      	blx	r3
  }
}
 8004082:	bf00      	nop
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	2000364c 	.word	0x2000364c

0800408c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800408c:	b580      	push	{r7, lr}
 800408e:	b086      	sub	sp, #24
 8004090:	af00      	add	r7, sp, #0
 8004092:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004094:	f3ef 8311 	mrs	r3, BASEPRI
 8004098:	f04f 0120 	mov.w	r1, #32
 800409c:	f381 8811 	msr	BASEPRI, r1
 80040a0:	617b      	str	r3, [r7, #20]
 80040a2:	480b      	ldr	r0, [pc, #44]	@ (80040d0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80040a4:	f7ff fa21 	bl	80034ea <_PreparePacket>
 80040a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80040aa:	2280      	movs	r2, #128	@ 0x80
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	6938      	ldr	r0, [r7, #16]
 80040b0:	f7ff f9ec 	bl	800348c <_EncodeStr>
 80040b4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80040b6:	220e      	movs	r2, #14
 80040b8:	68f9      	ldr	r1, [r7, #12]
 80040ba:	6938      	ldr	r0, [r7, #16]
 80040bc:	f7ff fb00 	bl	80036c0 <_SendPacket>
  RECORD_END();
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f383 8811 	msr	BASEPRI, r3
}
 80040c6:	bf00      	nop
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	2000367c 	.word	0x2000367c

080040d4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80040d4:	b590      	push	{r4, r7, lr}
 80040d6:	b083      	sub	sp, #12
 80040d8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80040da:	4b15      	ldr	r3, [pc, #84]	@ (8004130 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80040dc:	6a1b      	ldr	r3, [r3, #32]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d01a      	beq.n	8004118 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80040e2:	4b13      	ldr	r3, [pc, #76]	@ (8004130 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d015      	beq.n	8004118 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80040ec:	4b10      	ldr	r3, [pc, #64]	@ (8004130 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4798      	blx	r3
 80040f4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80040f8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80040fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	000a      	movs	r2, r1
 8004108:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800410a:	4613      	mov	r3, r2
 800410c:	461a      	mov	r2, r3
 800410e:	4621      	mov	r1, r4
 8004110:	200d      	movs	r0, #13
 8004112:	f7ff fcef 	bl	8003af4 <SEGGER_SYSVIEW_RecordU32x2>
 8004116:	e006      	b.n	8004126 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8004118:	4b06      	ldr	r3, [pc, #24]	@ (8004134 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4619      	mov	r1, r3
 800411e:	200c      	movs	r0, #12
 8004120:	f7ff fcac 	bl	8003a7c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8004124:	bf00      	nop
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bd90      	pop	{r4, r7, pc}
 800412e:	bf00      	nop
 8004130:	2000364c 	.word	0x2000364c
 8004134:	e0001004 	.word	0xe0001004

08004138 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8004138:	b580      	push	{r7, lr}
 800413a:	b086      	sub	sp, #24
 800413c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800413e:	f3ef 8311 	mrs	r3, BASEPRI
 8004142:	f04f 0120 	mov.w	r1, #32
 8004146:	f381 8811 	msr	BASEPRI, r1
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	4819      	ldr	r0, [pc, #100]	@ (80041b4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 800414e:	f7ff f9cc 	bl	80034ea <_PreparePacket>
 8004152:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8004158:	4b17      	ldr	r3, [pc, #92]	@ (80041b8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004160:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	617b      	str	r3, [r7, #20]
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	613b      	str	r3, [r7, #16]
 800416a:	e00b      	b.n	8004184 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	b2da      	uxtb	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	1c59      	adds	r1, r3, #1
 8004174:	6179      	str	r1, [r7, #20]
 8004176:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	701a      	strb	r2, [r3, #0]
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	09db      	lsrs	r3, r3, #7
 8004182:	613b      	str	r3, [r7, #16]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b7f      	cmp	r3, #127	@ 0x7f
 8004188:	d8f0      	bhi.n	800416c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	1c5a      	adds	r2, r3, #1
 800418e:	617a      	str	r2, [r7, #20]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 800419a:	2202      	movs	r2, #2
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	68b8      	ldr	r0, [r7, #8]
 80041a0:	f7ff fa8e 	bl	80036c0 <_SendPacket>
  RECORD_END();
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f383 8811 	msr	BASEPRI, r3
}
 80041aa:	bf00      	nop
 80041ac:	3718      	adds	r7, #24
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	2000367c 	.word	0x2000367c
 80041b8:	e000ed04 	.word	0xe000ed04

080041bc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80041bc:	b580      	push	{r7, lr}
 80041be:	b082      	sub	sp, #8
 80041c0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80041c2:	f3ef 8311 	mrs	r3, BASEPRI
 80041c6:	f04f 0120 	mov.w	r1, #32
 80041ca:	f381 8811 	msr	BASEPRI, r1
 80041ce:	607b      	str	r3, [r7, #4]
 80041d0:	4807      	ldr	r0, [pc, #28]	@ (80041f0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80041d2:	f7ff f98a 	bl	80034ea <_PreparePacket>
 80041d6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80041d8:	2203      	movs	r2, #3
 80041da:	6839      	ldr	r1, [r7, #0]
 80041dc:	6838      	ldr	r0, [r7, #0]
 80041de:	f7ff fa6f 	bl	80036c0 <_SendPacket>
  RECORD_END();
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	f383 8811 	msr	BASEPRI, r3
}
 80041e8:	bf00      	nop
 80041ea:	3708      	adds	r7, #8
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	2000367c 	.word	0x2000367c

080041f4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80041fa:	f3ef 8311 	mrs	r3, BASEPRI
 80041fe:	f04f 0120 	mov.w	r1, #32
 8004202:	f381 8811 	msr	BASEPRI, r1
 8004206:	607b      	str	r3, [r7, #4]
 8004208:	4807      	ldr	r0, [pc, #28]	@ (8004228 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 800420a:	f7ff f96e 	bl	80034ea <_PreparePacket>
 800420e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8004210:	2212      	movs	r2, #18
 8004212:	6839      	ldr	r1, [r7, #0]
 8004214:	6838      	ldr	r0, [r7, #0]
 8004216:	f7ff fa53 	bl	80036c0 <_SendPacket>
  RECORD_END();
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f383 8811 	msr	BASEPRI, r3
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	2000367c 	.word	0x2000367c

0800422c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004232:	f3ef 8311 	mrs	r3, BASEPRI
 8004236:	f04f 0120 	mov.w	r1, #32
 800423a:	f381 8811 	msr	BASEPRI, r1
 800423e:	607b      	str	r3, [r7, #4]
 8004240:	4807      	ldr	r0, [pc, #28]	@ (8004260 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8004242:	f7ff f952 	bl	80034ea <_PreparePacket>
 8004246:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8004248:	2211      	movs	r2, #17
 800424a:	6839      	ldr	r1, [r7, #0]
 800424c:	6838      	ldr	r0, [r7, #0]
 800424e:	f7ff fa37 	bl	80036c0 <_SendPacket>
  RECORD_END();
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f383 8811 	msr	BASEPRI, r3
}
 8004258:	bf00      	nop
 800425a:	3708      	adds	r7, #8
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	2000367c 	.word	0x2000367c

08004264 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800426c:	f3ef 8311 	mrs	r3, BASEPRI
 8004270:	f04f 0120 	mov.w	r1, #32
 8004274:	f381 8811 	msr	BASEPRI, r1
 8004278:	617b      	str	r3, [r7, #20]
 800427a:	4819      	ldr	r0, [pc, #100]	@ (80042e0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800427c:	f7ff f935 	bl	80034ea <_PreparePacket>
 8004280:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004286:	4b17      	ldr	r3, [pc, #92]	@ (80042e4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	61fb      	str	r3, [r7, #28]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	61bb      	str	r3, [r7, #24]
 8004298:	e00b      	b.n	80042b2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	1c59      	adds	r1, r3, #1
 80042a2:	61f9      	str	r1, [r7, #28]
 80042a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80042a8:	b2d2      	uxtb	r2, r2
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	69bb      	ldr	r3, [r7, #24]
 80042ae:	09db      	lsrs	r3, r3, #7
 80042b0:	61bb      	str	r3, [r7, #24]
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80042b6:	d8f0      	bhi.n	800429a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	1c5a      	adds	r2, r3, #1
 80042bc:	61fa      	str	r2, [r7, #28]
 80042be:	69ba      	ldr	r2, [r7, #24]
 80042c0:	b2d2      	uxtb	r2, r2
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80042c8:	2208      	movs	r2, #8
 80042ca:	68f9      	ldr	r1, [r7, #12]
 80042cc:	6938      	ldr	r0, [r7, #16]
 80042ce:	f7ff f9f7 	bl	80036c0 <_SendPacket>
  RECORD_END();
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f383 8811 	msr	BASEPRI, r3
}
 80042d8:	bf00      	nop
 80042da:	3720      	adds	r7, #32
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	2000367c 	.word	0x2000367c
 80042e4:	2000364c 	.word	0x2000364c

080042e8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b088      	sub	sp, #32
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80042f0:	f3ef 8311 	mrs	r3, BASEPRI
 80042f4:	f04f 0120 	mov.w	r1, #32
 80042f8:	f381 8811 	msr	BASEPRI, r1
 80042fc:	617b      	str	r3, [r7, #20]
 80042fe:	4819      	ldr	r0, [pc, #100]	@ (8004364 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8004300:	f7ff f8f3 	bl	80034ea <_PreparePacket>
 8004304:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800430a:	4b17      	ldr	r3, [pc, #92]	@ (8004368 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	61fb      	str	r3, [r7, #28]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	61bb      	str	r3, [r7, #24]
 800431c:	e00b      	b.n	8004336 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	b2da      	uxtb	r2, r3
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	1c59      	adds	r1, r3, #1
 8004326:	61f9      	str	r1, [r7, #28]
 8004328:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800432c:	b2d2      	uxtb	r2, r2
 800432e:	701a      	strb	r2, [r3, #0]
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	09db      	lsrs	r3, r3, #7
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	2b7f      	cmp	r3, #127	@ 0x7f
 800433a:	d8f0      	bhi.n	800431e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	61fa      	str	r2, [r7, #28]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	701a      	strb	r2, [r3, #0]
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800434c:	2204      	movs	r2, #4
 800434e:	68f9      	ldr	r1, [r7, #12]
 8004350:	6938      	ldr	r0, [r7, #16]
 8004352:	f7ff f9b5 	bl	80036c0 <_SendPacket>
  RECORD_END();
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	f383 8811 	msr	BASEPRI, r3
}
 800435c:	bf00      	nop
 800435e:	3720      	adds	r7, #32
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	2000367c 	.word	0x2000367c
 8004368:	2000364c 	.word	0x2000364c

0800436c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800436c:	b580      	push	{r7, lr}
 800436e:	b088      	sub	sp, #32
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004374:	f3ef 8311 	mrs	r3, BASEPRI
 8004378:	f04f 0120 	mov.w	r1, #32
 800437c:	f381 8811 	msr	BASEPRI, r1
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	4819      	ldr	r0, [pc, #100]	@ (80043e8 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004384:	f7ff f8b1 	bl	80034ea <_PreparePacket>
 8004388:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800438e:	4b17      	ldr	r3, [pc, #92]	@ (80043ec <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	61fb      	str	r3, [r7, #28]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	61bb      	str	r3, [r7, #24]
 80043a0:	e00b      	b.n	80043ba <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	1c59      	adds	r1, r3, #1
 80043aa:	61f9      	str	r1, [r7, #28]
 80043ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80043b0:	b2d2      	uxtb	r2, r2
 80043b2:	701a      	strb	r2, [r3, #0]
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	09db      	lsrs	r3, r3, #7
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80043be:	d8f0      	bhi.n	80043a2 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	61fa      	str	r2, [r7, #28]
 80043c6:	69ba      	ldr	r2, [r7, #24]
 80043c8:	b2d2      	uxtb	r2, r2
 80043ca:	701a      	strb	r2, [r3, #0]
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80043d0:	2206      	movs	r2, #6
 80043d2:	68f9      	ldr	r1, [r7, #12]
 80043d4:	6938      	ldr	r0, [r7, #16]
 80043d6:	f7ff f973 	bl	80036c0 <_SendPacket>
  RECORD_END();
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f383 8811 	msr	BASEPRI, r3
}
 80043e0:	bf00      	nop
 80043e2:	3720      	adds	r7, #32
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	2000367c 	.word	0x2000367c
 80043ec:	2000364c 	.word	0x2000364c

080043f0 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b08c      	sub	sp, #48	@ 0x30
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	4603      	mov	r3, r0
 80043f8:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 80043fa:	4b40      	ldr	r3, [pc, #256]	@ (80044fc <SEGGER_SYSVIEW_SendModule+0x10c>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d077      	beq.n	80044f2 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 8004402:	4b3e      	ldr	r3, [pc, #248]	@ (80044fc <SEGGER_SYSVIEW_SendModule+0x10c>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004408:	2300      	movs	r3, #0
 800440a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800440c:	e008      	b.n	8004420 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800440e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8004414:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004416:	2b00      	cmp	r3, #0
 8004418:	d007      	beq.n	800442a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800441a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800441c:	3301      	adds	r3, #1
 800441e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004420:	79fb      	ldrb	r3, [r7, #7]
 8004422:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004424:	429a      	cmp	r2, r3
 8004426:	d3f2      	bcc.n	800440e <SEGGER_SYSVIEW_SendModule+0x1e>
 8004428:	e000      	b.n	800442c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800442a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800442c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442e:	2b00      	cmp	r3, #0
 8004430:	d055      	beq.n	80044de <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004432:	f3ef 8311 	mrs	r3, BASEPRI
 8004436:	f04f 0120 	mov.w	r1, #32
 800443a:	f381 8811 	msr	BASEPRI, r1
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	482f      	ldr	r0, [pc, #188]	@ (8004500 <SEGGER_SYSVIEW_SendModule+0x110>)
 8004442:	f7ff f852 	bl	80034ea <_PreparePacket>
 8004446:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004450:	79fb      	ldrb	r3, [r7, #7]
 8004452:	623b      	str	r3, [r7, #32]
 8004454:	e00b      	b.n	800446e <SEGGER_SYSVIEW_SendModule+0x7e>
 8004456:	6a3b      	ldr	r3, [r7, #32]
 8004458:	b2da      	uxtb	r2, r3
 800445a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800445c:	1c59      	adds	r1, r3, #1
 800445e:	6279      	str	r1, [r7, #36]	@ 0x24
 8004460:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004464:	b2d2      	uxtb	r2, r2
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	09db      	lsrs	r3, r3, #7
 800446c:	623b      	str	r3, [r7, #32]
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	2b7f      	cmp	r3, #127	@ 0x7f
 8004472:	d8f0      	bhi.n	8004456 <SEGGER_SYSVIEW_SendModule+0x66>
 8004474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	627a      	str	r2, [r7, #36]	@ 0x24
 800447a:	6a3a      	ldr	r2, [r7, #32]
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004482:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	61fb      	str	r3, [r7, #28]
 8004488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	61bb      	str	r3, [r7, #24]
 800448e:	e00b      	b.n	80044a8 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004490:	69bb      	ldr	r3, [r7, #24]
 8004492:	b2da      	uxtb	r2, r3
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	1c59      	adds	r1, r3, #1
 8004498:	61f9      	str	r1, [r7, #28]
 800449a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800449e:	b2d2      	uxtb	r2, r2
 80044a0:	701a      	strb	r2, [r3, #0]
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	09db      	lsrs	r3, r3, #7
 80044a6:	61bb      	str	r3, [r7, #24]
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80044ac:	d8f0      	bhi.n	8004490 <SEGGER_SYSVIEW_SendModule+0xa0>
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	1c5a      	adds	r2, r3, #1
 80044b2:	61fa      	str	r2, [r7, #28]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	b2d2      	uxtb	r2, r2
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80044be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2280      	movs	r2, #128	@ 0x80
 80044c4:	4619      	mov	r1, r3
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f7fe ffe0 	bl	800348c <_EncodeStr>
 80044cc:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80044ce:	2216      	movs	r2, #22
 80044d0:	68f9      	ldr	r1, [r7, #12]
 80044d2:	6938      	ldr	r0, [r7, #16]
 80044d4:	f7ff f8f4 	bl	80036c0 <_SendPacket>
      RECORD_END();
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 80044de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d006      	beq.n	80044f2 <SEGGER_SYSVIEW_SendModule+0x102>
 80044e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 80044ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	4798      	blx	r3
    }
  }
}
 80044f2:	bf00      	nop
 80044f4:	3730      	adds	r7, #48	@ 0x30
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	20003674 	.word	0x20003674
 8004500:	2000367c 	.word	0x2000367c

08004504 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800450a:	4b0c      	ldr	r3, [pc, #48]	@ (800453c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00f      	beq.n	8004532 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8004512:	4b0a      	ldr	r3, [pc, #40]	@ (800453c <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1f2      	bne.n	8004518 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8004532:	bf00      	nop
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20003674 	.word	0x20003674

08004540 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8004540:	b580      	push	{r7, lr}
 8004542:	b086      	sub	sp, #24
 8004544:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8004546:	f3ef 8311 	mrs	r3, BASEPRI
 800454a:	f04f 0120 	mov.w	r1, #32
 800454e:	f381 8811 	msr	BASEPRI, r1
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	4817      	ldr	r0, [pc, #92]	@ (80045b4 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8004556:	f7fe ffc8 	bl	80034ea <_PreparePacket>
 800455a:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	4b14      	ldr	r3, [pc, #80]	@ (80045b8 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	613b      	str	r3, [r7, #16]
 800456a:	e00b      	b.n	8004584 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	b2da      	uxtb	r2, r3
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	1c59      	adds	r1, r3, #1
 8004574:	6179      	str	r1, [r7, #20]
 8004576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	09db      	lsrs	r3, r3, #7
 8004582:	613b      	str	r3, [r7, #16]
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	2b7f      	cmp	r3, #127	@ 0x7f
 8004588:	d8f0      	bhi.n	800456c <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	617a      	str	r2, [r7, #20]
 8004590:	693a      	ldr	r2, [r7, #16]
 8004592:	b2d2      	uxtb	r2, r2
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800459a:	221b      	movs	r2, #27
 800459c:	6879      	ldr	r1, [r7, #4]
 800459e:	68b8      	ldr	r0, [r7, #8]
 80045a0:	f7ff f88e 	bl	80036c0 <_SendPacket>
  RECORD_END();
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f383 8811 	msr	BASEPRI, r3
}
 80045aa:	bf00      	nop
 80045ac:	3718      	adds	r7, #24
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	2000367c 	.word	0x2000367c
 80045b8:	20003678 	.word	0x20003678

080045bc <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08a      	sub	sp, #40	@ 0x28
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80045c4:	f3ef 8311 	mrs	r3, BASEPRI
 80045c8:	f04f 0120 	mov.w	r1, #32
 80045cc:	f381 8811 	msr	BASEPRI, r1
 80045d0:	617b      	str	r3, [r7, #20]
 80045d2:	4827      	ldr	r0, [pc, #156]	@ (8004670 <SEGGER_SYSVIEW_Warn+0xb4>)
 80045d4:	f7fe ff89 	bl	80034ea <_PreparePacket>
 80045d8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80045da:	2280      	movs	r2, #128	@ 0x80
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	6938      	ldr	r0, [r7, #16]
 80045e0:	f7fe ff54 	bl	800348c <_EncodeStr>
 80045e4:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ea:	2301      	movs	r3, #1
 80045ec:	623b      	str	r3, [r7, #32]
 80045ee:	e00b      	b.n	8004608 <SEGGER_SYSVIEW_Warn+0x4c>
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	b2da      	uxtb	r2, r3
 80045f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f6:	1c59      	adds	r1, r3, #1
 80045f8:	6279      	str	r1, [r7, #36]	@ 0x24
 80045fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]
 8004602:	6a3b      	ldr	r3, [r7, #32]
 8004604:	09db      	lsrs	r3, r3, #7
 8004606:	623b      	str	r3, [r7, #32]
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	2b7f      	cmp	r3, #127	@ 0x7f
 800460c:	d8f0      	bhi.n	80045f0 <SEGGER_SYSVIEW_Warn+0x34>
 800460e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004610:	1c5a      	adds	r2, r3, #1
 8004612:	627a      	str	r2, [r7, #36]	@ 0x24
 8004614:	6a3a      	ldr	r2, [r7, #32]
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]
 800461a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800461c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	61fb      	str	r3, [r7, #28]
 8004622:	2300      	movs	r3, #0
 8004624:	61bb      	str	r3, [r7, #24]
 8004626:	e00b      	b.n	8004640 <SEGGER_SYSVIEW_Warn+0x84>
 8004628:	69bb      	ldr	r3, [r7, #24]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	1c59      	adds	r1, r3, #1
 8004630:	61f9      	str	r1, [r7, #28]
 8004632:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	09db      	lsrs	r3, r3, #7
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b7f      	cmp	r3, #127	@ 0x7f
 8004644:	d8f0      	bhi.n	8004628 <SEGGER_SYSVIEW_Warn+0x6c>
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	61fa      	str	r2, [r7, #28]
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	b2d2      	uxtb	r2, r2
 8004650:	701a      	strb	r2, [r3, #0]
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8004656:	221a      	movs	r2, #26
 8004658:	68f9      	ldr	r1, [r7, #12]
 800465a:	6938      	ldr	r0, [r7, #16]
 800465c:	f7ff f830 	bl	80036c0 <_SendPacket>
  RECORD_END();
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	f383 8811 	msr	BASEPRI, r3
}
 8004666:	bf00      	nop
 8004668:	3728      	adds	r7, #40	@ 0x28
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	2000367c 	.word	0x2000367c

08004674 <memcmp>:
 8004674:	b510      	push	{r4, lr}
 8004676:	3901      	subs	r1, #1
 8004678:	4402      	add	r2, r0
 800467a:	4290      	cmp	r0, r2
 800467c:	d101      	bne.n	8004682 <memcmp+0xe>
 800467e:	2000      	movs	r0, #0
 8004680:	e005      	b.n	800468e <memcmp+0x1a>
 8004682:	7803      	ldrb	r3, [r0, #0]
 8004684:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004688:	42a3      	cmp	r3, r4
 800468a:	d001      	beq.n	8004690 <memcmp+0x1c>
 800468c:	1b18      	subs	r0, r3, r4
 800468e:	bd10      	pop	{r4, pc}
 8004690:	3001      	adds	r0, #1
 8004692:	e7f2      	b.n	800467a <memcmp+0x6>

08004694 <memset>:
 8004694:	4603      	mov	r3, r0
 8004696:	4402      	add	r2, r0
 8004698:	4293      	cmp	r3, r2
 800469a:	d100      	bne.n	800469e <memset+0xa>
 800469c:	4770      	bx	lr
 800469e:	f803 1b01 	strb.w	r1, [r3], #1
 80046a2:	e7f9      	b.n	8004698 <memset+0x4>

080046a4 <__libc_init_array>:
 80046a4:	b570      	push	{r4, r5, r6, lr}
 80046a6:	2600      	movs	r6, #0
 80046a8:	4d0c      	ldr	r5, [pc, #48]	@ (80046dc <__libc_init_array+0x38>)
 80046aa:	4c0d      	ldr	r4, [pc, #52]	@ (80046e0 <__libc_init_array+0x3c>)
 80046ac:	1b64      	subs	r4, r4, r5
 80046ae:	10a4      	asrs	r4, r4, #2
 80046b0:	42a6      	cmp	r6, r4
 80046b2:	d109      	bne.n	80046c8 <__libc_init_array+0x24>
 80046b4:	f000 f828 	bl	8004708 <_init>
 80046b8:	2600      	movs	r6, #0
 80046ba:	4d0a      	ldr	r5, [pc, #40]	@ (80046e4 <__libc_init_array+0x40>)
 80046bc:	4c0a      	ldr	r4, [pc, #40]	@ (80046e8 <__libc_init_array+0x44>)
 80046be:	1b64      	subs	r4, r4, r5
 80046c0:	10a4      	asrs	r4, r4, #2
 80046c2:	42a6      	cmp	r6, r4
 80046c4:	d105      	bne.n	80046d2 <__libc_init_array+0x2e>
 80046c6:	bd70      	pop	{r4, r5, r6, pc}
 80046c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046cc:	4798      	blx	r3
 80046ce:	3601      	adds	r6, #1
 80046d0:	e7ee      	b.n	80046b0 <__libc_init_array+0xc>
 80046d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046d6:	4798      	blx	r3
 80046d8:	3601      	adds	r6, #1
 80046da:	e7f2      	b.n	80046c2 <__libc_init_array+0x1e>
 80046dc:	08004848 	.word	0x08004848
 80046e0:	08004848 	.word	0x08004848
 80046e4:	08004848 	.word	0x08004848
 80046e8:	0800484c 	.word	0x0800484c

080046ec <memcpy>:
 80046ec:	440a      	add	r2, r1
 80046ee:	4291      	cmp	r1, r2
 80046f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80046f4:	d100      	bne.n	80046f8 <memcpy+0xc>
 80046f6:	4770      	bx	lr
 80046f8:	b510      	push	{r4, lr}
 80046fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046fe:	4291      	cmp	r1, r2
 8004700:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004704:	d1f9      	bne.n	80046fa <memcpy+0xe>
 8004706:	bd10      	pop	{r4, pc}

08004708 <_init>:
 8004708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470a:	bf00      	nop
 800470c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800470e:	bc08      	pop	{r3}
 8004710:	469e      	mov	lr, r3
 8004712:	4770      	bx	lr

08004714 <_fini>:
 8004714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004716:	bf00      	nop
 8004718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471a:	bc08      	pop	{r3}
 800471c:	469e      	mov	lr, r3
 800471e:	4770      	bx	lr
